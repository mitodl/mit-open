# Generated by Django 4.2.13 on 2024-06-25 22:46

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        (
            "learning_resources",
            "0054_rename_description_learningresourceofferor_value_prop",
        ),
        ("channels", "0008_rename_offerordetail_unitdetail"),
        ("testimonials", "0004_update_attestation_avatar_make_optional"),
        ("widgets", "0003_alter_widgetinstance_configuration"),
    ]

    operations = [
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_channel CASCADE", migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_channelgrouprole CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_channelinvitation CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_channelmembershipconfig CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_channelmembershipconfig_channels CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_channelsubscription CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_channelinvitation CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_comment CASCADE", migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_linkmeta CASCADE", migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_post CASCADE", migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_redditaccesstoken CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_redditrefreshtoken CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_spamcheckresult CASCADE",
            migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS channels_subscription CASCADE", migrations.RunSQL.noop
        ),
        migrations.RenameModel(
            old_name="FieldChannel",
            new_name="Channel",
        ),
        migrations.RenameModel(
            old_name="FieldChannelGroupRole",
            new_name="ChannelGroupRole",
        ),
        migrations.AlterField(
            model_name="channel",
            name="widget_list",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="channel",
                to="widgets.widgetlist",
            ),
        ),
        migrations.RenameModel(
            old_name="FieldList",
            new_name="ChannelList",
        ),
        migrations.RenameModel(
            old_name="Subfield",
            new_name="SubChannel",
        ),
        migrations.RenameField(
            model_name="channelgrouprole",
            old_name="field",
            new_name="channel",
        ),
        migrations.RenameField(
            model_name="channellist",
            old_name="field_channel",
            new_name="channel",
        ),
        migrations.RenameField(
            model_name="channellist",
            old_name="field_list",
            new_name="channel_list",
        ),
        migrations.RenameField(
            model_name="subchannel",
            old_name="field_channel",
            new_name="channel",
        ),
        migrations.AlterUniqueTogether(
            name="subchannel",
            unique_together=set(),
        ),
        migrations.AlterField(
            model_name="subchannel",
            name="parent_channel",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sub_channels",
                to="channels.channel",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="channelgrouprole",
            unique_together={("channel", "group", "role")},
        ),
        migrations.AlterUniqueTogether(
            name="channellist",
            unique_together={("channel_list", "channel")},
        ),
        migrations.AlterUniqueTogether(
            name="subchannel",
            unique_together={("channel", "parent_channel")},
        ),
        migrations.AlterIndexTogether(
            name="channelgrouprole",
            index_together={("channel", "role")},
        ),
    ]
