/* tslint:disable */
/* eslint-disable */
/**
 * MIT Open API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1 (v0)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base"

/**
 * Serializer for attestations.
 * @export
 * @interface Attestation
 */
export interface Attestation {
  /**
   *
   * @type {number}
   * @memberof Attestation
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Attestation
   */
  avatar: string
  /**
   *
   * @type {string}
   * @memberof Attestation
   */
  avatar_small: string
  /**
   *
   * @type {string}
   * @memberof Attestation
   */
  avatar_medium: string
  /**
   * Get the cover image URL
   * @type {string}
   * @memberof Attestation
   */
  cover: string | null
  /**
   *
   * @type {string}
   * @memberof Attestation
   */
  created_on: string
  /**
   *
   * @type {string}
   * @memberof Attestation
   */
  updated_on: string
  /**
   * The name of the attestant
   * @type {string}
   * @memberof Attestation
   */
  attestant_name: string
  /**
   * The attestant\'s title
   * @type {string}
   * @memberof Attestation
   */
  title: string
  /**
   * The testimonial attestation
   * @type {string}
   * @memberof Attestation
   */
  quote: string
  /**
   * The datetime to show the testimonial
   * @type {string}
   * @memberof Attestation
   */
  publish_date?: string | null
  /**
   * Channels that the testimonial belongs to
   * @type {Array<number>}
   * @memberof Attestation
   */
  channels: Array<number>
}
/**
 *
 * @export
 * @enum {string}
 */

export const BlankEnum = {
  Empty: "",
} as const

export type BlankEnum = (typeof BlankEnum)[keyof typeof BlankEnum]

/**
 * Serializer for CKEditor settings
 * @export
 * @interface CKEditorSettings
 */
export interface CKEditorSettings {
  /**
   * Get the JWT token
   * @type {string}
   * @memberof CKEditorSettings
   */
  token: string | null
}
/**
 * * `yes` - Yes * `no` - No * `not-sure-yet` - Not Sure Yet
 * @export
 * @enum {string}
 */

export const CertificateDesiredEnum = {
  Yes: "yes",
  No: "no",
  NotSureYet: "not-sure-yet",
} as const

export type CertificateDesiredEnum =
  (typeof CertificateDesiredEnum)[keyof typeof CertificateDesiredEnum]

/**
 * Serializer for the ChannelDepartmentDetail model
 * @export
 * @interface ChannelDepartmentDetail
 */
export interface ChannelDepartmentDetail {
  /**
   *
   * @type {string}
   * @memberof ChannelDepartmentDetail
   */
  department?: string | null
}
/**
 * Serializer for the ChannelDepartmentDetail model
 * @export
 * @interface ChannelDepartmentDetailRequest
 */
export interface ChannelDepartmentDetailRequest {
  /**
   *
   * @type {string}
   * @memberof ChannelDepartmentDetailRequest
   */
  department?: string | null
}
/**
 * Serializer for the ChannelOfferorDetail model
 * @export
 * @interface ChannelOfferorDetail
 */
export interface ChannelOfferorDetail {
  /**
   *
   * @type {string}
   * @memberof ChannelOfferorDetail
   */
  offeror?: string | null
}
/**
 * Serializer for the ChannelOfferorDetail model
 * @export
 * @interface ChannelOfferorDetailRequest
 */
export interface ChannelOfferorDetailRequest {
  /**
   *
   * @type {string}
   * @memberof ChannelOfferorDetailRequest
   */
  offeror?: string | null
}
/**
 * Serializer for the ChannelTopicDetail model
 * @export
 * @interface ChannelTopicDetail
 */
export interface ChannelTopicDetail {
  /**
   *
   * @type {number}
   * @memberof ChannelTopicDetail
   */
  topic?: number | null
}
/**
 * Serializer for the ChannelTopicDetail model
 * @export
 * @interface ChannelTopicDetailRequest
 */
export interface ChannelTopicDetailRequest {
  /**
   *
   * @type {number}
   * @memberof ChannelTopicDetailRequest
   */
  topic?: number | null
}
/**
 * * `topic` - Topic * `department` - Department * `offeror` - Offeror * `pathway` - Pathway
 * @export
 * @enum {string}
 */

export const ChannelTypeEnum = {
  Topic: "topic",
  Department: "department",
  Offeror: "offeror",
  Pathway: "pathway",
} as const

export type ChannelTypeEnum =
  (typeof ChannelTypeEnum)[keyof typeof ChannelTypeEnum]

/**
 * * `online` - Online * `in-person` - In-Person * `hybrid` - Hybrid
 * @export
 * @enum {string}
 */

export const CourseFormatEnum = {
  Online: "online",
  InPerson: "in-person",
  Hybrid: "hybrid",
} as const

export type CourseFormatEnum =
  (typeof CourseFormatEnum)[keyof typeof CourseFormatEnum]

/**
 * * `no-formal` - No Formal Education * `primary` - Primary Education * `secondary-or-high-school` - Secondary Education or High School * `ged` - GED * `vocational-qualification` - Vocational Qualification
 * @export
 * @enum {string}
 */

export const CurrentEducationEnum = {
  NoFormal: "no-formal",
  Primary: "primary",
  SecondaryOrHighSchool: "secondary-or-high-school",
  Ged: "ged",
  VocationalQualification: "vocational-qualification",
} as const

export type CurrentEducationEnum =
  (typeof CurrentEducationEnum)[keyof typeof CurrentEducationEnum]

/**
 * Serializer for Channel model of type department
 * @export
 * @interface DepartmentChannel
 */
export interface DepartmentChannel {
  /**
   *
   * @type {number}
   * @memberof DepartmentChannel
   */
  id: number
  /**
   * Get the avatar image URL
   * @type {string}
   * @memberof DepartmentChannel
   */
  avatar?: string | null
  /**
   * Get the avatar image small URL
   * @type {string}
   * @memberof DepartmentChannel
   */
  avatar_small: string | null
  /**
   * Get the avatar image medium URL
   * @type {string}
   * @memberof DepartmentChannel
   */
  avatar_medium: string | null
  /**
   * Get the banner image URL
   * @type {string}
   * @memberof DepartmentChannel
   */
  banner?: string | null
  /**
   * Return true if user is a moderator for the channel
   * @type {boolean}
   * @memberof DepartmentChannel
   */
  is_moderator: boolean
  /**
   *
   * @type {Array<LearningPathPreview>}
   * @memberof DepartmentChannel
   */
  lists: Array<LearningPathPreview>
  /**
   * Get the URL for the channel
   * @type {string}
   * @memberof DepartmentChannel
   */
  channel_url: string
  /**
   *
   * @type {DepartmentChannelFeaturedList}
   * @memberof DepartmentChannel
   */
  featured_list: DepartmentChannelFeaturedList | null
  /**
   *
   * @type {Array<Subfield>}
   * @memberof DepartmentChannel
   */
  subfields: Array<Subfield>
  /**
   *
   * @type {DepartmentChannelTypeEnum}
   * @memberof DepartmentChannel
   */
  channel_type: DepartmentChannelTypeEnum
  /**
   *
   * @type {ChannelDepartmentDetail}
   * @memberof DepartmentChannel
   */
  department_detail: ChannelDepartmentDetail
  /**
   *
   * @type {string}
   * @memberof DepartmentChannel
   */
  created_on: string
  /**
   *
   * @type {string}
   * @memberof DepartmentChannel
   */
  updated_on: string
  /**
   *
   * @type {string}
   * @memberof DepartmentChannel
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof DepartmentChannel
   */
  title: string
  /**
   *
   * @type {any}
   * @memberof DepartmentChannel
   */
  about?: any | null
  /**
   *
   * @type {string}
   * @memberof DepartmentChannel
   */
  ga_tracking_id?: string
  /**
   *
   * @type {any}
   * @memberof DepartmentChannel
   */
  configuration?: any | null
  /**
   *
   * @type {string}
   * @memberof DepartmentChannel
   */
  search_filter?: string
  /**
   *
   * @type {string}
   * @memberof DepartmentChannel
   */
  public_description?: string
  /**
   *
   * @type {number}
   * @memberof DepartmentChannel
   */
  widget_list?: number | null
}

/**
 * Learning path featured in this field.
 * @export
 * @interface DepartmentChannelFeaturedList
 */
export interface DepartmentChannelFeaturedList {
  /**
   *
   * @type {string}
   * @memberof DepartmentChannelFeaturedList
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof DepartmentChannelFeaturedList
   */
  url?: string | null
  /**
   *
   * @type {number}
   * @memberof DepartmentChannelFeaturedList
   */
  id: number
}
/**
 * * `department` - Department
 * @export
 * @enum {string}
 */

export const DepartmentChannelTypeEnum = {
  Department: "department",
} as const

export type DepartmentChannelTypeEnum =
  (typeof DepartmentChannelTypeEnum)[keyof typeof DepartmentChannelTypeEnum]

/**
 * Serializer for News FeedItem
 * @export
 * @interface EventFeedItem
 */
export interface EventFeedItem {
  /**
   *
   * @type {number}
   * @memberof EventFeedItem
   */
  id: number
  /**
   *
   * @type {EventFeedItemFeedTypeEnum}
   * @memberof EventFeedItem
   */
  feed_type: EventFeedItemFeedTypeEnum
  /**
   *
   * @type {FeedImage}
   * @memberof EventFeedItem
   */
  image: FeedImage
  /**
   *
   * @type {FeedEventDetail}
   * @memberof EventFeedItem
   */
  event_details: FeedEventDetail
  /**
   *
   * @type {string}
   * @memberof EventFeedItem
   */
  guid: string
  /**
   *
   * @type {string}
   * @memberof EventFeedItem
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof EventFeedItem
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof EventFeedItem
   */
  summary?: string
  /**
   *
   * @type {string}
   * @memberof EventFeedItem
   */
  content?: string
  /**
   *
   * @type {number}
   * @memberof EventFeedItem
   */
  source: number
}

/**
 *
 * @export
 * @enum {string}
 */

export const EventFeedItemFeedTypeEnum = {
  Events: "events",
} as const

export type EventFeedItemFeedTypeEnum =
  (typeof EventFeedItemFeedTypeEnum)[keyof typeof EventFeedItemFeedTypeEnum]

/**
 * FeedEventDetail serializer
 * @export
 * @interface FeedEventDetail
 */
export interface FeedEventDetail {
  /**
   *
   * @type {number}
   * @memberof FeedEventDetail
   */
  id: number
  /**
   *
   * @type {Array<string>}
   * @memberof FeedEventDetail
   */
  audience: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof FeedEventDetail
   */
  location: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof FeedEventDetail
   */
  event_type: Array<string>
  /**
   *
   * @type {string}
   * @memberof FeedEventDetail
   */
  event_datetime: string
}
/**
 * Serializer for FeedImage
 * @export
 * @interface FeedImage
 */
export interface FeedImage {
  /**
   *
   * @type {number}
   * @memberof FeedImage
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof FeedImage
   */
  url?: string
  /**
   *
   * @type {string}
   * @memberof FeedImage
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof FeedImage
   */
  alt?: string
}
/**
 * @type FeedItem
 * @export
 */
export type FeedItem =
  | ({ resource_type: "events" } & EventFeedItem)
  | ({ resource_type: "news" } & NewsFeedItem)

/**
 * FeedNewsDetail serializer
 * @export
 * @interface FeedNewsDetail
 */
export interface FeedNewsDetail {
  /**
   *
   * @type {number}
   * @memberof FeedNewsDetail
   */
  id: number
  /**
   *
   * @type {Array<string>}
   * @memberof FeedNewsDetail
   */
  authors?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof FeedNewsDetail
   */
  topics?: Array<string>
  /**
   *
   * @type {string}
   * @memberof FeedNewsDetail
   */
  publish_date: string
}
/**
 * FeedSource serializer
 * @export
 * @interface FeedSource
 */
export interface FeedSource {
  /**
   *
   * @type {number}
   * @memberof FeedSource
   */
  id: number
  /**
   *
   * @type {FeedImage}
   * @memberof FeedSource
   */
  image: FeedImage
  /**
   *
   * @type {string}
   * @memberof FeedSource
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof FeedSource
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof FeedSource
   */
  description?: string
  /**
   *
   * @type {FeedSourceFeedTypeEnum}
   * @memberof FeedSource
   */
  feed_type: FeedSourceFeedTypeEnum
}

/**
 * * `news` - News * `events` - Events
 * @export
 * @enum {string}
 */

export const FeedSourceFeedTypeEnum = {
  News: "news",
  Events: "events",
} as const

export type FeedSourceFeedTypeEnum =
  (typeof FeedSourceFeedTypeEnum)[keyof typeof FeedSourceFeedTypeEnum]

/**
 * @type FieldChannel
 * @export
 */
export type FieldChannel =
  | ({ channel_type: "department" } & DepartmentChannel)
  | ({ channel_type: "offeror" } & OfferorChannel)
  | ({ channel_type: "pathway" } & PathwayChannel)
  | ({ channel_type: "topic" } & TopicChannel)

/**
 * Write serializer for FieldChannel. Uses primary keys for referenced objects during requests, and delegates to FieldChannelSerializer for responses.
 * @export
 * @interface FieldChannelCreateRequest
 */
export interface FieldChannelCreateRequest {
  /**
   *
   * @type {string}
   * @memberof FieldChannelCreateRequest
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof FieldChannelCreateRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof FieldChannelCreateRequest
   */
  public_description?: string
  /**
   *
   * @type {Array<string>}
   * @memberof FieldChannelCreateRequest
   */
  subfields?: Array<string>
  /**
   * Learning path featured in this field.
   * @type {number}
   * @memberof FieldChannelCreateRequest
   */
  featured_list?: number | null
  /**
   * Learning paths in this field.
   * @type {Array<number>}
   * @memberof FieldChannelCreateRequest
   */
  lists?: Array<number>
  /**
   *
   * @type {File}
   * @memberof FieldChannelCreateRequest
   */
  avatar?: File | null
  /**
   *
   * @type {File}
   * @memberof FieldChannelCreateRequest
   */
  banner?: File | null
  /**
   *
   * @type {any}
   * @memberof FieldChannelCreateRequest
   */
  about?: any | null
  /**
   *
   * @type {ChannelTypeEnum}
   * @memberof FieldChannelCreateRequest
   */
  channel_type: ChannelTypeEnum
  /**
   *
   * @type {string}
   * @memberof FieldChannelCreateRequest
   */
  search_filter?: string
  /**
   *
   * @type {any}
   * @memberof FieldChannelCreateRequest
   */
  configuration?: any | null
  /**
   *
   * @type {ChannelTopicDetailRequest}
   * @memberof FieldChannelCreateRequest
   */
  topic_detail?: ChannelTopicDetailRequest | null
  /**
   *
   * @type {ChannelDepartmentDetailRequest}
   * @memberof FieldChannelCreateRequest
   */
  department_detail?: ChannelDepartmentDetailRequest | null
  /**
   *
   * @type {ChannelOfferorDetailRequest}
   * @memberof FieldChannelCreateRequest
   */
  offeror_detail?: ChannelOfferorDetailRequest | null
}

/**
 * Serializer for moderators
 * @export
 * @interface FieldModerator
 */
export interface FieldModerator {
  /**
   * Returns the name for the moderator
   * @type {string}
   * @memberof FieldModerator
   */
  moderator_name?: string
  /**
   * Get the email from the associated user
   * @type {string}
   * @memberof FieldModerator
   */
  email?: string
  /**
   * Get the full name of the associated user
   * @type {string}
   * @memberof FieldModerator
   */
  full_name: string
}
/**
 * Serializer for moderators
 * @export
 * @interface FieldModeratorRequest
 */
export interface FieldModeratorRequest {
  /**
   * Returns the name for the moderator
   * @type {string}
   * @memberof FieldModeratorRequest
   */
  moderator_name?: string
  /**
   * Get the email from the associated user
   * @type {string}
   * @memberof FieldModeratorRequest
   */
  email?: string
}
/**
 * * `career-growth` - Career Growth * `supplemental-learning` - Supplemental Learning * `just-to-learn` - Just to Learn
 * @export
 * @enum {string}
 */

export const GoalsEnum = {
  CareerGrowth: "career-growth",
  SupplementalLearning: "supplemental-learning",
  JustToLearn: "just-to-learn",
} as const

export type GoalsEnum = (typeof GoalsEnum)[keyof typeof GoalsEnum]

/**
 * * `computer-science` - Computer Science * `business` - Business * `engineering` - Engineering * `leadership` - Leadership * `organized-behavior` - Organized Behavior * `management` - Management * `electrical-engineering` - Electrical Engineering * `information-technology` - Information Technology * `biology` - Biology * `earth-science` - Earth Science * `environmental-engineering` - Environmental Engineering * `health-and-medicine` - Health & Medicine * `probability-and-stats` - Probability & Stats * `economics` - Economics * `history` - History * `mathematics` - Mathematics * `mechanical-engineering` - Mechanical Engineering * `other` - Other
 * @export
 * @enum {string}
 */

export const InterestsEnum = {
  ComputerScience: "computer-science",
  Business: "business",
  Engineering: "engineering",
  Leadership: "leadership",
  OrganizedBehavior: "organized-behavior",
  Management: "management",
  ElectricalEngineering: "electrical-engineering",
  InformationTechnology: "information-technology",
  Biology: "biology",
  EarthScience: "earth-science",
  EnvironmentalEngineering: "environmental-engineering",
  HealthAndMedicine: "health-and-medicine",
  ProbabilityAndStats: "probability-and-stats",
  Economics: "economics",
  History: "history",
  Mathematics: "mathematics",
  MechanicalEngineering: "mechanical-engineering",
  Other: "other",
} as const

export type InterestsEnum = (typeof InterestsEnum)[keyof typeof InterestsEnum]

/**
 * Serializer for a minimal preview of Learning Paths
 * @export
 * @interface LearningPathPreview
 */
export interface LearningPathPreview {
  /**
   *
   * @type {string}
   * @memberof LearningPathPreview
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningPathPreview
   */
  url?: string | null
  /**
   *
   * @type {number}
   * @memberof LearningPathPreview
   */
  id: number
}
/**
 * Serializer for News FeedItem
 * @export
 * @interface NewsFeedItem
 */
export interface NewsFeedItem {
  /**
   *
   * @type {number}
   * @memberof NewsFeedItem
   */
  id: number
  /**
   *
   * @type {NewsFeedItemFeedTypeEnum}
   * @memberof NewsFeedItem
   */
  feed_type: NewsFeedItemFeedTypeEnum
  /**
   *
   * @type {FeedImage}
   * @memberof NewsFeedItem
   */
  image: FeedImage
  /**
   *
   * @type {FeedNewsDetail}
   * @memberof NewsFeedItem
   */
  news_details: FeedNewsDetail
  /**
   *
   * @type {string}
   * @memberof NewsFeedItem
   */
  guid: string
  /**
   *
   * @type {string}
   * @memberof NewsFeedItem
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof NewsFeedItem
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof NewsFeedItem
   */
  summary?: string
  /**
   *
   * @type {string}
   * @memberof NewsFeedItem
   */
  content?: string
  /**
   *
   * @type {number}
   * @memberof NewsFeedItem
   */
  source: number
}

/**
 *
 * @export
 * @enum {string}
 */

export const NewsFeedItemFeedTypeEnum = {
  News: "news",
} as const

export type NewsFeedItemFeedTypeEnum =
  (typeof NewsFeedItemFeedTypeEnum)[keyof typeof NewsFeedItemFeedTypeEnum]

/**
 * Serializer for Channel model of type offeror
 * @export
 * @interface OfferorChannel
 */
export interface OfferorChannel {
  /**
   *
   * @type {number}
   * @memberof OfferorChannel
   */
  id: number
  /**
   * Get the avatar image URL
   * @type {string}
   * @memberof OfferorChannel
   */
  avatar?: string | null
  /**
   * Get the avatar image small URL
   * @type {string}
   * @memberof OfferorChannel
   */
  avatar_small: string | null
  /**
   * Get the avatar image medium URL
   * @type {string}
   * @memberof OfferorChannel
   */
  avatar_medium: string | null
  /**
   * Get the banner image URL
   * @type {string}
   * @memberof OfferorChannel
   */
  banner?: string | null
  /**
   * Return true if user is a moderator for the channel
   * @type {boolean}
   * @memberof OfferorChannel
   */
  is_moderator: boolean
  /**
   *
   * @type {Array<LearningPathPreview>}
   * @memberof OfferorChannel
   */
  lists: Array<LearningPathPreview>
  /**
   * Get the URL for the channel
   * @type {string}
   * @memberof OfferorChannel
   */
  channel_url: string
  /**
   *
   * @type {DepartmentChannelFeaturedList}
   * @memberof OfferorChannel
   */
  featured_list: DepartmentChannelFeaturedList | null
  /**
   *
   * @type {Array<Subfield>}
   * @memberof OfferorChannel
   */
  subfields: Array<Subfield>
  /**
   *
   * @type {OfferorChannelTypeEnum}
   * @memberof OfferorChannel
   */
  channel_type: OfferorChannelTypeEnum
  /**
   *
   * @type {ChannelOfferorDetail}
   * @memberof OfferorChannel
   */
  offeror_detail: ChannelOfferorDetail
  /**
   *
   * @type {string}
   * @memberof OfferorChannel
   */
  created_on: string
  /**
   *
   * @type {string}
   * @memberof OfferorChannel
   */
  updated_on: string
  /**
   *
   * @type {string}
   * @memberof OfferorChannel
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof OfferorChannel
   */
  title: string
  /**
   *
   * @type {any}
   * @memberof OfferorChannel
   */
  about?: any | null
  /**
   *
   * @type {string}
   * @memberof OfferorChannel
   */
  ga_tracking_id?: string
  /**
   *
   * @type {any}
   * @memberof OfferorChannel
   */
  configuration?: any | null
  /**
   *
   * @type {string}
   * @memberof OfferorChannel
   */
  search_filter?: string
  /**
   *
   * @type {string}
   * @memberof OfferorChannel
   */
  public_description?: string
  /**
   *
   * @type {number}
   * @memberof OfferorChannel
   */
  widget_list?: number | null
}

/**
 * * `offeror` - Offeror
 * @export
 * @enum {string}
 */

export const OfferorChannelTypeEnum = {
  Offeror: "offeror",
} as const

export type OfferorChannelTypeEnum =
  (typeof OfferorChannelTypeEnum)[keyof typeof OfferorChannelTypeEnum]

/**
 *
 * @export
 * @interface PaginatedAttestationList
 */
export interface PaginatedAttestationList {
  /**
   *
   * @type {number}
   * @memberof PaginatedAttestationList
   */
  count: number
  /**
   *
   * @type {string}
   * @memberof PaginatedAttestationList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedAttestationList
   */
  previous?: string | null
  /**
   *
   * @type {Array<Attestation>}
   * @memberof PaginatedAttestationList
   */
  results: Array<Attestation>
}
/**
 *
 * @export
 * @interface PaginatedFeedItemList
 */
export interface PaginatedFeedItemList {
  /**
   *
   * @type {number}
   * @memberof PaginatedFeedItemList
   */
  count: number
  /**
   *
   * @type {string}
   * @memberof PaginatedFeedItemList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedFeedItemList
   */
  previous?: string | null
  /**
   *
   * @type {Array<FeedItem>}
   * @memberof PaginatedFeedItemList
   */
  results: Array<FeedItem>
}
/**
 *
 * @export
 * @interface PaginatedFeedSourceList
 */
export interface PaginatedFeedSourceList {
  /**
   *
   * @type {number}
   * @memberof PaginatedFeedSourceList
   */
  count: number
  /**
   *
   * @type {string}
   * @memberof PaginatedFeedSourceList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedFeedSourceList
   */
  previous?: string | null
  /**
   *
   * @type {Array<FeedSource>}
   * @memberof PaginatedFeedSourceList
   */
  results: Array<FeedSource>
}
/**
 *
 * @export
 * @interface PaginatedFieldChannelList
 */
export interface PaginatedFieldChannelList {
  /**
   *
   * @type {number}
   * @memberof PaginatedFieldChannelList
   */
  count: number
  /**
   *
   * @type {string}
   * @memberof PaginatedFieldChannelList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedFieldChannelList
   */
  previous?: string | null
  /**
   *
   * @type {Array<FieldChannel>}
   * @memberof PaginatedFieldChannelList
   */
  results: Array<FieldChannel>
}
/**
 * Similar to FieldChannelCreateSerializer, with read-only name
 * @export
 * @interface PatchedFieldChannelWriteRequest
 */
export interface PatchedFieldChannelWriteRequest {
  /**
   *
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  public_description?: string
  /**
   *
   * @type {Array<string>}
   * @memberof PatchedFieldChannelWriteRequest
   */
  subfields?: Array<string>
  /**
   * Learning path featured in this field.
   * @type {number}
   * @memberof PatchedFieldChannelWriteRequest
   */
  featured_list?: number | null
  /**
   * Learning paths in this field.
   * @type {Array<number>}
   * @memberof PatchedFieldChannelWriteRequest
   */
  lists?: Array<number>
  /**
   * Get the avatar image URL
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  avatar?: string | null
  /**
   * Get the banner image URL
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  banner?: string | null
  /**
   *
   * @type {any}
   * @memberof PatchedFieldChannelWriteRequest
   */
  about?: any | null
  /**
   *
   * @type {ChannelTypeEnum}
   * @memberof PatchedFieldChannelWriteRequest
   */
  channel_type?: ChannelTypeEnum
  /**
   *
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  search_filter?: string
  /**
   *
   * @type {any}
   * @memberof PatchedFieldChannelWriteRequest
   */
  configuration?: any | null
  /**
   *
   * @type {ChannelTopicDetailRequest}
   * @memberof PatchedFieldChannelWriteRequest
   */
  topic_detail?: ChannelTopicDetailRequest | null
  /**
   *
   * @type {ChannelDepartmentDetailRequest}
   * @memberof PatchedFieldChannelWriteRequest
   */
  department_detail?: ChannelDepartmentDetailRequest | null
  /**
   *
   * @type {ChannelOfferorDetailRequest}
   * @memberof PatchedFieldChannelWriteRequest
   */
  offeror_detail?: ChannelOfferorDetailRequest | null
}

/**
 * Serializer for Profile
 * @export
 * @interface PatchedProfileRequest
 */
export interface PatchedProfileRequest {
  /**
   *
   * @type {string}
   * @memberof PatchedProfileRequest
   */
  name?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedProfileRequest
   */
  image?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedProfileRequest
   */
  image_small?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedProfileRequest
   */
  image_medium?: string | null
  /**
   *
   * @type {boolean}
   * @memberof PatchedProfileRequest
   */
  email_optin?: boolean
  /**
   *
   * @type {boolean}
   * @memberof PatchedProfileRequest
   */
  toc_optin?: boolean
  /**
   *
   * @type {string}
   * @memberof PatchedProfileRequest
   */
  bio?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedProfileRequest
   */
  headline?: string | null
  /**
   *
   * @type {any}
   * @memberof PatchedProfileRequest
   */
  location?: any | null
  /**
   *
   * @type {Array<InterestsEnum>}
   * @memberof PatchedProfileRequest
   */
  interests?: Array<InterestsEnum>
  /**
   *
   * @type {Array<GoalsEnum>}
   * @memberof PatchedProfileRequest
   */
  goals?: Array<GoalsEnum>
  /**
   *
   * @type {PatchedProfileRequestCurrentEducation}
   * @memberof PatchedProfileRequest
   */
  current_education?: PatchedProfileRequestCurrentEducation
  /**
   *
   * @type {PatchedProfileRequestCertificateDesired}
   * @memberof PatchedProfileRequest
   */
  certificate_desired?: PatchedProfileRequestCertificateDesired
  /**
   *
   * @type {PatchedProfileRequestTimeCommitment}
   * @memberof PatchedProfileRequest
   */
  time_commitment?: PatchedProfileRequestTimeCommitment
  /**
   *
   * @type {PatchedProfileRequestCourseFormat}
   * @memberof PatchedProfileRequest
   */
  course_format?: PatchedProfileRequestCourseFormat
}
/**
 * @type PatchedProfileRequestCertificateDesired
 * @export
 */
export type PatchedProfileRequestCertificateDesired =
  | BlankEnum
  | CertificateDesiredEnum

/**
 * @type PatchedProfileRequestCourseFormat
 * @export
 */
export type PatchedProfileRequestCourseFormat = BlankEnum | CourseFormatEnum

/**
 * @type PatchedProfileRequestCurrentEducation
 * @export
 */
export type PatchedProfileRequestCurrentEducation =
  | BlankEnum
  | CurrentEducationEnum

/**
 * @type PatchedProfileRequestTimeCommitment
 * @export
 */
export type PatchedProfileRequestTimeCommitment = BlankEnum | TimeCommitmentEnum

/**
 * Serializer for User
 * @export
 * @interface PatchedUserRequest
 */
export interface PatchedUserRequest {
  /**
   *
   * @type {ProfileRequest}
   * @memberof PatchedUserRequest
   */
  profile?: ProfileRequest
  /**
   *
   * @type {string}
   * @memberof PatchedUserRequest
   */
  email?: string
}
/**
 * Serializer for WidgetLists
 * @export
 * @interface PatchedWidgetListRequest
 */
export interface PatchedWidgetListRequest {
  /**
   *
   * @type {Array<WidgetInstance>}
   * @memberof PatchedWidgetListRequest
   */
  widgets?: Array<WidgetInstance> | null
}
/**
 * Serializer for Channel model of type pathway
 * @export
 * @interface PathwayChannel
 */
export interface PathwayChannel {
  /**
   *
   * @type {number}
   * @memberof PathwayChannel
   */
  id: number
  /**
   * Get the avatar image URL
   * @type {string}
   * @memberof PathwayChannel
   */
  avatar?: string | null
  /**
   * Get the avatar image small URL
   * @type {string}
   * @memberof PathwayChannel
   */
  avatar_small: string | null
  /**
   * Get the avatar image medium URL
   * @type {string}
   * @memberof PathwayChannel
   */
  avatar_medium: string | null
  /**
   * Get the banner image URL
   * @type {string}
   * @memberof PathwayChannel
   */
  banner?: string | null
  /**
   * Return true if user is a moderator for the channel
   * @type {boolean}
   * @memberof PathwayChannel
   */
  is_moderator: boolean
  /**
   *
   * @type {Array<LearningPathPreview>}
   * @memberof PathwayChannel
   */
  lists: Array<LearningPathPreview>
  /**
   * Get the URL for the channel
   * @type {string}
   * @memberof PathwayChannel
   */
  channel_url: string
  /**
   *
   * @type {DepartmentChannelFeaturedList}
   * @memberof PathwayChannel
   */
  featured_list: DepartmentChannelFeaturedList | null
  /**
   *
   * @type {Array<Subfield>}
   * @memberof PathwayChannel
   */
  subfields: Array<Subfield>
  /**
   *
   * @type {PathwayChannelTypeEnum}
   * @memberof PathwayChannel
   */
  channel_type: PathwayChannelTypeEnum
  /**
   *
   * @type {string}
   * @memberof PathwayChannel
   */
  created_on: string
  /**
   *
   * @type {string}
   * @memberof PathwayChannel
   */
  updated_on: string
  /**
   *
   * @type {string}
   * @memberof PathwayChannel
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof PathwayChannel
   */
  title: string
  /**
   *
   * @type {any}
   * @memberof PathwayChannel
   */
  about?: any | null
  /**
   *
   * @type {string}
   * @memberof PathwayChannel
   */
  ga_tracking_id?: string
  /**
   *
   * @type {any}
   * @memberof PathwayChannel
   */
  configuration?: any | null
  /**
   *
   * @type {string}
   * @memberof PathwayChannel
   */
  search_filter?: string
  /**
   *
   * @type {string}
   * @memberof PathwayChannel
   */
  public_description?: string
  /**
   *
   * @type {number}
   * @memberof PathwayChannel
   */
  widget_list?: number | null
}

/**
 * * `pathway` - Pathway
 * @export
 * @enum {string}
 */

export const PathwayChannelTypeEnum = {
  Pathway: "pathway",
} as const

export type PathwayChannelTypeEnum =
  (typeof PathwayChannelTypeEnum)[keyof typeof PathwayChannelTypeEnum]

/**
 * Serializer for Profile
 * @export
 * @interface Profile
 */
export interface Profile {
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  name?: string | null
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  image?: string | null
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  image_small?: string | null
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  image_medium?: string | null
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  image_file: string | null
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  image_small_file: string | null
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  image_medium_file: string | null
  /**
   * Custom getter for small profile image
   * @type {string}
   * @memberof Profile
   */
  profile_image_small: string
  /**
   * Custom getter for medium profile image
   * @type {string}
   * @memberof Profile
   */
  profile_image_medium: string
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  bio?: string | null
  /**
   *
   * @type {string}
   * @memberof Profile
   */
  headline?: string | null
  /**
   * Custom getter for the username
   * @type {string}
   * @memberof Profile
   */
  username: string
  /**
   * Custom getter for location text
   * @type {string}
   * @memberof Profile
   */
  placename: string
  /**
   *
   * @type {Array<InterestsEnum>}
   * @memberof Profile
   */
  interests?: Array<InterestsEnum>
  /**
   *
   * @type {Array<GoalsEnum>}
   * @memberof Profile
   */
  goals?: Array<GoalsEnum>
  /**
   *
   * @type {PatchedProfileRequestCurrentEducation}
   * @memberof Profile
   */
  current_education?: PatchedProfileRequestCurrentEducation
  /**
   *
   * @type {PatchedProfileRequestCertificateDesired}
   * @memberof Profile
   */
  certificate_desired?: PatchedProfileRequestCertificateDesired
  /**
   *
   * @type {PatchedProfileRequestTimeCommitment}
   * @memberof Profile
   */
  time_commitment?: PatchedProfileRequestTimeCommitment
  /**
   *
   * @type {PatchedProfileRequestCourseFormat}
   * @memberof Profile
   */
  course_format?: PatchedProfileRequestCourseFormat
}
/**
 * Serializer for Profile
 * @export
 * @interface ProfileRequest
 */
export interface ProfileRequest {
  /**
   *
   * @type {string}
   * @memberof ProfileRequest
   */
  name?: string | null
  /**
   *
   * @type {string}
   * @memberof ProfileRequest
   */
  image?: string | null
  /**
   *
   * @type {string}
   * @memberof ProfileRequest
   */
  image_small?: string | null
  /**
   *
   * @type {string}
   * @memberof ProfileRequest
   */
  image_medium?: string | null
  /**
   *
   * @type {boolean}
   * @memberof ProfileRequest
   */
  email_optin?: boolean
  /**
   *
   * @type {boolean}
   * @memberof ProfileRequest
   */
  toc_optin?: boolean
  /**
   *
   * @type {string}
   * @memberof ProfileRequest
   */
  bio?: string | null
  /**
   *
   * @type {string}
   * @memberof ProfileRequest
   */
  headline?: string | null
  /**
   *
   * @type {any}
   * @memberof ProfileRequest
   */
  location?: any | null
  /**
   *
   * @type {Array<InterestsEnum>}
   * @memberof ProfileRequest
   */
  interests?: Array<InterestsEnum>
  /**
   *
   * @type {Array<GoalsEnum>}
   * @memberof ProfileRequest
   */
  goals?: Array<GoalsEnum>
  /**
   *
   * @type {PatchedProfileRequestCurrentEducation}
   * @memberof ProfileRequest
   */
  current_education?: PatchedProfileRequestCurrentEducation
  /**
   *
   * @type {PatchedProfileRequestCertificateDesired}
   * @memberof ProfileRequest
   */
  certificate_desired?: PatchedProfileRequestCertificateDesired
  /**
   *
   * @type {PatchedProfileRequestTimeCommitment}
   * @memberof ProfileRequest
   */
  time_commitment?: PatchedProfileRequestTimeCommitment
  /**
   *
   * @type {PatchedProfileRequestCourseFormat}
   * @memberof ProfileRequest
   */
  course_format?: PatchedProfileRequestCourseFormat
}
/**
 * Serializer for Program Certificates
 * @export
 * @interface ProgramCertificate
 */
export interface ProgramCertificate {
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  record_hash: string
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  program_letter_generate_url: string
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  program_letter_share_url: string
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  program_title: string
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_full_name?: string
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_email: string
  /**
   *
   * @type {number}
   * @memberof ProgramCertificate
   */
  user_edxorg_id?: number | null
  /**
   *
   * @type {number}
   * @memberof ProgramCertificate
   */
  micromasters_program_id?: number | null
  /**
   *
   * @type {number}
   * @memberof ProgramCertificate
   */
  mitxonline_program_id?: number | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_edxorg_username?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_gender?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_address_city?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_first_name?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_last_name?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_year_of_birth?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_country?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_address_postal_code?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_street_address?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_address_state_or_territory?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  user_mitxonline_username?: string | null
  /**
   *
   * @type {string}
   * @memberof ProgramCertificate
   */
  program_completion_timestamp?: string | null
}
/**
 * * `news` - news * `events` - events
 * @export
 * @enum {string}
 */

export const ResourceTypeEnum = {
  News: "news",
  Events: "events",
} as const

export type ResourceTypeEnum =
  (typeof ResourceTypeEnum)[keyof typeof ResourceTypeEnum]

/**
 * * `facebook` - facebook * `linkedin` - linkedin * `personal` - personal * `twitter` - twitter
 * @export
 * @enum {string}
 */

export const SiteTypeEnum = {
  Facebook: "facebook",
  Linkedin: "linkedin",
  Personal: "personal",
  Twitter: "twitter",
} as const

export type SiteTypeEnum = (typeof SiteTypeEnum)[keyof typeof SiteTypeEnum]

/**
 * Serializer for Subfields
 * @export
 * @interface Subfield
 */
export interface Subfield {
  /**
   *
   * @type {string}
   * @memberof Subfield
   */
  parent_field: string
  /**
   *
   * @type {string}
   * @memberof Subfield
   */
  field_channel: string
  /**
   *
   * @type {number}
   * @memberof Subfield
   */
  position?: number
}
/**
 * * `0-to-5-hours` - <5 hours/week * `5-to-10-hours` - 5-10 hours/week * `10-to-20-hours` - 10-20 hours/week * `20-to-30-hours` - 20-30 hours/week * `30-plus-hours` - 30+ hours/week
 * @export
 * @enum {string}
 */

export const TimeCommitmentEnum = {
  _0To5Hours: "0-to-5-hours",
  _5To10Hours: "5-to-10-hours",
  _10To20Hours: "10-to-20-hours",
  _20To30Hours: "20-to-30-hours",
  _30PlusHours: "30-plus-hours",
} as const

export type TimeCommitmentEnum =
  (typeof TimeCommitmentEnum)[keyof typeof TimeCommitmentEnum]

/**
 * Serializer for Channel model of type topic
 * @export
 * @interface TopicChannel
 */
export interface TopicChannel {
  /**
   *
   * @type {number}
   * @memberof TopicChannel
   */
  id: number
  /**
   * Get the avatar image URL
   * @type {string}
   * @memberof TopicChannel
   */
  avatar?: string | null
  /**
   * Get the avatar image small URL
   * @type {string}
   * @memberof TopicChannel
   */
  avatar_small: string | null
  /**
   * Get the avatar image medium URL
   * @type {string}
   * @memberof TopicChannel
   */
  avatar_medium: string | null
  /**
   * Get the banner image URL
   * @type {string}
   * @memberof TopicChannel
   */
  banner?: string | null
  /**
   * Return true if user is a moderator for the channel
   * @type {boolean}
   * @memberof TopicChannel
   */
  is_moderator: boolean
  /**
   *
   * @type {Array<LearningPathPreview>}
   * @memberof TopicChannel
   */
  lists: Array<LearningPathPreview>
  /**
   * Get the URL for the channel
   * @type {string}
   * @memberof TopicChannel
   */
  channel_url: string
  /**
   *
   * @type {DepartmentChannelFeaturedList}
   * @memberof TopicChannel
   */
  featured_list: DepartmentChannelFeaturedList | null
  /**
   *
   * @type {Array<Subfield>}
   * @memberof TopicChannel
   */
  subfields: Array<Subfield>
  /**
   *
   * @type {TopicChannelTypeEnum}
   * @memberof TopicChannel
   */
  channel_type: TopicChannelTypeEnum
  /**
   *
   * @type {ChannelTopicDetail}
   * @memberof TopicChannel
   */
  topic_detail: ChannelTopicDetail
  /**
   *
   * @type {string}
   * @memberof TopicChannel
   */
  created_on: string
  /**
   *
   * @type {string}
   * @memberof TopicChannel
   */
  updated_on: string
  /**
   *
   * @type {string}
   * @memberof TopicChannel
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof TopicChannel
   */
  title: string
  /**
   *
   * @type {any}
   * @memberof TopicChannel
   */
  about?: any | null
  /**
   *
   * @type {string}
   * @memberof TopicChannel
   */
  ga_tracking_id?: string
  /**
   *
   * @type {any}
   * @memberof TopicChannel
   */
  configuration?: any | null
  /**
   *
   * @type {string}
   * @memberof TopicChannel
   */
  search_filter?: string
  /**
   *
   * @type {string}
   * @memberof TopicChannel
   */
  public_description?: string
  /**
   *
   * @type {number}
   * @memberof TopicChannel
   */
  widget_list?: number | null
}

/**
 * * `topic` - Topic
 * @export
 * @enum {string}
 */

export const TopicChannelTypeEnum = {
  Topic: "topic",
} as const

export type TopicChannelTypeEnum =
  (typeof TopicChannelTypeEnum)[keyof typeof TopicChannelTypeEnum]

/**
 * Serializer for User
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  username: string
  /**
   *
   * @type {Profile}
   * @memberof User
   */
  profile: Profile
  /**
   *
   * @type {string}
   * @memberof User
   */
  first_name: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  last_name: string
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_article_editor: boolean
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_learning_path_editor: boolean
}
/**
 * Serializer for User
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
  /**
   *
   * @type {ProfileRequest}
   * @memberof UserRequest
   */
  profile: ProfileRequest
  /**
   *
   * @type {string}
   * @memberof UserRequest
   */
  email: string
}
/**
 * Serializer for UserWebsite
 * @export
 * @interface UserWebsite
 */
export interface UserWebsite {
  /**
   *
   * @type {number}
   * @memberof UserWebsite
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof UserWebsite
   */
  profile: number
  /**
   *
   * @type {string}
   * @memberof UserWebsite
   */
  url: string
  /**
   *
   * @type {SiteTypeEnum}
   * @memberof UserWebsite
   */
  site_type: SiteTypeEnum
}

/**
 * Serializer for UserWebsite
 * @export
 * @interface UserWebsiteRequest
 */
export interface UserWebsiteRequest {
  /**
   *
   * @type {number}
   * @memberof UserWebsiteRequest
   */
  profile: number
  /**
   *
   * @type {string}
   * @memberof UserWebsiteRequest
   */
  url: string
}
/**
 * WidgetInstance serializer
 * @export
 * @interface WidgetInstance
 */
export interface WidgetInstance {
  /**
   *
   * @type {number}
   * @memberof WidgetInstance
   */
  id: number
  /**
   *
   * @type {WidgetTypeEnum}
   * @memberof WidgetInstance
   */
  widget_type: WidgetTypeEnum
  /**
   *
   * @type {string}
   * @memberof WidgetInstance
   */
  title: string
  /**
   * Returns the configuration to serialize
   * @type {{ [key: string]: any; }}
   * @memberof WidgetInstance
   */
  configuration?: { [key: string]: any }
  /**
   * Renders the widget to json based on configuration
   * @type {{ [key: string]: any; }}
   * @memberof WidgetInstance
   */
  json: { [key: string]: any } | null
}

/**
 * Serializer for WidgetLists
 * @export
 * @interface WidgetList
 */
export interface WidgetList {
  /**
   *
   * @type {number}
   * @memberof WidgetList
   */
  id: number
  /**
   *
   * @type {Array<WidgetInstance>}
   * @memberof WidgetList
   */
  widgets?: Array<WidgetInstance> | null
  /**
   *
   * @type {Array<WidgetListAvailableWidgetsInner>}
   * @memberof WidgetList
   */
  available_widgets: Array<WidgetListAvailableWidgetsInner>
}
/**
 *
 * @export
 * @interface WidgetListAvailableWidgetsInner
 */
export interface WidgetListAvailableWidgetsInner {
  /**
   *
   * @type {string}
   * @memberof WidgetListAvailableWidgetsInner
   */
  widget_type?: string
  /**
   *
   * @type {string}
   * @memberof WidgetListAvailableWidgetsInner
   */
  description?: string
  /**
   *
   * @type {object}
   * @memberof WidgetListAvailableWidgetsInner
   */
  form_spec?: object
}
/**
 * Serializer for WidgetLists
 * @export
 * @interface WidgetListRequest
 */
export interface WidgetListRequest {
  /**
   *
   * @type {Array<WidgetInstance>}
   * @memberof WidgetListRequest
   */
  widgets?: Array<WidgetInstance> | null
}
/**
 * * `Markdown` - Markdown * `URL` - URL * `RSS Feed` - RSS Feed * `People` - People
 * @export
 * @enum {string}
 */

export const WidgetTypeEnum = {
  Markdown: "Markdown",
  Url: "URL",
  RssFeed: "RSS Feed",
  People: "People",
} as const

export type WidgetTypeEnum =
  (typeof WidgetTypeEnum)[keyof typeof WidgetTypeEnum]

/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export const ChannelsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Create
     * @param {FieldChannelCreateRequest} FieldChannelCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsCreate: async (
      FieldChannelCreateRequest: FieldChannelCreateRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'FieldChannelCreateRequest' is not null or undefined
      assertParamExists(
        "channelsCreate",
        "FieldChannelCreateRequest",
        FieldChannelCreateRequest,
      )
      const localVarPath = `/api/v0/channels/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        FieldChannelCreateRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Destroy
     * @param {number} id A unique integer value identifying this field channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsDestroy: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("channelsDestroy", "id", id)
      const localVarPath = `/api/v0/channels/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary List
     * @param {ChannelsListChannelTypeEnum} [channel_type] * &#x60;topic&#x60; - Topic * &#x60;department&#x60; - Department * &#x60;offeror&#x60; - Offeror * &#x60;pathway&#x60; - Pathway
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsList: async (
      channel_type?: ChannelsListChannelTypeEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/channels/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (channel_type !== undefined) {
        localVarQueryParameter["channel_type"] = channel_type
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for listing and adding moderators
     * @summary Field Moderators Create
     * @param {string} id
     * @param {FieldModeratorRequest} [FieldModeratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsModeratorsCreate: async (
      id: string,
      FieldModeratorRequest?: FieldModeratorRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("channelsModeratorsCreate", "id", id)
      const localVarPath = `/api/v0/channels/{id}/moderators/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        FieldModeratorRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Remove the user from the moderator groups for this website
     * @summary Field Moderators Destroy
     * @param {string} id
     * @param {string} moderator_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsModeratorsDestroy: async (
      id: string,
      moderator_name: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("channelsModeratorsDestroy", "id", id)
      // verify required parameter 'moderator_name' is not null or undefined
      assertParamExists(
        "channelsModeratorsDestroy",
        "moderator_name",
        moderator_name,
      )
      const localVarPath = `/api/v0/channels/{id}/moderators/{moderator_name}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(
          `{${"moderator_name"}}`,
          encodeURIComponent(String(moderator_name)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for listing and adding moderators
     * @summary Field Moderators List
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsModeratorsList: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("channelsModeratorsList", "id", id)
      const localVarPath = `/api/v0/channels/{id}/moderators/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Update
     * @param {number} id A unique integer value identifying this field channel.
     * @param {PatchedFieldChannelWriteRequest} [PatchedFieldChannelWriteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsPartialUpdate: async (
      id: number,
      PatchedFieldChannelWriteRequest?: PatchedFieldChannelWriteRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("channelsPartialUpdate", "id", id)
      const localVarPath = `/api/v0/channels/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedFieldChannelWriteRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this field channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsRetrieve: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("channelsRetrieve", "id", id)
      const localVarPath = `/api/v0/channels/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for retrieving an individual field channel by type and name
     * @summary FieldChannel Detail Lookup by channel type and name
     * @param {string} channel_type
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsTypeRetrieve: async (
      channel_type: string,
      name: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channel_type' is not null or undefined
      assertParamExists("channelsTypeRetrieve", "channel_type", channel_type)
      // verify required parameter 'name' is not null or undefined
      assertParamExists("channelsTypeRetrieve", "name", name)
      const localVarPath = `/api/v0/channels/type/{channel_type}/{name}/`
        .replace(
          `{${"channel_type"}}`,
          encodeURIComponent(String(channel_type)),
        )
        .replace(`{${"name"}}`, encodeURIComponent(String(name)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ChannelsApi - functional programming interface
 * @export
 */
export const ChannelsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChannelsApiAxiosParamCreator(configuration)
  return {
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Create
     * @param {FieldChannelCreateRequest} FieldChannelCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsCreate(
      FieldChannelCreateRequest: FieldChannelCreateRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldChannel>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.channelsCreate(
        FieldChannelCreateRequest,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Destroy
     * @param {number} id A unique integer value identifying this field channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsDestroy(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.channelsDestroy(
        id,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsDestroy"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary List
     * @param {ChannelsListChannelTypeEnum} [channel_type] * &#x60;topic&#x60; - Topic * &#x60;department&#x60; - Department * &#x60;offeror&#x60; - Offeror * &#x60;pathway&#x60; - Pathway
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsList(
      channel_type?: ChannelsListChannelTypeEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedFieldChannelList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.channelsList(
        channel_type,
        limit,
        offset,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for listing and adding moderators
     * @summary Field Moderators Create
     * @param {string} id
     * @param {FieldModeratorRequest} [FieldModeratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsModeratorsCreate(
      id: string,
      FieldModeratorRequest?: FieldModeratorRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldModerator>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.channelsModeratorsCreate(
          id,
          FieldModeratorRequest,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsModeratorsCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * Remove the user from the moderator groups for this website
     * @summary Field Moderators Destroy
     * @param {string} id
     * @param {string} moderator_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsModeratorsDestroy(
      id: string,
      moderator_name: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.channelsModeratorsDestroy(
          id,
          moderator_name,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsModeratorsDestroy"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for listing and adding moderators
     * @summary Field Moderators List
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsModeratorsList(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<FieldModerator>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.channelsModeratorsList(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsModeratorsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Update
     * @param {number} id A unique integer value identifying this field channel.
     * @param {PatchedFieldChannelWriteRequest} [PatchedFieldChannelWriteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsPartialUpdate(
      id: number,
      PatchedFieldChannelWriteRequest?: PatchedFieldChannelWriteRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldChannel>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.channelsPartialUpdate(
          id,
          PatchedFieldChannelWriteRequest,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsPartialUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this field channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsRetrieve(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldChannel>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.channelsRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for retrieving an individual field channel by type and name
     * @summary FieldChannel Detail Lookup by channel type and name
     * @param {string} channel_type
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelsTypeRetrieve(
      channel_type: string,
      name: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldChannel>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.channelsTypeRetrieve(
          channel_type,
          name,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.channelsTypeRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * ChannelsApi - factory interface
 * @export
 */
export const ChannelsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ChannelsApiFp(configuration)
  return {
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Create
     * @param {ChannelsApiChannelsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsCreate(
      requestParameters: ChannelsApiChannelsCreateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FieldChannel> {
      return localVarFp
        .channelsCreate(requestParameters.FieldChannelCreateRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Destroy
     * @param {ChannelsApiChannelsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsDestroy(
      requestParameters: ChannelsApiChannelsDestroyRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .channelsDestroy(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary List
     * @param {ChannelsApiChannelsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsList(
      requestParameters: ChannelsApiChannelsListRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedFieldChannelList> {
      return localVarFp
        .channelsList(
          requestParameters.channel_type,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * View for listing and adding moderators
     * @summary Field Moderators Create
     * @param {ChannelsApiChannelsModeratorsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsModeratorsCreate(
      requestParameters: ChannelsApiChannelsModeratorsCreateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FieldModerator> {
      return localVarFp
        .channelsModeratorsCreate(
          requestParameters.id,
          requestParameters.FieldModeratorRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Remove the user from the moderator groups for this website
     * @summary Field Moderators Destroy
     * @param {ChannelsApiChannelsModeratorsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsModeratorsDestroy(
      requestParameters: ChannelsApiChannelsModeratorsDestroyRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .channelsModeratorsDestroy(
          requestParameters.id,
          requestParameters.moderator_name,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * View for listing and adding moderators
     * @summary Field Moderators List
     * @param {ChannelsApiChannelsModeratorsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsModeratorsList(
      requestParameters: ChannelsApiChannelsModeratorsListRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<FieldModerator>> {
      return localVarFp
        .channelsModeratorsList(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Update
     * @param {ChannelsApiChannelsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsPartialUpdate(
      requestParameters: ChannelsApiChannelsPartialUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FieldChannel> {
      return localVarFp
        .channelsPartialUpdate(
          requestParameters.id,
          requestParameters.PatchedFieldChannelWriteRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
     * @summary Retrieve
     * @param {ChannelsApiChannelsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsRetrieve(
      requestParameters: ChannelsApiChannelsRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FieldChannel> {
      return localVarFp
        .channelsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * View for retrieving an individual field channel by type and name
     * @summary FieldChannel Detail Lookup by channel type and name
     * @param {ChannelsApiChannelsTypeRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsTypeRetrieve(
      requestParameters: ChannelsApiChannelsTypeRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FieldChannel> {
      return localVarFp
        .channelsTypeRetrieve(
          requestParameters.channel_type,
          requestParameters.name,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for channelsCreate operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsCreateRequest
 */
export interface ChannelsApiChannelsCreateRequest {
  /**
   *
   * @type {FieldChannelCreateRequest}
   * @memberof ChannelsApiChannelsCreate
   */
  readonly FieldChannelCreateRequest: FieldChannelCreateRequest
}

/**
 * Request parameters for channelsDestroy operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsDestroyRequest
 */
export interface ChannelsApiChannelsDestroyRequest {
  /**
   * A unique integer value identifying this field channel.
   * @type {number}
   * @memberof ChannelsApiChannelsDestroy
   */
  readonly id: number
}

/**
 * Request parameters for channelsList operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsListRequest
 */
export interface ChannelsApiChannelsListRequest {
  /**
   * * &#x60;topic&#x60; - Topic * &#x60;department&#x60; - Department * &#x60;offeror&#x60; - Offeror * &#x60;pathway&#x60; - Pathway
   * @type {'department' | 'offeror' | 'pathway' | 'topic'}
   * @memberof ChannelsApiChannelsList
   */
  readonly channel_type?: ChannelsListChannelTypeEnum

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ChannelsApiChannelsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ChannelsApiChannelsList
   */
  readonly offset?: number
}

/**
 * Request parameters for channelsModeratorsCreate operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsModeratorsCreateRequest
 */
export interface ChannelsApiChannelsModeratorsCreateRequest {
  /**
   *
   * @type {string}
   * @memberof ChannelsApiChannelsModeratorsCreate
   */
  readonly id: string

  /**
   *
   * @type {FieldModeratorRequest}
   * @memberof ChannelsApiChannelsModeratorsCreate
   */
  readonly FieldModeratorRequest?: FieldModeratorRequest
}

/**
 * Request parameters for channelsModeratorsDestroy operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsModeratorsDestroyRequest
 */
export interface ChannelsApiChannelsModeratorsDestroyRequest {
  /**
   *
   * @type {string}
   * @memberof ChannelsApiChannelsModeratorsDestroy
   */
  readonly id: string

  /**
   *
   * @type {string}
   * @memberof ChannelsApiChannelsModeratorsDestroy
   */
  readonly moderator_name: string
}

/**
 * Request parameters for channelsModeratorsList operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsModeratorsListRequest
 */
export interface ChannelsApiChannelsModeratorsListRequest {
  /**
   *
   * @type {string}
   * @memberof ChannelsApiChannelsModeratorsList
   */
  readonly id: string
}

/**
 * Request parameters for channelsPartialUpdate operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsPartialUpdateRequest
 */
export interface ChannelsApiChannelsPartialUpdateRequest {
  /**
   * A unique integer value identifying this field channel.
   * @type {number}
   * @memberof ChannelsApiChannelsPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {PatchedFieldChannelWriteRequest}
   * @memberof ChannelsApiChannelsPartialUpdate
   */
  readonly PatchedFieldChannelWriteRequest?: PatchedFieldChannelWriteRequest
}

/**
 * Request parameters for channelsRetrieve operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsRetrieveRequest
 */
export interface ChannelsApiChannelsRetrieveRequest {
  /**
   * A unique integer value identifying this field channel.
   * @type {number}
   * @memberof ChannelsApiChannelsRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for channelsTypeRetrieve operation in ChannelsApi.
 * @export
 * @interface ChannelsApiChannelsTypeRetrieveRequest
 */
export interface ChannelsApiChannelsTypeRetrieveRequest {
  /**
   *
   * @type {string}
   * @memberof ChannelsApiChannelsTypeRetrieve
   */
  readonly channel_type: string

  /**
   *
   * @type {string}
   * @memberof ChannelsApiChannelsTypeRetrieve
   */
  readonly name: string
}

/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export class ChannelsApi extends BaseAPI {
  /**
   * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
   * @summary Create
   * @param {ChannelsApiChannelsCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsCreate(
    requestParameters: ChannelsApiChannelsCreateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsCreate(requestParameters.FieldChannelCreateRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
   * @summary Destroy
   * @param {ChannelsApiChannelsDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsDestroy(
    requestParameters: ChannelsApiChannelsDestroyRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsDestroy(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
   * @summary List
   * @param {ChannelsApiChannelsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsList(
    requestParameters: ChannelsApiChannelsListRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsList(
        requestParameters.channel_type,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for listing and adding moderators
   * @summary Field Moderators Create
   * @param {ChannelsApiChannelsModeratorsCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsModeratorsCreate(
    requestParameters: ChannelsApiChannelsModeratorsCreateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsModeratorsCreate(
        requestParameters.id,
        requestParameters.FieldModeratorRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Remove the user from the moderator groups for this website
   * @summary Field Moderators Destroy
   * @param {ChannelsApiChannelsModeratorsDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsModeratorsDestroy(
    requestParameters: ChannelsApiChannelsModeratorsDestroyRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsModeratorsDestroy(
        requestParameters.id,
        requestParameters.moderator_name,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for listing and adding moderators
   * @summary Field Moderators List
   * @param {ChannelsApiChannelsModeratorsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsModeratorsList(
    requestParameters: ChannelsApiChannelsModeratorsListRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsModeratorsList(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
   * @summary Update
   * @param {ChannelsApiChannelsPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsPartialUpdate(
    requestParameters: ChannelsApiChannelsPartialUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsPartialUpdate(
        requestParameters.id,
        requestParameters.PatchedFieldChannelWriteRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to FieldChannels. Channels may represent groups or organizations at MIT and are a high-level categorization of content.
   * @summary Retrieve
   * @param {ChannelsApiChannelsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsRetrieve(
    requestParameters: ChannelsApiChannelsRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for retrieving an individual field channel by type and name
   * @summary FieldChannel Detail Lookup by channel type and name
   * @param {ChannelsApiChannelsTypeRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public channelsTypeRetrieve(
    requestParameters: ChannelsApiChannelsTypeRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .channelsTypeRetrieve(
        requestParameters.channel_type,
        requestParameters.name,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const ChannelsListChannelTypeEnum = {
  Department: "department",
  Offeror: "offeror",
  Pathway: "pathway",
  Topic: "topic",
} as const
export type ChannelsListChannelTypeEnum =
  (typeof ChannelsListChannelTypeEnum)[keyof typeof ChannelsListChannelTypeEnum]

/**
 * CkeditorApi - axios parameter creator
 * @export
 */
export const CkeditorApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get the settings response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ckeditorRetrieve: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/ckeditor`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CkeditorApi - functional programming interface
 * @export
 */
export const CkeditorApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CkeditorApiAxiosParamCreator(configuration)
  return {
    /**
     * Get the settings response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ckeditorRetrieve(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CKEditorSettings>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.ckeditorRetrieve(options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["CkeditorApi.ckeditorRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * CkeditorApi - factory interface
 * @export
 */
export const CkeditorApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CkeditorApiFp(configuration)
  return {
    /**
     * Get the settings response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ckeditorRetrieve(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CKEditorSettings> {
      return localVarFp
        .ckeditorRetrieve(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CkeditorApi - object-oriented interface
 * @export
 * @class CkeditorApi
 * @extends {BaseAPI}
 */
export class CkeditorApi extends BaseAPI {
  /**
   * Get the settings response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CkeditorApi
   */
  public ckeditorRetrieve(options?: RawAxiosRequestConfig) {
    return CkeditorApiFp(this.configuration)
      .ckeditorRetrieve(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * NewsEventsApi - axios parameter creator
 * @export
 */
export const NewsEventsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get a paginated list of feed items.
     * @param {Array<NewsEventsListFeedTypeEnum>} [feed_type] The type of item  * &#x60;news&#x60; - News * &#x60;events&#x60; - Events
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsEventsList: async (
      feed_type?: Array<NewsEventsListFeedTypeEnum>,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/news_events/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (feed_type) {
        localVarQueryParameter["feed_type"] = feed_type
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a single feed item.
     * @param {number} id A unique integer value identifying this feed item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsEventsRetrieve: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("newsEventsRetrieve", "id", id)
      const localVarPath = `/api/v0/news_events/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NewsEventsApi - functional programming interface
 * @export
 */
export const NewsEventsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    NewsEventsApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of feed items.
     * @param {Array<NewsEventsListFeedTypeEnum>} [feed_type] The type of item  * &#x60;news&#x60; - News * &#x60;events&#x60; - Events
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async newsEventsList(
      feed_type?: Array<NewsEventsListFeedTypeEnum>,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedFeedItemList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.newsEventsList(
        feed_type,
        limit,
        offset,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["NewsEventsApi.newsEventsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a single feed item.
     * @param {number} id A unique integer value identifying this feed item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async newsEventsRetrieve(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.newsEventsRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["NewsEventsApi.newsEventsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * NewsEventsApi - factory interface
 * @export
 */
export const NewsEventsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = NewsEventsApiFp(configuration)
  return {
    /**
     * Get a paginated list of feed items.
     * @param {NewsEventsApiNewsEventsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsEventsList(
      requestParameters: NewsEventsApiNewsEventsListRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedFeedItemList> {
      return localVarFp
        .newsEventsList(
          requestParameters.feed_type,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a single feed item.
     * @param {NewsEventsApiNewsEventsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsEventsRetrieve(
      requestParameters: NewsEventsApiNewsEventsRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FeedItem> {
      return localVarFp
        .newsEventsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for newsEventsList operation in NewsEventsApi.
 * @export
 * @interface NewsEventsApiNewsEventsListRequest
 */
export interface NewsEventsApiNewsEventsListRequest {
  /**
   * The type of item  * &#x60;news&#x60; - News * &#x60;events&#x60; - Events
   * @type {Array<'events' | 'news'>}
   * @memberof NewsEventsApiNewsEventsList
   */
  readonly feed_type?: Array<NewsEventsListFeedTypeEnum>

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof NewsEventsApiNewsEventsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof NewsEventsApiNewsEventsList
   */
  readonly offset?: number
}

/**
 * Request parameters for newsEventsRetrieve operation in NewsEventsApi.
 * @export
 * @interface NewsEventsApiNewsEventsRetrieveRequest
 */
export interface NewsEventsApiNewsEventsRetrieveRequest {
  /**
   * A unique integer value identifying this feed item.
   * @type {number}
   * @memberof NewsEventsApiNewsEventsRetrieve
   */
  readonly id: number
}

/**
 * NewsEventsApi - object-oriented interface
 * @export
 * @class NewsEventsApi
 * @extends {BaseAPI}
 */
export class NewsEventsApi extends BaseAPI {
  /**
   * Get a paginated list of feed items.
   * @param {NewsEventsApiNewsEventsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NewsEventsApi
   */
  public newsEventsList(
    requestParameters: NewsEventsApiNewsEventsListRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return NewsEventsApiFp(this.configuration)
      .newsEventsList(
        requestParameters.feed_type,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single feed item.
   * @param {NewsEventsApiNewsEventsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NewsEventsApi
   */
  public newsEventsRetrieve(
    requestParameters: NewsEventsApiNewsEventsRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return NewsEventsApiFp(this.configuration)
      .newsEventsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const NewsEventsListFeedTypeEnum = {
  Events: "events",
  News: "news",
} as const
export type NewsEventsListFeedTypeEnum =
  (typeof NewsEventsListFeedTypeEnum)[keyof typeof NewsEventsListFeedTypeEnum]

/**
 * NewsEventsSourcesApi - axios parameter creator
 * @export
 */
export const NewsEventsSourcesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get a paginated list of news/event feed sources.
     * @param {Array<NewsEventsSourcesListFeedTypeEnum>} [feed_type] The type of source  * &#x60;news&#x60; - News * &#x60;events&#x60; - Events
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsEventsSourcesList: async (
      feed_type?: Array<NewsEventsSourcesListFeedTypeEnum>,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/news_events_sources/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (feed_type) {
        localVarQueryParameter["feed_type"] = feed_type
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a single news/event feed source.
     * @param {number} id A unique integer value identifying this feed source.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsEventsSourcesRetrieve: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("newsEventsSourcesRetrieve", "id", id)
      const localVarPath = `/api/v0/news_events_sources/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NewsEventsSourcesApi - functional programming interface
 * @export
 */
export const NewsEventsSourcesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    NewsEventsSourcesApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of news/event feed sources.
     * @param {Array<NewsEventsSourcesListFeedTypeEnum>} [feed_type] The type of source  * &#x60;news&#x60; - News * &#x60;events&#x60; - Events
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async newsEventsSourcesList(
      feed_type?: Array<NewsEventsSourcesListFeedTypeEnum>,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedFeedSourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.newsEventsSourcesList(
          feed_type,
          limit,
          offset,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["NewsEventsSourcesApi.newsEventsSourcesList"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a single news/event feed source.
     * @param {number} id A unique integer value identifying this feed source.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async newsEventsSourcesRetrieve(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedSource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.newsEventsSourcesRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["NewsEventsSourcesApi.newsEventsSourcesRetrieve"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * NewsEventsSourcesApi - factory interface
 * @export
 */
export const NewsEventsSourcesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = NewsEventsSourcesApiFp(configuration)
  return {
    /**
     * Get a paginated list of news/event feed sources.
     * @param {NewsEventsSourcesApiNewsEventsSourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsEventsSourcesList(
      requestParameters: NewsEventsSourcesApiNewsEventsSourcesListRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedFeedSourceList> {
      return localVarFp
        .newsEventsSourcesList(
          requestParameters.feed_type,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a single news/event feed source.
     * @param {NewsEventsSourcesApiNewsEventsSourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsEventsSourcesRetrieve(
      requestParameters: NewsEventsSourcesApiNewsEventsSourcesRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FeedSource> {
      return localVarFp
        .newsEventsSourcesRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for newsEventsSourcesList operation in NewsEventsSourcesApi.
 * @export
 * @interface NewsEventsSourcesApiNewsEventsSourcesListRequest
 */
export interface NewsEventsSourcesApiNewsEventsSourcesListRequest {
  /**
   * The type of source  * &#x60;news&#x60; - News * &#x60;events&#x60; - Events
   * @type {Array<'events' | 'news'>}
   * @memberof NewsEventsSourcesApiNewsEventsSourcesList
   */
  readonly feed_type?: Array<NewsEventsSourcesListFeedTypeEnum>

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof NewsEventsSourcesApiNewsEventsSourcesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof NewsEventsSourcesApiNewsEventsSourcesList
   */
  readonly offset?: number
}

/**
 * Request parameters for newsEventsSourcesRetrieve operation in NewsEventsSourcesApi.
 * @export
 * @interface NewsEventsSourcesApiNewsEventsSourcesRetrieveRequest
 */
export interface NewsEventsSourcesApiNewsEventsSourcesRetrieveRequest {
  /**
   * A unique integer value identifying this feed source.
   * @type {number}
   * @memberof NewsEventsSourcesApiNewsEventsSourcesRetrieve
   */
  readonly id: number
}

/**
 * NewsEventsSourcesApi - object-oriented interface
 * @export
 * @class NewsEventsSourcesApi
 * @extends {BaseAPI}
 */
export class NewsEventsSourcesApi extends BaseAPI {
  /**
   * Get a paginated list of news/event feed sources.
   * @param {NewsEventsSourcesApiNewsEventsSourcesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NewsEventsSourcesApi
   */
  public newsEventsSourcesList(
    requestParameters: NewsEventsSourcesApiNewsEventsSourcesListRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return NewsEventsSourcesApiFp(this.configuration)
      .newsEventsSourcesList(
        requestParameters.feed_type,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single news/event feed source.
   * @param {NewsEventsSourcesApiNewsEventsSourcesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NewsEventsSourcesApi
   */
  public newsEventsSourcesRetrieve(
    requestParameters: NewsEventsSourcesApiNewsEventsSourcesRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return NewsEventsSourcesApiFp(this.configuration)
      .newsEventsSourcesRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const NewsEventsSourcesListFeedTypeEnum = {
  Events: "events",
  News: "news",
} as const
export type NewsEventsSourcesListFeedTypeEnum =
  (typeof NewsEventsSourcesListFeedTypeEnum)[keyof typeof NewsEventsSourcesListFeedTypeEnum]

/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * View for profile
     * @param {string} user__username
     * @param {PatchedProfileRequest} [PatchedProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesPartialUpdate: async (
      user__username: string,
      PatchedProfileRequest?: PatchedProfileRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'user__username' is not null or undefined
      assertParamExists(
        "profilesPartialUpdate",
        "user__username",
        user__username,
      )
      const localVarPath = `/api/v0/profiles/{user__username}/`.replace(
        `{${"user__username"}}`,
        encodeURIComponent(String(user__username)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedProfileRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for profile
     * @param {string} user__username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesRetrieve: async (
      user__username: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'user__username' is not null or undefined
      assertParamExists("profilesRetrieve", "user__username", user__username)
      const localVarPath = `/api/v0/profiles/{user__username}/`.replace(
        `{${"user__username"}}`,
        encodeURIComponent(String(user__username)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for profile
     * @param {string} user__username
     * @param {ProfileRequest} [ProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUpdate: async (
      user__username: string,
      ProfileRequest?: ProfileRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'user__username' is not null or undefined
      assertParamExists("profilesUpdate", "user__username", user__username)
      const localVarPath = `/api/v0/profiles/{user__username}/`.replace(
        `{${"user__username"}}`,
        encodeURIComponent(String(user__username)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        ProfileRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
  return {
    /**
     * View for profile
     * @param {string} user__username
     * @param {PatchedProfileRequest} [PatchedProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async profilesPartialUpdate(
      user__username: string,
      PatchedProfileRequest?: PatchedProfileRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.profilesPartialUpdate(
          user__username,
          PatchedProfileRequest,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProfilesApi.profilesPartialUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for profile
     * @param {string} user__username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async profilesRetrieve(
      user__username: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.profilesRetrieve(
          user__username,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProfilesApi.profilesRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for profile
     * @param {string} user__username
     * @param {ProfileRequest} [ProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async profilesUpdate(
      user__username: string,
      ProfileRequest?: ProfileRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.profilesUpdate(
        user__username,
        ProfileRequest,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProfilesApi.profilesUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProfilesApiFp(configuration)
  return {
    /**
     * View for profile
     * @param {ProfilesApiProfilesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesPartialUpdate(
      requestParameters: ProfilesApiProfilesPartialUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Profile> {
      return localVarFp
        .profilesPartialUpdate(
          requestParameters.user__username,
          requestParameters.PatchedProfileRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * View for profile
     * @param {ProfilesApiProfilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesRetrieve(
      requestParameters: ProfilesApiProfilesRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Profile> {
      return localVarFp
        .profilesRetrieve(requestParameters.user__username, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * View for profile
     * @param {ProfilesApiProfilesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUpdate(
      requestParameters: ProfilesApiProfilesUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Profile> {
      return localVarFp
        .profilesUpdate(
          requestParameters.user__username,
          requestParameters.ProfileRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for profilesPartialUpdate operation in ProfilesApi.
 * @export
 * @interface ProfilesApiProfilesPartialUpdateRequest
 */
export interface ProfilesApiProfilesPartialUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof ProfilesApiProfilesPartialUpdate
   */
  readonly user__username: string

  /**
   *
   * @type {PatchedProfileRequest}
   * @memberof ProfilesApiProfilesPartialUpdate
   */
  readonly PatchedProfileRequest?: PatchedProfileRequest
}

/**
 * Request parameters for profilesRetrieve operation in ProfilesApi.
 * @export
 * @interface ProfilesApiProfilesRetrieveRequest
 */
export interface ProfilesApiProfilesRetrieveRequest {
  /**
   *
   * @type {string}
   * @memberof ProfilesApiProfilesRetrieve
   */
  readonly user__username: string
}

/**
 * Request parameters for profilesUpdate operation in ProfilesApi.
 * @export
 * @interface ProfilesApiProfilesUpdateRequest
 */
export interface ProfilesApiProfilesUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof ProfilesApiProfilesUpdate
   */
  readonly user__username: string

  /**
   *
   * @type {ProfileRequest}
   * @memberof ProfilesApiProfilesUpdate
   */
  readonly ProfileRequest?: ProfileRequest
}

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
  /**
   * View for profile
   * @param {ProfilesApiProfilesPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfilesApi
   */
  public profilesPartialUpdate(
    requestParameters: ProfilesApiProfilesPartialUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfilesApiFp(this.configuration)
      .profilesPartialUpdate(
        requestParameters.user__username,
        requestParameters.PatchedProfileRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for profile
   * @param {ProfilesApiProfilesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfilesApi
   */
  public profilesRetrieve(
    requestParameters: ProfilesApiProfilesRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfilesApiFp(this.configuration)
      .profilesRetrieve(requestParameters.user__username, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for profile
   * @param {ProfilesApiProfilesUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfilesApi
   */
  public profilesUpdate(
    requestParameters: ProfilesApiProfilesUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfilesApiFp(this.configuration)
      .profilesUpdate(
        requestParameters.user__username,
        requestParameters.ProfileRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ProgramCertificatesApi - axios parameter creator
 * @export
 */
export const ProgramCertificatesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * View for listing program certificates for a user (includes program letter links)
     * @param {number} [micromasters_program_id]
     * @param {string} [program_title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCertificatesList: async (
      micromasters_program_id?: number,
      program_title?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/program_certificates/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (micromasters_program_id !== undefined) {
        localVarQueryParameter["micromasters_program_id"] =
          micromasters_program_id
      }

      if (program_title !== undefined) {
        localVarQueryParameter["program_title"] = program_title
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProgramCertificatesApi - functional programming interface
 * @export
 */
export const ProgramCertificatesApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    ProgramCertificatesApiAxiosParamCreator(configuration)
  return {
    /**
     * View for listing program certificates for a user (includes program letter links)
     * @param {number} [micromasters_program_id]
     * @param {string} [program_title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programCertificatesList(
      micromasters_program_id?: number,
      program_title?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ProgramCertificate>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programCertificatesList(
          micromasters_program_id,
          program_title,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProgramCertificatesApi.programCertificatesList"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * ProgramCertificatesApi - factory interface
 * @export
 */
export const ProgramCertificatesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProgramCertificatesApiFp(configuration)
  return {
    /**
     * View for listing program certificates for a user (includes program letter links)
     * @param {ProgramCertificatesApiProgramCertificatesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCertificatesList(
      requestParameters: ProgramCertificatesApiProgramCertificatesListRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<ProgramCertificate>> {
      return localVarFp
        .programCertificatesList(
          requestParameters.micromasters_program_id,
          requestParameters.program_title,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for programCertificatesList operation in ProgramCertificatesApi.
 * @export
 * @interface ProgramCertificatesApiProgramCertificatesListRequest
 */
export interface ProgramCertificatesApiProgramCertificatesListRequest {
  /**
   *
   * @type {number}
   * @memberof ProgramCertificatesApiProgramCertificatesList
   */
  readonly micromasters_program_id?: number

  /**
   *
   * @type {string}
   * @memberof ProgramCertificatesApiProgramCertificatesList
   */
  readonly program_title?: string
}

/**
 * ProgramCertificatesApi - object-oriented interface
 * @export
 * @class ProgramCertificatesApi
 * @extends {BaseAPI}
 */
export class ProgramCertificatesApi extends BaseAPI {
  /**
   * View for listing program certificates for a user (includes program letter links)
   * @param {ProgramCertificatesApiProgramCertificatesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramCertificatesApi
   */
  public programCertificatesList(
    requestParameters: ProgramCertificatesApiProgramCertificatesListRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return ProgramCertificatesApiFp(this.configuration)
      .programCertificatesList(
        requestParameters.micromasters_program_id,
        requestParameters.program_title,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * TestimonialsApi - axios parameter creator
 * @export
 */
export const TestimonialsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * List all testimonials.
     * @summary List
     * @param {Array<number>} [channels] The channels the attestation is for
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {boolean} [published] Only return published testimonials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testimonialsList: async (
      channels?: Array<number>,
      limit?: number,
      offset?: number,
      published?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/testimonials/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (channels) {
        localVarQueryParameter["channels"] = channels
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (published !== undefined) {
        localVarQueryParameter["published"] = published
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a testimonial.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this attestation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testimonialsRetrieve: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("testimonialsRetrieve", "id", id)
      const localVarPath = `/api/v0/testimonials/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TestimonialsApi - functional programming interface
 * @export
 */
export const TestimonialsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TestimonialsApiAxiosParamCreator(configuration)
  return {
    /**
     * List all testimonials.
     * @summary List
     * @param {Array<number>} [channels] The channels the attestation is for
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {boolean} [published] Only return published testimonials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async testimonialsList(
      channels?: Array<number>,
      limit?: number,
      offset?: number,
      published?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedAttestationList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.testimonialsList(
          channels,
          limit,
          offset,
          published,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["TestimonialsApi.testimonialsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a testimonial.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this attestation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async testimonialsRetrieve(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attestation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.testimonialsRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["TestimonialsApi.testimonialsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * TestimonialsApi - factory interface
 * @export
 */
export const TestimonialsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TestimonialsApiFp(configuration)
  return {
    /**
     * List all testimonials.
     * @summary List
     * @param {TestimonialsApiTestimonialsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testimonialsList(
      requestParameters: TestimonialsApiTestimonialsListRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedAttestationList> {
      return localVarFp
        .testimonialsList(
          requestParameters.channels,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.published,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a testimonial.
     * @summary Retrieve
     * @param {TestimonialsApiTestimonialsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testimonialsRetrieve(
      requestParameters: TestimonialsApiTestimonialsRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Attestation> {
      return localVarFp
        .testimonialsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for testimonialsList operation in TestimonialsApi.
 * @export
 * @interface TestimonialsApiTestimonialsListRequest
 */
export interface TestimonialsApiTestimonialsListRequest {
  /**
   * The channels the attestation is for
   * @type {Array<number>}
   * @memberof TestimonialsApiTestimonialsList
   */
  readonly channels?: Array<number>

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof TestimonialsApiTestimonialsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof TestimonialsApiTestimonialsList
   */
  readonly offset?: number

  /**
   * Only return published testimonials
   * @type {boolean}
   * @memberof TestimonialsApiTestimonialsList
   */
  readonly published?: boolean
}

/**
 * Request parameters for testimonialsRetrieve operation in TestimonialsApi.
 * @export
 * @interface TestimonialsApiTestimonialsRetrieveRequest
 */
export interface TestimonialsApiTestimonialsRetrieveRequest {
  /**
   * A unique integer value identifying this attestation.
   * @type {number}
   * @memberof TestimonialsApiTestimonialsRetrieve
   */
  readonly id: number
}

/**
 * TestimonialsApi - object-oriented interface
 * @export
 * @class TestimonialsApi
 * @extends {BaseAPI}
 */
export class TestimonialsApi extends BaseAPI {
  /**
   * List all testimonials.
   * @summary List
   * @param {TestimonialsApiTestimonialsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TestimonialsApi
   */
  public testimonialsList(
    requestParameters: TestimonialsApiTestimonialsListRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return TestimonialsApiFp(this.configuration)
      .testimonialsList(
        requestParameters.channels,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.published,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a testimonial.
   * @summary Retrieve
   * @param {TestimonialsApiTestimonialsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TestimonialsApi
   */
  public testimonialsRetrieve(
    requestParameters: TestimonialsApiTestimonialsRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TestimonialsApiFp(this.configuration)
      .testimonialsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * View for users
     * @param {UserRequest} UserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate: async (
      UserRequest: UserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'UserRequest' is not null or undefined
      assertParamExists("usersCreate", "UserRequest", UserRequest)
      const localVarPath = `/api/v0/users/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        UserRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for users
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDestroy: async (
      username: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists("usersDestroy", "username", username)
      const localVarPath = `/api/v0/users/{username}/`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersList: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/users/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeRetrieve: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/users/me/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for users
     * @param {string} username
     * @param {PatchedUserRequest} [PatchedUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPartialUpdate: async (
      username: string,
      PatchedUserRequest?: PatchedUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists("usersPartialUpdate", "username", username)
      const localVarPath = `/api/v0/users/{username}/`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedUserRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for users
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersRetrieve: async (
      username: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists("usersRetrieve", "username", username)
      const localVarPath = `/api/v0/users/{username}/`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for users
     * @param {string} username
     * @param {UserRequest} UserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUpdate: async (
      username: string,
      UserRequest: UserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists("usersUpdate", "username", username)
      // verify required parameter 'UserRequest' is not null or undefined
      assertParamExists("usersUpdate", "UserRequest", UserRequest)
      const localVarPath = `/api/v0/users/{username}/`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        UserRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
  return {
    /**
     * View for users
     * @param {UserRequest} UserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersCreate(
      UserRequest: UserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreate(
        UserRequest,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UsersApi.usersCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for users
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersDestroy(
      username: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersDestroy(
        username,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UsersApi.usersDestroy"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersList(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersList(options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UsersApi.usersList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeRetrieve(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersMeRetrieve(options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UsersApi.usersMeRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for users
     * @param {string} username
     * @param {PatchedUserRequest} [PatchedUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPartialUpdate(
      username: string,
      PatchedUserRequest?: PatchedUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPartialUpdate(
          username,
          PatchedUserRequest,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UsersApi.usersPartialUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for users
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersRetrieve(
      username: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersRetrieve(
        username,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UsersApi.usersRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for users
     * @param {string} username
     * @param {UserRequest} UserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersUpdate(
      username: string,
      UserRequest: UserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdate(
        username,
        UserRequest,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UsersApi.usersUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration)
  return {
    /**
     * View for users
     * @param {UsersApiUsersCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(
      requestParameters: UsersApiUsersCreateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .usersCreate(requestParameters.UserRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * View for users
     * @param {UsersApiUsersDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDestroy(
      requestParameters: UsersApiUsersDestroyRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .usersDestroy(requestParameters.username, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * View for users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersList(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
      return localVarFp
        .usersList(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<User> {
      return localVarFp
        .usersMeRetrieve(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * View for users
     * @param {UsersApiUsersPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPartialUpdate(
      requestParameters: UsersApiUsersPartialUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .usersPartialUpdate(
          requestParameters.username,
          requestParameters.PatchedUserRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * View for users
     * @param {UsersApiUsersRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersRetrieve(
      requestParameters: UsersApiUsersRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .usersRetrieve(requestParameters.username, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * View for users
     * @param {UsersApiUsersUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUpdate(
      requestParameters: UsersApiUsersUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .usersUpdate(
          requestParameters.username,
          requestParameters.UserRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for usersCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersCreateRequest
 */
export interface UsersApiUsersCreateRequest {
  /**
   *
   * @type {UserRequest}
   * @memberof UsersApiUsersCreate
   */
  readonly UserRequest: UserRequest
}

/**
 * Request parameters for usersDestroy operation in UsersApi.
 * @export
 * @interface UsersApiUsersDestroyRequest
 */
export interface UsersApiUsersDestroyRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersDestroy
   */
  readonly username: string
}

/**
 * Request parameters for usersPartialUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersPartialUpdateRequest
 */
export interface UsersApiUsersPartialUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersPartialUpdate
   */
  readonly username: string

  /**
   *
   * @type {PatchedUserRequest}
   * @memberof UsersApiUsersPartialUpdate
   */
  readonly PatchedUserRequest?: PatchedUserRequest
}

/**
 * Request parameters for usersRetrieve operation in UsersApi.
 * @export
 * @interface UsersApiUsersRetrieveRequest
 */
export interface UsersApiUsersRetrieveRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersRetrieve
   */
  readonly username: string
}

/**
 * Request parameters for usersUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersUpdateRequest
 */
export interface UsersApiUsersUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersUpdate
   */
  readonly username: string

  /**
   *
   * @type {UserRequest}
   * @memberof UsersApiUsersUpdate
   */
  readonly UserRequest: UserRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * View for users
   * @param {UsersApiUsersCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersCreate(
    requestParameters: UsersApiUsersCreateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .usersCreate(requestParameters.UserRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for users
   * @param {UsersApiUsersDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersDestroy(
    requestParameters: UsersApiUsersDestroyRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .usersDestroy(requestParameters.username, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersList(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .usersList(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * User retrieve and update viewsets for the current user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersMeRetrieve(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .usersMeRetrieve(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for users
   * @param {UsersApiUsersPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersPartialUpdate(
    requestParameters: UsersApiUsersPartialUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .usersPartialUpdate(
        requestParameters.username,
        requestParameters.PatchedUserRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for users
   * @param {UsersApiUsersRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersRetrieve(
    requestParameters: UsersApiUsersRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .usersRetrieve(requestParameters.username, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for users
   * @param {UsersApiUsersUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersUpdate(
    requestParameters: UsersApiUsersUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .usersUpdate(
        requestParameters.username,
        requestParameters.UserRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * WebsitesApi - axios parameter creator
 * @export
 */
export const WebsitesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * View for user websites
     * @param {UserWebsiteRequest} UserWebsiteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    websitesCreate: async (
      UserWebsiteRequest: UserWebsiteRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'UserWebsiteRequest' is not null or undefined
      assertParamExists(
        "websitesCreate",
        "UserWebsiteRequest",
        UserWebsiteRequest,
      )
      const localVarPath = `/api/v0/websites/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        UserWebsiteRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * View for user websites
     * @param {number} id A unique integer value identifying this user website.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    websitesDestroy: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("websitesDestroy", "id", id)
      const localVarPath = `/api/v0/websites/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WebsitesApi - functional programming interface
 * @export
 */
export const WebsitesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WebsitesApiAxiosParamCreator(configuration)
  return {
    /**
     * View for user websites
     * @param {UserWebsiteRequest} UserWebsiteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async websitesCreate(
      UserWebsiteRequest: UserWebsiteRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWebsite>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.websitesCreate(
        UserWebsiteRequest,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["WebsitesApi.websitesCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for user websites
     * @param {number} id A unique integer value identifying this user website.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async websitesDestroy(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.websitesDestroy(
        id,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["WebsitesApi.websitesDestroy"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * WebsitesApi - factory interface
 * @export
 */
export const WebsitesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WebsitesApiFp(configuration)
  return {
    /**
     * View for user websites
     * @param {WebsitesApiWebsitesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    websitesCreate(
      requestParameters: WebsitesApiWebsitesCreateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserWebsite> {
      return localVarFp
        .websitesCreate(requestParameters.UserWebsiteRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * View for user websites
     * @param {WebsitesApiWebsitesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    websitesDestroy(
      requestParameters: WebsitesApiWebsitesDestroyRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .websitesDestroy(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for websitesCreate operation in WebsitesApi.
 * @export
 * @interface WebsitesApiWebsitesCreateRequest
 */
export interface WebsitesApiWebsitesCreateRequest {
  /**
   *
   * @type {UserWebsiteRequest}
   * @memberof WebsitesApiWebsitesCreate
   */
  readonly UserWebsiteRequest: UserWebsiteRequest
}

/**
 * Request parameters for websitesDestroy operation in WebsitesApi.
 * @export
 * @interface WebsitesApiWebsitesDestroyRequest
 */
export interface WebsitesApiWebsitesDestroyRequest {
  /**
   * A unique integer value identifying this user website.
   * @type {number}
   * @memberof WebsitesApiWebsitesDestroy
   */
  readonly id: number
}

/**
 * WebsitesApi - object-oriented interface
 * @export
 * @class WebsitesApi
 * @extends {BaseAPI}
 */
export class WebsitesApi extends BaseAPI {
  /**
   * View for user websites
   * @param {WebsitesApiWebsitesCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebsitesApi
   */
  public websitesCreate(
    requestParameters: WebsitesApiWebsitesCreateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return WebsitesApiFp(this.configuration)
      .websitesCreate(requestParameters.UserWebsiteRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * View for user websites
   * @param {WebsitesApiWebsitesDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebsitesApi
   */
  public websitesDestroy(
    requestParameters: WebsitesApiWebsitesDestroyRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return WebsitesApiFp(this.configuration)
      .websitesDestroy(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * WidgetListsApi - axios parameter creator
 * @export
 */
export const WidgetListsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * API for managing widget lists
     * @param {number} id A unique integer value identifying this widget list.
     * @param {PatchedWidgetListRequest} [PatchedWidgetListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    widgetListsPartialUpdate: async (
      id: number,
      PatchedWidgetListRequest?: PatchedWidgetListRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("widgetListsPartialUpdate", "id", id)
      const localVarPath = `/api/v0/widget_lists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedWidgetListRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * API for managing widget lists
     * @param {number} id A unique integer value identifying this widget list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    widgetListsRetrieve: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("widgetListsRetrieve", "id", id)
      const localVarPath = `/api/v0/widget_lists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * API for managing widget lists
     * @param {number} id A unique integer value identifying this widget list.
     * @param {WidgetListRequest} [WidgetListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    widgetListsUpdate: async (
      id: number,
      WidgetListRequest?: WidgetListRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("widgetListsUpdate", "id", id)
      const localVarPath = `/api/v0/widget_lists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        WidgetListRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WidgetListsApi - functional programming interface
 * @export
 */
export const WidgetListsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    WidgetListsApiAxiosParamCreator(configuration)
  return {
    /**
     * API for managing widget lists
     * @param {number} id A unique integer value identifying this widget list.
     * @param {PatchedWidgetListRequest} [PatchedWidgetListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async widgetListsPartialUpdate(
      id: number,
      PatchedWidgetListRequest?: PatchedWidgetListRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.widgetListsPartialUpdate(
          id,
          PatchedWidgetListRequest,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["WidgetListsApi.widgetListsPartialUpdate"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * API for managing widget lists
     * @param {number} id A unique integer value identifying this widget list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async widgetListsRetrieve(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.widgetListsRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["WidgetListsApi.widgetListsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * API for managing widget lists
     * @param {number} id A unique integer value identifying this widget list.
     * @param {WidgetListRequest} [WidgetListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async widgetListsUpdate(
      id: number,
      WidgetListRequest?: WidgetListRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.widgetListsUpdate(
          id,
          WidgetListRequest,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["WidgetListsApi.widgetListsUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * WidgetListsApi - factory interface
 * @export
 */
export const WidgetListsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WidgetListsApiFp(configuration)
  return {
    /**
     * API for managing widget lists
     * @param {WidgetListsApiWidgetListsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    widgetListsPartialUpdate(
      requestParameters: WidgetListsApiWidgetListsPartialUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<WidgetList> {
      return localVarFp
        .widgetListsPartialUpdate(
          requestParameters.id,
          requestParameters.PatchedWidgetListRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * API for managing widget lists
     * @param {WidgetListsApiWidgetListsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    widgetListsRetrieve(
      requestParameters: WidgetListsApiWidgetListsRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<WidgetList> {
      return localVarFp
        .widgetListsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * API for managing widget lists
     * @param {WidgetListsApiWidgetListsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    widgetListsUpdate(
      requestParameters: WidgetListsApiWidgetListsUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<WidgetList> {
      return localVarFp
        .widgetListsUpdate(
          requestParameters.id,
          requestParameters.WidgetListRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for widgetListsPartialUpdate operation in WidgetListsApi.
 * @export
 * @interface WidgetListsApiWidgetListsPartialUpdateRequest
 */
export interface WidgetListsApiWidgetListsPartialUpdateRequest {
  /**
   * A unique integer value identifying this widget list.
   * @type {number}
   * @memberof WidgetListsApiWidgetListsPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {PatchedWidgetListRequest}
   * @memberof WidgetListsApiWidgetListsPartialUpdate
   */
  readonly PatchedWidgetListRequest?: PatchedWidgetListRequest
}

/**
 * Request parameters for widgetListsRetrieve operation in WidgetListsApi.
 * @export
 * @interface WidgetListsApiWidgetListsRetrieveRequest
 */
export interface WidgetListsApiWidgetListsRetrieveRequest {
  /**
   * A unique integer value identifying this widget list.
   * @type {number}
   * @memberof WidgetListsApiWidgetListsRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for widgetListsUpdate operation in WidgetListsApi.
 * @export
 * @interface WidgetListsApiWidgetListsUpdateRequest
 */
export interface WidgetListsApiWidgetListsUpdateRequest {
  /**
   * A unique integer value identifying this widget list.
   * @type {number}
   * @memberof WidgetListsApiWidgetListsUpdate
   */
  readonly id: number

  /**
   *
   * @type {WidgetListRequest}
   * @memberof WidgetListsApiWidgetListsUpdate
   */
  readonly WidgetListRequest?: WidgetListRequest
}

/**
 * WidgetListsApi - object-oriented interface
 * @export
 * @class WidgetListsApi
 * @extends {BaseAPI}
 */
export class WidgetListsApi extends BaseAPI {
  /**
   * API for managing widget lists
   * @param {WidgetListsApiWidgetListsPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WidgetListsApi
   */
  public widgetListsPartialUpdate(
    requestParameters: WidgetListsApiWidgetListsPartialUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return WidgetListsApiFp(this.configuration)
      .widgetListsPartialUpdate(
        requestParameters.id,
        requestParameters.PatchedWidgetListRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * API for managing widget lists
   * @param {WidgetListsApiWidgetListsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WidgetListsApi
   */
  public widgetListsRetrieve(
    requestParameters: WidgetListsApiWidgetListsRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return WidgetListsApiFp(this.configuration)
      .widgetListsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * API for managing widget lists
   * @param {WidgetListsApiWidgetListsUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WidgetListsApi
   */
  public widgetListsUpdate(
    requestParameters: WidgetListsApiWidgetListsUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return WidgetListsApiFp(this.configuration)
      .widgetListsUpdate(
        requestParameters.id,
        requestParameters.WidgetListRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
