/* tslint:disable */
/* eslint-disable */
/**
 * MIT Open Discussions Course Catalog API
 * Open Discussions public API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base"

/**
 * Serializer class for course run ContentFiles
 * @export
 * @interface ContentFile
 */
export interface ContentFile {
  /**
   *
   * @type {number}
   * @memberof ContentFile
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  run_id: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  run_title: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  run_slug: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  department: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  semester: string
  /**
   *
   * @type {number}
   * @memberof ContentFile
   */
  year: number
  /**
   *
   * @type {Array<string>}
   * @memberof ContentFile
   */
  topics: Array<string>
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  key?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  uid?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  title?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  short_description: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  short_url?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  section?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  section_slug?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  file_type?: string | null
  /**
   *
   * @type {ContentTypeEnum}
   * @memberof ContentFile
   */
  content_type?: ContentTypeEnum
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content_title?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content_author?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content_language?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  image_src?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  resource_id: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  resource_readable_id: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  resource_readable_num: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  resource_type: string
}

/**
 * * `page` - page * `file` - file * `vertical` - vertical
 * @export
 * @enum {string}
 */

export const ContentTypeEnum = {
  Page: "page",
  File: "file",
  Vertical: "vertical",
} as const

export type ContentTypeEnum =
  (typeof ContentTypeEnum)[keyof typeof ContentTypeEnum]

/**
 * Serializer for the Course model
 * @export
 * @interface Course
 */
export interface Course {
  /**
   *
   * @type {Array<string>}
   * @memberof Course
   */
  extra_course_numbers?: Array<string> | null
}
/**
 * Serializer for the Course model
 * @export
 * @interface CourseRequest
 */
export interface CourseRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof CourseRequest
   */
  extra_course_numbers?: Array<string> | null
}
/**
 * Serializer for the LearningPath model
 * @export
 * @interface LearningPath
 */
export interface LearningPath {
  /**
   *
   * @type {number}
   * @memberof LearningPath
   */
  id: number
  /**
   * Return the number of items in the list
   * @type {number}
   * @memberof LearningPath
   */
  item_count: number
  /**
   *
   * @type {number}
   * @memberof LearningPath
   */
  author: number
}
/**
 * Specialized serializer for a LearningPath relationship
 * @export
 * @interface LearningPathRelationship
 */
export interface LearningPathRelationship {
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationship
   */
  id: number
  /**
   *
   * @type {LearningResource}
   * @memberof LearningPathRelationship
   */
  resource: LearningResource
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationship
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationship
   */
  child: number
}
/**
 * Specialized serializer for a LearningPath relationship
 * @export
 * @interface LearningPathRelationshipRequest
 */
export interface LearningPathRelationshipRequest {
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationshipRequest
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationshipRequest
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationshipRequest
   */
  child: number
}
/**
 * Serializer for the LearningPath model
 * @export
 * @interface LearningPathRequest
 */
export interface LearningPathRequest {
  /**
   *
   * @type {number}
   * @memberof LearningPathRequest
   */
  author: number
}
/**
 * CRUD serializer for LearningPath resources
 * @export
 * @interface LearningPathResource
 */
export interface LearningPathResource {
  /**
   *
   * @type {number}
   * @memberof LearningPathResource
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningPathResource
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {Array<string>}
   * @memberof LearningPathResource
   */
  offered_by: Array<string> | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningPathResource
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {LearningResourceDepartment}
   * @memberof LearningPathResource
   */
  department: LearningResourceDepartment | null
  /**
   * Returns the audience for the learning resource
   * @type {string}
   * @memberof LearningPathResource
   */
  audience: string | null
  /**
   * Returns the certification for the learning resource
   * @type {string}
   * @memberof LearningPathResource
   */
  certification: string | null
  /**
   * Returns the prices for the learning resource
   * @type {string}
   * @memberof LearningPathResource
   */
  prices: string | null
  /**
   *
   * @type {Course}
   * @memberof LearningPathResource
   */
  course: Course | null
  /**
   *
   * @type {LearningPath}
   * @memberof LearningPathResource
   */
  learning_path: LearningPath | null
  /**
   *
   * @type {Podcast}
   * @memberof LearningPathResource
   */
  podcast: Podcast | null
  /**
   *
   * @type {PodcastEpisode}
   * @memberof LearningPathResource
   */
  podcast_episode: PodcastEpisode | null
  /**
   *
   * @type {Array<LearningResourceRun>}
   * @memberof LearningPathResource
   */
  runs: Array<LearningResourceRun> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningPathResource
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {Array<MicroLearningPathRelationship>}
   * @memberof LearningPathResource
   */
  learning_path_parents: Array<MicroLearningPathRelationship> | null
  /**
   *
   * @type {Array<MicroUserListRelationship>}
   * @memberof LearningPathResource
   */
  user_list_parents: Array<MicroUserListRelationship> | null
  /**
   *
   * @type {Program}
   * @memberof LearningPathResource
   */
  program: Program | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningPathResource
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningPathResource
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningPathResource
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  platform: string | null
  /**
   *
   * @type {Array<number>}
   * @memberof LearningPathResource
   */
  resources: Array<number>
}

/**
 * CRUD serializer for LearningPath resources
 * @export
 * @interface LearningPathResourceRequest
 */
export interface LearningPathResourceRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningPathResourceRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningPathResourceRequest
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningPathResourceRequest
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningPathResourceRequest
   */
  resource_type: ResourceTypeEnum
}

/**
 * Serializer for LearningResource, with program included
 * @export
 * @interface LearningResource
 */
export interface LearningResource {
  /**
   *
   * @type {number}
   * @memberof LearningResource
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResource
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  offered_by: Array<string> | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {LearningResourceDepartment}
   * @memberof LearningResource
   */
  department: LearningResourceDepartment | null
  /**
   * Returns the audience for the learning resource
   * @type {string}
   * @memberof LearningResource
   */
  audience: string | null
  /**
   * Returns the certification for the learning resource
   * @type {string}
   * @memberof LearningResource
   */
  certification: string | null
  /**
   * Returns the prices for the learning resource
   * @type {string}
   * @memberof LearningResource
   */
  prices: string | null
  /**
   *
   * @type {Course}
   * @memberof LearningResource
   */
  course: Course | null
  /**
   *
   * @type {LearningPath}
   * @memberof LearningResource
   */
  learning_path: LearningPath | null
  /**
   *
   * @type {Podcast}
   * @memberof LearningResource
   */
  podcast: Podcast | null
  /**
   *
   * @type {PodcastEpisode}
   * @memberof LearningResource
   */
  podcast_episode: PodcastEpisode | null
  /**
   *
   * @type {Array<LearningResourceRun>}
   * @memberof LearningResource
   */
  runs: Array<LearningResourceRun> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResource
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {Array<MicroLearningPathRelationship>}
   * @memberof LearningResource
   */
  learning_path_parents: Array<MicroLearningPathRelationship> | null
  /**
   *
   * @type {Array<MicroUserListRelationship>}
   * @memberof LearningResource
   */
  user_list_parents: Array<MicroUserListRelationship> | null
  /**
   *
   * @type {Program}
   * @memberof LearningResource
   */
  program: Program | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResource
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningResource
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  platform: string | null
}

/**
 * Serializer for LearningResource, minus program
 * @export
 * @interface LearningResourceBase
 */
export interface LearningResourceBase {
  /**
   *
   * @type {number}
   * @memberof LearningResourceBase
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResourceBase
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  offered_by: Array<string> | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {LearningResourceDepartment}
   * @memberof LearningResourceBase
   */
  department: LearningResourceDepartment | null
  /**
   * Returns the audience for the learning resource
   * @type {string}
   * @memberof LearningResourceBase
   */
  audience: string | null
  /**
   * Returns the certification for the learning resource
   * @type {string}
   * @memberof LearningResourceBase
   */
  certification: string | null
  /**
   * Returns the prices for the learning resource
   * @type {string}
   * @memberof LearningResourceBase
   */
  prices: string | null
  /**
   *
   * @type {Course}
   * @memberof LearningResourceBase
   */
  course: Course | null
  /**
   *
   * @type {LearningPath}
   * @memberof LearningResourceBase
   */
  learning_path: LearningPath | null
  /**
   *
   * @type {Podcast}
   * @memberof LearningResourceBase
   */
  podcast: Podcast | null
  /**
   *
   * @type {PodcastEpisode}
   * @memberof LearningResourceBase
   */
  podcast_episode: PodcastEpisode | null
  /**
   *
   * @type {Array<LearningResourceRun>}
   * @memberof LearningResourceBase
   */
  runs: Array<LearningResourceRun> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResourceBase
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {Array<MicroLearningPathRelationship>}
   * @memberof LearningResourceBase
   */
  learning_path_parents: Array<MicroLearningPathRelationship> | null
  /**
   *
   * @type {Array<MicroUserListRelationship>}
   * @memberof LearningResourceBase
   */
  user_list_parents: Array<MicroUserListRelationship> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceBase
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningResourceBase
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  platform: string | null
}

/**
 * Serializer for LearningResourceRelationship children
 * @export
 * @interface LearningResourceChild
 */
export interface LearningResourceChild {
  /**
   *
   * @type {number}
   * @memberof LearningResourceChild
   */
  child: number
}
/**
 * Serializer for LearningResourceDepartment
 * @export
 * @interface LearningResourceDepartment
 */
export interface LearningResourceDepartment {
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartment
   */
  department_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartment
   */
  name: string
}
/**
 * Serializer for LearningResourceDepartment
 * @export
 * @interface LearningResourceDepartmentRequest
 */
export interface LearningResourceDepartmentRequest {
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartmentRequest
   */
  department_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartmentRequest
   */
  name: string
}
/**
 * Serializer for LearningResourceImage
 * @export
 * @interface LearningResourceImage
 */
export interface LearningResourceImage {
  /**
   *
   * @type {number}
   * @memberof LearningResourceImage
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  alt?: string | null
}
/**
 * Serializer for LearningResourceImage
 * @export
 * @interface LearningResourceImageRequest
 */
export interface LearningResourceImageRequest {
  /**
   *
   * @type {string}
   * @memberof LearningResourceImageRequest
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceImageRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceImageRequest
   */
  alt?: string | null
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface LearningResourceInstructor
 */
export interface LearningResourceInstructor {
  /**
   *
   * @type {number}
   * @memberof LearningResourceInstructor
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  first_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  last_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  full_name?: string | null
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface LearningResourceInstructorRequest
 */
export interface LearningResourceInstructorRequest {
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructorRequest
   */
  first_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructorRequest
   */
  last_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructorRequest
   */
  full_name?: string | null
}
/**
 * Serializer for LearningResource, with program included
 * @export
 * @interface LearningResourceRequest
 */
export interface LearningResourceRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResourceRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceRequest
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRequest
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningResourceRequest
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  platform: string | null
}

/**
 * Serializer for the LearningResourceRun model
 * @export
 * @interface LearningResourceRun
 */
export interface LearningResourceRun {
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceInstructor>}
   * @memberof LearningResourceRun
   */
  instructors: Array<LearningResourceInstructor> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResourceRun
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  run_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceRun
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRun
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  level?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  slug?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  availability?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  semester?: string | null
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  year?: number | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  start_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  end_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  enrollment_start?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  enrollment_end?: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRun
   */
  prices?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  checksum?: string | null
}
/**
 * Serializer for the LearningResourceRun model
 * @export
 * @interface LearningResourceRunRequest
 */
export interface LearningResourceRunRequest {
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  run_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceRunRequest
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRunRequest
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  level?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  slug?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  availability?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  semester?: string | null
  /**
   *
   * @type {number}
   * @memberof LearningResourceRunRequest
   */
  year?: number | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  start_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  end_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  enrollment_start?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  enrollment_end?: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRunRequest
   */
  prices?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  checksum?: string | null
}
/**
 * Serializer for LearningResourceTopic model
 * @export
 * @interface LearningResourceTopic
 */
export interface LearningResourceTopic {
  /**
   *
   * @type {number}
   * @memberof LearningResourceTopic
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceTopic
   */
  name: string
}
/**
 * Serializer containing only parent and child ids for a learning path relationship
 * @export
 * @interface MicroLearningPathRelationship
 */
export interface MicroLearningPathRelationship {
  /**
   *
   * @type {number}
   * @memberof MicroLearningPathRelationship
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof MicroLearningPathRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof MicroLearningPathRelationship
   */
  child: number
}
/**
 * Serializer containing only parent and child ids for a user list relationship
 * @export
 * @interface MicroUserListRelationship
 */
export interface MicroUserListRelationship {
  /**
   *
   * @type {number}
   * @memberof MicroUserListRelationship
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof MicroUserListRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof MicroUserListRelationship
   */
  child: number
}
/**
 *
 * @export
 * @interface PaginatedContentFileList
 */
export interface PaginatedContentFileList {
  /**
   *
   * @type {number}
   * @memberof PaginatedContentFileList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedContentFileList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedContentFileList
   */
  previous?: string | null
  /**
   *
   * @type {Array<ContentFile>}
   * @memberof PaginatedContentFileList
   */
  results?: Array<ContentFile>
}
/**
 *
 * @export
 * @interface PaginatedLearningPathRelationshipList
 */
export interface PaginatedLearningPathRelationshipList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningPathRelationshipList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathRelationshipList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathRelationshipList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningPathRelationship>}
   * @memberof PaginatedLearningPathRelationshipList
   */
  results?: Array<LearningPathRelationship>
}
/**
 *
 * @export
 * @interface PaginatedLearningPathResourceList
 */
export interface PaginatedLearningPathResourceList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningPathResourceList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathResourceList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathResourceList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningPathResource>}
   * @memberof PaginatedLearningPathResourceList
   */
  results?: Array<LearningPathResource>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceChildList
 */
export interface PaginatedLearningResourceChildList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceChildList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceChildList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceChildList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResourceChild>}
   * @memberof PaginatedLearningResourceChildList
   */
  results?: Array<LearningResourceChild>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceList
 */
export interface PaginatedLearningResourceList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResource>}
   * @memberof PaginatedLearningResourceList
   */
  results?: Array<LearningResource>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceTopicList
 */
export interface PaginatedLearningResourceTopicList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceTopicList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceTopicList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceTopicList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof PaginatedLearningResourceTopicList
   */
  results?: Array<LearningResourceTopic>
}
/**
 *
 * @export
 * @interface PaginatedStaffPostList
 */
export interface PaginatedStaffPostList {
  /**
   *
   * @type {number}
   * @memberof PaginatedStaffPostList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedStaffPostList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedStaffPostList
   */
  previous?: string | null
  /**
   *
   * @type {Array<StaffPost>}
   * @memberof PaginatedStaffPostList
   */
  results?: Array<StaffPost>
}
/**
 *
 * @export
 * @interface PaginatedUserListList
 */
export interface PaginatedUserListList {
  /**
   *
   * @type {number}
   * @memberof PaginatedUserListList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedUserListList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedUserListList
   */
  previous?: string | null
  /**
   *
   * @type {Array<UserList>}
   * @memberof PaginatedUserListList
   */
  results?: Array<UserList>
}
/**
 *
 * @export
 * @interface PaginatedUserListRelationshipList
 */
export interface PaginatedUserListRelationshipList {
  /**
   *
   * @type {number}
   * @memberof PaginatedUserListRelationshipList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedUserListRelationshipList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedUserListRelationshipList
   */
  previous?: string | null
  /**
   *
   * @type {Array<UserListRelationship>}
   * @memberof PaginatedUserListRelationshipList
   */
  results?: Array<UserListRelationship>
}
/**
 * Specialized serializer for a LearningPath relationship
 * @export
 * @interface PatchedLearningPathRelationshipRequest
 */
export interface PatchedLearningPathRelationshipRequest {
  /**
   *
   * @type {number}
   * @memberof PatchedLearningPathRelationshipRequest
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof PatchedLearningPathRelationshipRequest
   */
  parent?: number
  /**
   *
   * @type {number}
   * @memberof PatchedLearningPathRelationshipRequest
   */
  child?: number
}
/**
 * CRUD serializer for LearningPath resources
 * @export
 * @interface PatchedLearningPathResourceRequest
 */
export interface PatchedLearningPathResourceRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof PatchedLearningPathResourceRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  readable_id?: string
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof PatchedLearningPathResourceRequest
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof PatchedLearningPathResourceRequest
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof PatchedLearningPathResourceRequest
   */
  resource_type?: ResourceTypeEnum
}

/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface PatchedStaffPostRequest
 */
export interface PatchedStaffPostRequest {
  /**
   *
   * @type {string}
   * @memberof PatchedStaffPostRequest
   */
  html?: string
  /**
   *
   * @type {string}
   * @memberof PatchedStaffPostRequest
   */
  title?: string
}
/**
 * Serializer for UserListRelationship model
 * @export
 * @interface PatchedUserListRelationshipRequest
 */
export interface PatchedUserListRelationshipRequest {
  /**
   *
   * @type {number}
   * @memberof PatchedUserListRelationshipRequest
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof PatchedUserListRelationshipRequest
   */
  parent?: number
  /**
   *
   * @type {number}
   * @memberof PatchedUserListRelationshipRequest
   */
  child?: number
}
/**
 * Simplified serializer for UserList model.
 * @export
 * @interface PatchedUserListRequest
 */
export interface PatchedUserListRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof PatchedUserListRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof PatchedUserListRequest
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof PatchedUserListRequest
   */
  description?: string
  /**
   *
   * @type {PrivacyLevelEnum}
   * @memberof PatchedUserListRequest
   */
  privacy_level?: PrivacyLevelEnum
}

/**
 * Serializer for Podcasts
 * @export
 * @interface Podcast
 */
export interface Podcast {
  /**
   *
   * @type {number}
   * @memberof Podcast
   */
  id: number
  /**
   * Return the number of episodes in the podcast
   * @type {number}
   * @memberof Podcast
   */
  episode_count: number
  /**
   *
   * @type {string}
   * @memberof Podcast
   */
  apple_podcasts_url?: string | null
  /**
   *
   * @type {string}
   * @memberof Podcast
   */
  google_podcasts_url?: string | null
  /**
   *
   * @type {string}
   * @memberof Podcast
   */
  rss_url?: string | null
}
/**
 * Serializer for PodcastEpisode
 * @export
 * @interface PodcastEpisode
 */
export interface PodcastEpisode {
  /**
   *
   * @type {number}
   * @memberof PodcastEpisode
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof PodcastEpisode
   */
  transcript?: string
  /**
   *
   * @type {string}
   * @memberof PodcastEpisode
   */
  episode_link?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastEpisode
   */
  duration?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastEpisode
   */
  rss?: string | null
}
/**
 * Serializer for PodcastEpisode
 * @export
 * @interface PodcastEpisodeRequest
 */
export interface PodcastEpisodeRequest {
  /**
   *
   * @type {string}
   * @memberof PodcastEpisodeRequest
   */
  transcript?: string
  /**
   *
   * @type {string}
   * @memberof PodcastEpisodeRequest
   */
  episode_link?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastEpisodeRequest
   */
  duration?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastEpisodeRequest
   */
  rss?: string | null
}
/**
 * Serializer for Podcasts
 * @export
 * @interface PodcastRequest
 */
export interface PodcastRequest {
  /**
   *
   * @type {string}
   * @memberof PodcastRequest
   */
  apple_podcasts_url?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastRequest
   */
  google_podcasts_url?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastRequest
   */
  rss_url?: string | null
}
/**
 * * `private` - private * `unlisted` - unlisted
 * @export
 * @enum {string}
 */

export const PrivacyLevelEnum = {
  Private: "private",
  Unlisted: "unlisted",
} as const

export type PrivacyLevelEnum =
  (typeof PrivacyLevelEnum)[keyof typeof PrivacyLevelEnum]

/**
 * Serializer for the Program model
 * @export
 * @interface Program
 */
export interface Program {
  /**
   *
   * @type {Array<LearningResourceBase>}
   * @memberof Program
   */
  courses: Array<LearningResourceBase> | null
}
/**
 * * `course` - course * `program` - program * `learning_path` - learning_path * `podcast` - podcast * `podcast_episode` - podcast_episode
 * @export
 * @enum {string}
 */

export const ResourceTypeEnum = {
  Course: "course",
  Program: "program",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
} as const

export type ResourceTypeEnum =
  (typeof ResourceTypeEnum)[keyof typeof ResourceTypeEnum]

/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface StaffPost
 */
export interface StaffPost {
  /**
   *
   * @type {string}
   * @memberof StaffPost
   */
  html: string
  /**
   *
   * @type {number}
   * @memberof StaffPost
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof StaffPost
   */
  title: string
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface StaffPostRequest
 */
export interface StaffPostRequest {
  /**
   *
   * @type {string}
   * @memberof StaffPostRequest
   */
  html: string
  /**
   *
   * @type {string}
   * @memberof StaffPostRequest
   */
  title: string
}
/**
 * Simplified serializer for UserList model.
 * @export
 * @interface UserList
 */
export interface UserList {
  /**
   *
   * @type {number}
   * @memberof UserList
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof UserList
   */
  topics?: Array<LearningResourceTopic>
  /**
   * Return the number of items in the list
   * @type {number}
   * @memberof UserList
   */
  item_count: number
  /**
   * Return the image of the first item
   * @type {{ [key: string]: any; }}
   * @memberof UserList
   */
  image: { [key: string]: any }
  /**
   *
   * @type {string}
   * @memberof UserList
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof UserList
   */
  description?: string
  /**
   *
   * @type {PrivacyLevelEnum}
   * @memberof UserList
   */
  privacy_level?: PrivacyLevelEnum
  /**
   *
   * @type {number}
   * @memberof UserList
   */
  author: number
}

/**
 * Serializer for UserListRelationship model
 * @export
 * @interface UserListRelationship
 */
export interface UserListRelationship {
  /**
   *
   * @type {number}
   * @memberof UserListRelationship
   */
  id: number
  /**
   *
   * @type {LearningResource}
   * @memberof UserListRelationship
   */
  resource: LearningResource
  /**
   *
   * @type {number}
   * @memberof UserListRelationship
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof UserListRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof UserListRelationship
   */
  child: number
}
/**
 * Serializer for UserListRelationship model
 * @export
 * @interface UserListRelationshipRequest
 */
export interface UserListRelationshipRequest {
  /**
   *
   * @type {number}
   * @memberof UserListRelationshipRequest
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof UserListRelationshipRequest
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof UserListRelationshipRequest
   */
  child: number
}
/**
 * Simplified serializer for UserList model.
 * @export
 * @interface UserListRequest
 */
export interface UserListRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof UserListRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof UserListRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof UserListRequest
   */
  description?: string
  /**
   *
   * @type {PrivacyLevelEnum}
   * @memberof UserListRequest
   */
  privacy_level?: PrivacyLevelEnum
}

/**
 * ContentfilesApi - axios parameter creator
 * @export
 */
export const ContentfilesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Viewset for CpntentFiles
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {number} [run__learning_resource]
     * @param {string} [run__learning_resource__offered_by__name]
     * @param {string} [run__learning_resource__platform]
     * @param {string} [run__learning_resource__readable_id]
     * @param {string} [run__run_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentfilesList: async (
      limit?: number,
      offset?: number,
      run?: number,
      run__learning_resource?: number,
      run__learning_resource__offered_by__name?: string,
      run__learning_resource__platform?: string,
      run__learning_resource__readable_id?: string,
      run__run_id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/contentfiles/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (run !== undefined) {
        localVarQueryParameter["run"] = run
      }

      if (run__learning_resource !== undefined) {
        localVarQueryParameter["run__learning_resource"] =
          run__learning_resource
      }

      if (run__learning_resource__offered_by__name !== undefined) {
        localVarQueryParameter["run__learning_resource__offered_by__name"] =
          run__learning_resource__offered_by__name
      }

      if (run__learning_resource__platform !== undefined) {
        localVarQueryParameter["run__learning_resource__platform"] =
          run__learning_resource__platform
      }

      if (run__learning_resource__readable_id !== undefined) {
        localVarQueryParameter["run__learning_resource__readable_id"] =
          run__learning_resource__readable_id
      }

      if (run__run_id !== undefined) {
        localVarQueryParameter["run__run_id"] = run__run_id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for CpntentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentfilesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("contentfilesRetrieve", "id", id)
      const localVarPath = `/api/v1/contentfiles/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ContentfilesApi - functional programming interface
 * @export
 */
export const ContentfilesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ContentfilesApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for CpntentFiles
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {number} [run__learning_resource]
     * @param {string} [run__learning_resource__offered_by__name]
     * @param {string} [run__learning_resource__platform]
     * @param {string} [run__learning_resource__readable_id]
     * @param {string} [run__run_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contentfilesList(
      limit?: number,
      offset?: number,
      run?: number,
      run__learning_resource?: number,
      run__learning_resource__offered_by__name?: string,
      run__learning_resource__platform?: string,
      run__learning_resource__readable_id?: string,
      run__run_id?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedContentFileList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contentfilesList(
          limit,
          offset,
          run,
          run__learning_resource,
          run__learning_resource__offered_by__name,
          run__learning_resource__platform,
          run__learning_resource__readable_id,
          run__run_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for CpntentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contentfilesRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentFile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contentfilesRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * ContentfilesApi - factory interface
 * @export
 */
export const ContentfilesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ContentfilesApiFp(configuration)
  return {
    /**
     * Viewset for CpntentFiles
     * @param {ContentfilesApiContentfilesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentfilesList(
      requestParameters: ContentfilesApiContentfilesListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedContentFileList> {
      return localVarFp
        .contentfilesList(
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.run,
          requestParameters.run__learning_resource,
          requestParameters.run__learning_resource__offered_by__name,
          requestParameters.run__learning_resource__platform,
          requestParameters.run__learning_resource__readable_id,
          requestParameters.run__run_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for CpntentFiles
     * @param {ContentfilesApiContentfilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentfilesRetrieve(
      requestParameters: ContentfilesApiContentfilesRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<ContentFile> {
      return localVarFp
        .contentfilesRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for contentfilesList operation in ContentfilesApi.
 * @export
 * @interface ContentfilesApiContentfilesListRequest
 */
export interface ContentfilesApiContentfilesListRequest {
  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ContentfilesApiContentfilesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ContentfilesApiContentfilesList
   */
  readonly offset?: number

  /**
   *
   * @type {number}
   * @memberof ContentfilesApiContentfilesList
   */
  readonly run?: number

  /**
   *
   * @type {number}
   * @memberof ContentfilesApiContentfilesList
   */
  readonly run__learning_resource?: number

  /**
   *
   * @type {string}
   * @memberof ContentfilesApiContentfilesList
   */
  readonly run__learning_resource__offered_by__name?: string

  /**
   *
   * @type {string}
   * @memberof ContentfilesApiContentfilesList
   */
  readonly run__learning_resource__platform?: string

  /**
   *
   * @type {string}
   * @memberof ContentfilesApiContentfilesList
   */
  readonly run__learning_resource__readable_id?: string

  /**
   *
   * @type {string}
   * @memberof ContentfilesApiContentfilesList
   */
  readonly run__run_id?: string
}

/**
 * Request parameters for contentfilesRetrieve operation in ContentfilesApi.
 * @export
 * @interface ContentfilesApiContentfilesRetrieveRequest
 */
export interface ContentfilesApiContentfilesRetrieveRequest {
  /**
   * A unique integer value identifying this contentfile.
   * @type {number}
   * @memberof ContentfilesApiContentfilesRetrieve
   */
  readonly id: number
}

/**
 * ContentfilesApi - object-oriented interface
 * @export
 * @class ContentfilesApi
 * @extends {BaseAPI}
 */
export class ContentfilesApi extends BaseAPI {
  /**
   * Viewset for CpntentFiles
   * @param {ContentfilesApiContentfilesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentfilesApi
   */
  public contentfilesList(
    requestParameters: ContentfilesApiContentfilesListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return ContentfilesApiFp(this.configuration)
      .contentfilesList(
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.run,
        requestParameters.run__learning_resource,
        requestParameters.run__learning_resource__offered_by__name,
        requestParameters.run__learning_resource__platform,
        requestParameters.run__learning_resource__readable_id,
        requestParameters.run__run_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for CpntentFiles
   * @param {ContentfilesApiContentfilesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentfilesApi
   */
  public contentfilesRetrieve(
    requestParameters: ContentfilesApiContentfilesRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return ContentfilesApiFp(this.configuration)
      .contentfilesRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} run__learning_resource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [run__run_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesContentfilesList: async (
      run__learning_resource: number,
      limit?: number,
      offset?: number,
      run?: number,
      run__run_id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'run__learning_resource' is not null or undefined
      assertParamExists(
        "coursesContentfilesList",
        "run__learning_resource",
        run__learning_resource,
      )
      const localVarPath =
        `/api/v1/courses/{run__learning_resource}/contentfiles/`.replace(
          `{${"run__learning_resource"}}`,
          encodeURIComponent(String(run__learning_resource)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (run !== undefined) {
        localVarQueryParameter["run"] = run
      }

      if (run__run_id !== undefined) {
        localVarQueryParameter["run__run_id"] = run__run_id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} run__learning_resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesContentfilesRetrieve: async (
      id: number,
      run__learning_resource: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("coursesContentfilesRetrieve", "id", id)
      // verify required parameter 'run__learning_resource' is not null or undefined
      assertParamExists(
        "coursesContentfilesRetrieve",
        "run__learning_resource",
        run__learning_resource,
      )
      const localVarPath =
        `/api/v1/courses/{run__learning_resource}/contentfiles/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(
            `{${"run__learning_resource"}}`,
            encodeURIComponent(String(run__learning_resource)),
          )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesNewList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("coursesRetrieve", "id", id)
      const localVarPath = `/api/v1/courses/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesUpcomingList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} run__learning_resource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [run__run_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesContentfilesList(
      run__learning_resource: number,
      limit?: number,
      offset?: number,
      run?: number,
      run__run_id?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedContentFileList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesContentfilesList(
          run__learning_resource,
          limit,
          offset,
          run,
          run__run_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} run__learning_resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesContentfilesRetrieve(
      id: number,
      run__learning_resource: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentFile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesContentfilesRetrieve(
          id,
          run__learning_resource,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesList(
        audience,
        limit,
        offered_by,
        offered_by__name,
        offset,
        ordering,
        platform__audience,
        resource_type,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesNewList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesNewList(
        audience,
        limit,
        offered_by,
        offered_by__name,
        offset,
        ordering,
        platform__audience,
        resource_type,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesRetrieve(
        id,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesUpcomingList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesUpcomingList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CoursesApiFp(configuration)
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {CoursesApiCoursesContentfilesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesContentfilesList(
      requestParameters: CoursesApiCoursesContentfilesListRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedContentFileList> {
      return localVarFp
        .coursesContentfilesList(
          requestParameters.run__learning_resource,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.run,
          requestParameters.run__run_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {CoursesApiCoursesContentfilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesContentfilesRetrieve(
      requestParameters: CoursesApiCoursesContentfilesRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<ContentFile> {
      return localVarFp
        .coursesContentfilesRetrieve(
          requestParameters.id,
          requestParameters.run__learning_resource,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {CoursesApiCoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesList(
      requestParameters: CoursesApiCoursesListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .coursesList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {CoursesApiCoursesNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesNewList(
      requestParameters: CoursesApiCoursesNewListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .coursesNewList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {CoursesApiCoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesRetrieve(
      requestParameters: CoursesApiCoursesRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .coursesRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {CoursesApiCoursesUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesUpcomingList(
      requestParameters: CoursesApiCoursesUpcomingListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .coursesUpcomingList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for coursesContentfilesList operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesContentfilesListRequest
 */
export interface CoursesApiCoursesContentfilesListRequest {
  /**
   *
   * @type {number}
   * @memberof CoursesApiCoursesContentfilesList
   */
  readonly run__learning_resource: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof CoursesApiCoursesContentfilesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof CoursesApiCoursesContentfilesList
   */
  readonly offset?: number

  /**
   *
   * @type {number}
   * @memberof CoursesApiCoursesContentfilesList
   */
  readonly run?: number

  /**
   *
   * @type {string}
   * @memberof CoursesApiCoursesContentfilesList
   */
  readonly run__run_id?: string
}

/**
 * Request parameters for coursesContentfilesRetrieve operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesContentfilesRetrieveRequest
 */
export interface CoursesApiCoursesContentfilesRetrieveRequest {
  /**
   * A unique integer value identifying this contentfile.
   * @type {number}
   * @memberof CoursesApiCoursesContentfilesRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof CoursesApiCoursesContentfilesRetrieve
   */
  readonly run__learning_resource: number
}

/**
 * Request parameters for coursesList operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesListRequest
 */
export interface CoursesApiCoursesListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof CoursesApiCoursesList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof CoursesApiCoursesList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof CoursesApiCoursesList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof CoursesApiCoursesList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof CoursesApiCoursesList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof CoursesApiCoursesList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof CoursesApiCoursesList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof CoursesApiCoursesList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for coursesNewList operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesNewListRequest
 */
export interface CoursesApiCoursesNewListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof CoursesApiCoursesNewList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof CoursesApiCoursesNewList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof CoursesApiCoursesNewList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof CoursesApiCoursesNewList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof CoursesApiCoursesNewList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof CoursesApiCoursesNewList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof CoursesApiCoursesNewList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof CoursesApiCoursesNewList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for coursesRetrieve operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesRetrieveRequest
 */
export interface CoursesApiCoursesRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof CoursesApiCoursesRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for coursesUpcomingList operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesUpcomingListRequest
 */
export interface CoursesApiCoursesUpcomingListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof CoursesApiCoursesUpcomingList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof CoursesApiCoursesUpcomingList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof CoursesApiCoursesUpcomingList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof CoursesApiCoursesUpcomingList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof CoursesApiCoursesUpcomingList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof CoursesApiCoursesUpcomingList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof CoursesApiCoursesUpcomingList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof CoursesApiCoursesUpcomingList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
  /**
   * Viewset for LearningResource nested ContentFiles
   * @param {CoursesApiCoursesContentfilesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesContentfilesList(
    requestParameters: CoursesApiCoursesContentfilesListRequest,
    options?: AxiosRequestConfig,
  ) {
    return CoursesApiFp(this.configuration)
      .coursesContentfilesList(
        requestParameters.run__learning_resource,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.run,
        requestParameters.run__run_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource nested ContentFiles
   * @param {CoursesApiCoursesContentfilesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesContentfilesRetrieve(
    requestParameters: CoursesApiCoursesContentfilesRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return CoursesApiFp(this.configuration)
      .coursesContentfilesRetrieve(
        requestParameters.id,
        requestParameters.run__learning_resource,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {CoursesApiCoursesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesList(
    requestParameters: CoursesApiCoursesListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return CoursesApiFp(this.configuration)
      .coursesList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {CoursesApiCoursesNewListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesNewList(
    requestParameters: CoursesApiCoursesNewListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return CoursesApiFp(this.configuration)
      .coursesNewList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {CoursesApiCoursesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesRetrieve(
    requestParameters: CoursesApiCoursesRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return CoursesApiFp(this.configuration)
      .coursesRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {CoursesApiCoursesUpcomingListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesUpcomingList(
    requestParameters: CoursesApiCoursesUpcomingListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return CoursesApiFp(this.configuration)
      .coursesUpcomingList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * LearningResourcesApi - axios parameter creator
 * @export
 */
export const LearningResourcesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} run__learning_resource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [run__run_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesContentfilesList: async (
      run__learning_resource: number,
      limit?: number,
      offset?: number,
      run?: number,
      run__run_id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'run__learning_resource' is not null or undefined
      assertParamExists(
        "learningResourcesContentfilesList",
        "run__learning_resource",
        run__learning_resource,
      )
      const localVarPath =
        `/api/v1/learning_resources/{run__learning_resource}/contentfiles/`.replace(
          `{${"run__learning_resource"}}`,
          encodeURIComponent(String(run__learning_resource)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (run !== undefined) {
        localVarQueryParameter["run"] = run
      }

      if (run__run_id !== undefined) {
        localVarQueryParameter["run__run_id"] = run__run_id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} run__learning_resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesContentfilesRetrieve: async (
      id: number,
      run__learning_resource: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesContentfilesRetrieve", "id", id)
      // verify required parameter 'run__learning_resource' is not null or undefined
      assertParamExists(
        "learningResourcesContentfilesRetrieve",
        "run__learning_resource",
        run__learning_resource,
      )
      const localVarPath =
        `/api/v1/learning_resources/{run__learning_resource}/contentfiles/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(
            `{${"run__learning_resource"}}`,
            encodeURIComponent(String(run__learning_resource)),
          )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} parent_id
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesItemsList: async (
      parent_id: number,
      limit?: number,
      offset?: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("learningResourcesItemsList", "parent_id", parent_id)
      const localVarPath =
        `/api/v1/learning_resources/{parent_id}/items/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parent_id)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesItemsRetrieve: async (
      id: number,
      parent_id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesItemsRetrieve", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists(
        "learningResourcesItemsRetrieve",
        "parent_id",
        parent_id,
      )
      const localVarPath = `/api/v1/learning_resources/{parent_id}/items/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesNewList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesRetrieve", "id", id)
      const localVarPath = `/api/v1/learning_resources/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesUpcomingList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LearningResourcesApi - functional programming interface
 * @export
 */
export const LearningResourcesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LearningResourcesApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} run__learning_resource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [run__run_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesContentfilesList(
      run__learning_resource: number,
      limit?: number,
      offset?: number,
      run?: number,
      run__run_id?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedContentFileList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesContentfilesList(
          run__learning_resource,
          limit,
          offset,
          run,
          run__run_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} run__learning_resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesContentfilesRetrieve(
      id: number,
      run__learning_resource: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentFile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesContentfilesRetrieve(
          id,
          run__learning_resource,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} parent_id
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesItemsList(
      parent_id: number,
      limit?: number,
      offset?: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceChildList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesItemsList(
          parent_id,
          limit,
          offset,
          ordering,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesItemsRetrieve(
      id: number,
      parent_id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesItemsRetrieve(
          id,
          parent_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesNewList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesNewList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesUpcomingList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesUpcomingList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * LearningResourcesApi - factory interface
 * @export
 */
export const LearningResourcesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LearningResourcesApiFp(configuration)
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {LearningResourcesApiLearningResourcesContentfilesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesContentfilesList(
      requestParameters: LearningResourcesApiLearningResourcesContentfilesListRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedContentFileList> {
      return localVarFp
        .learningResourcesContentfilesList(
          requestParameters.run__learning_resource,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.run,
          requestParameters.run__run_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {LearningResourcesApiLearningResourcesContentfilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesContentfilesRetrieve(
      requestParameters: LearningResourcesApiLearningResourcesContentfilesRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<ContentFile> {
      return localVarFp
        .learningResourcesContentfilesRetrieve(
          requestParameters.id,
          requestParameters.run__learning_resource,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource related resources
     * @param {LearningResourcesApiLearningResourcesItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesItemsList(
      requestParameters: LearningResourcesApiLearningResourcesItemsListRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceChildList> {
      return localVarFp
        .learningResourcesItemsList(
          requestParameters.parent_id,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.ordering,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource related resources
     * @param {LearningResourcesApiLearningResourcesItemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesItemsRetrieve(
      requestParameters: LearningResourcesApiLearningResourcesItemsRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .learningResourcesItemsRetrieve(
          requestParameters.id,
          requestParameters.parent_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningResourcesApiLearningResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesList(
      requestParameters: LearningResourcesApiLearningResourcesListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningResourcesList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {LearningResourcesApiLearningResourcesNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesNewList(
      requestParameters: LearningResourcesApiLearningResourcesNewListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningResourcesNewList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {LearningResourcesApiLearningResourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesRetrieve(
      requestParameters: LearningResourcesApiLearningResourcesRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .learningResourcesRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {LearningResourcesApiLearningResourcesUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesUpcomingList(
      requestParameters: LearningResourcesApiLearningResourcesUpcomingListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningResourcesUpcomingList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for learningResourcesContentfilesList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesContentfilesListRequest
 */
export interface LearningResourcesApiLearningResourcesContentfilesListRequest {
  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesContentfilesList
   */
  readonly run__learning_resource: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesContentfilesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesContentfilesList
   */
  readonly offset?: number

  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesContentfilesList
   */
  readonly run?: number

  /**
   *
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesContentfilesList
   */
  readonly run__run_id?: string
}

/**
 * Request parameters for learningResourcesContentfilesRetrieve operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesContentfilesRetrieveRequest
 */
export interface LearningResourcesApiLearningResourcesContentfilesRetrieveRequest {
  /**
   * A unique integer value identifying this contentfile.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesContentfilesRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesContentfilesRetrieve
   */
  readonly run__learning_resource: number
}

/**
 * Request parameters for learningResourcesItemsList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesItemsListRequest
 */
export interface LearningResourcesApiLearningResourcesItemsListRequest {
  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesItemsList
   */
  readonly parent_id: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesItemsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesItemsList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesItemsList
   */
  readonly ordering?: string
}

/**
 * Request parameters for learningResourcesItemsRetrieve operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesItemsRetrieveRequest
 */
export interface LearningResourcesApiLearningResourcesItemsRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesItemsRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesItemsRetrieve
   */
  readonly parent_id: number
}

/**
 * Request parameters for learningResourcesList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesListRequest
 */
export interface LearningResourcesApiLearningResourcesListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for learningResourcesNewList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesNewListRequest
 */
export interface LearningResourcesApiLearningResourcesNewListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof LearningResourcesApiLearningResourcesNewList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesNewList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof LearningResourcesApiLearningResourcesNewList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesNewList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesNewList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesNewList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof LearningResourcesApiLearningResourcesNewList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof LearningResourcesApiLearningResourcesNewList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for learningResourcesRetrieve operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesRetrieveRequest
 */
export interface LearningResourcesApiLearningResourcesRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for learningResourcesUpcomingList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesUpcomingListRequest
 */
export interface LearningResourcesApiLearningResourcesUpcomingListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof LearningResourcesApiLearningResourcesUpcomingList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesUpcomingList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof LearningResourcesApiLearningResourcesUpcomingList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesUpcomingList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesUpcomingList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesUpcomingList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof LearningResourcesApiLearningResourcesUpcomingList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof LearningResourcesApiLearningResourcesUpcomingList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * LearningResourcesApi - object-oriented interface
 * @export
 * @class LearningResourcesApi
 * @extends {BaseAPI}
 */
export class LearningResourcesApi extends BaseAPI {
  /**
   * Viewset for LearningResource nested ContentFiles
   * @param {LearningResourcesApiLearningResourcesContentfilesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesContentfilesList(
    requestParameters: LearningResourcesApiLearningResourcesContentfilesListRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesContentfilesList(
        requestParameters.run__learning_resource,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.run,
        requestParameters.run__run_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource nested ContentFiles
   * @param {LearningResourcesApiLearningResourcesContentfilesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesContentfilesRetrieve(
    requestParameters: LearningResourcesApiLearningResourcesContentfilesRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesContentfilesRetrieve(
        requestParameters.id,
        requestParameters.run__learning_resource,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource related resources
   * @param {LearningResourcesApiLearningResourcesItemsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesItemsList(
    requestParameters: LearningResourcesApiLearningResourcesItemsListRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesItemsList(
        requestParameters.parent_id,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.ordering,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource related resources
   * @param {LearningResourcesApiLearningResourcesItemsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesItemsRetrieve(
    requestParameters: LearningResourcesApiLearningResourcesItemsRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesItemsRetrieve(
        requestParameters.id,
        requestParameters.parent_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {LearningResourcesApiLearningResourcesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesList(
    requestParameters: LearningResourcesApiLearningResourcesListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {LearningResourcesApiLearningResourcesNewListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesNewList(
    requestParameters: LearningResourcesApiLearningResourcesNewListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesNewList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {LearningResourcesApiLearningResourcesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesRetrieve(
    requestParameters: LearningResourcesApiLearningResourcesRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {LearningResourcesApiLearningResourcesUpcomingListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesUpcomingList(
    requestParameters: LearningResourcesApiLearningResourcesUpcomingListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesUpcomingList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * LearningpathsApi - axios parameter creator
 * @export
 */
export const LearningpathsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningPathResourceRequest} LearningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsCreate: async (
      LearningPathResourceRequest: LearningPathResourceRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'LearningPathResourceRequest' is not null or undefined
      assertParamExists(
        "learningpathsCreate",
        "LearningPathResourceRequest",
        LearningPathResourceRequest,
      )
      const localVarPath = `/api/v1/learningpaths/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        LearningPathResourceRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsDestroy", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsNewList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {PatchedLearningPathResourceRequest} [PatchedLearningPathResourceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsPartialUpdate: async (
      id: number,
      PatchedLearningPathResourceRequest?: PatchedLearningPathResourceRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsPartialUpdate", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedLearningPathResourceRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parent_id
     * @param {LearningPathRelationshipRequest} LearningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesCreate: async (
      parent_id: number,
      LearningPathRelationshipRequest: LearningPathRelationshipRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("learningpathsResourcesCreate", "parent_id", parent_id)
      // verify required parameter 'LearningPathRelationshipRequest' is not null or undefined
      assertParamExists(
        "learningpathsResourcesCreate",
        "LearningPathRelationshipRequest",
        LearningPathRelationshipRequest,
      )
      const localVarPath =
        `/api/v1/learningpaths/{parent_id}/resources/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parent_id)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        LearningPathRelationshipRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesDestroy: async (
      id: number,
      parent_id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesDestroy", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("learningpathsResourcesDestroy", "parent_id", parent_id)
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parent_id
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesList: async (
      parent_id: number,
      limit?: number,
      offset?: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("learningpathsResourcesList", "parent_id", parent_id)
      const localVarPath =
        `/api/v1/learningpaths/{parent_id}/resources/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parent_id)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {PatchedLearningPathRelationshipRequest} [PatchedLearningPathRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesPartialUpdate: async (
      id: number,
      parent_id: number,
      PatchedLearningPathRelationshipRequest?: PatchedLearningPathRelationshipRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesPartialUpdate", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists(
        "learningpathsResourcesPartialUpdate",
        "parent_id",
        parent_id,
      )
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedLearningPathRelationshipRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesRetrieve: async (
      id: number,
      parent_id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesRetrieve", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists(
        "learningpathsResourcesRetrieve",
        "parent_id",
        parent_id,
      )
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {LearningPathRelationshipRequest} LearningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesUpdate: async (
      id: number,
      parent_id: number,
      LearningPathRelationshipRequest: LearningPathRelationshipRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesUpdate", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("learningpathsResourcesUpdate", "parent_id", parent_id)
      // verify required parameter 'LearningPathRelationshipRequest' is not null or undefined
      assertParamExists(
        "learningpathsResourcesUpdate",
        "LearningPathRelationshipRequest",
        LearningPathRelationshipRequest,
      )
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        LearningPathRelationshipRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsRetrieve", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpcomingList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {LearningPathResourceRequest} LearningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpdate: async (
      id: number,
      LearningPathResourceRequest: LearningPathResourceRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsUpdate", "id", id)
      // verify required parameter 'LearningPathResourceRequest' is not null or undefined
      assertParamExists(
        "learningpathsUpdate",
        "LearningPathResourceRequest",
        LearningPathResourceRequest,
      )
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        LearningPathResourceRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LearningpathsApi - functional programming interface
 * @export
 */
export const LearningpathsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LearningpathsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningPathResourceRequest} LearningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsCreate(
      LearningPathResourceRequest: LearningPathResourceRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsCreate(
          LearningPathResourceRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsDestroy(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsDestroy(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningPathResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsNewList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsNewList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {PatchedLearningPathResourceRequest} [PatchedLearningPathResourceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsPartialUpdate(
      id: number,
      PatchedLearningPathResourceRequest?: PatchedLearningPathResourceRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsPartialUpdate(
          id,
          PatchedLearningPathResourceRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parent_id
     * @param {LearningPathRelationshipRequest} LearningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesCreate(
      parent_id: number,
      LearningPathRelationshipRequest: LearningPathRelationshipRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningPathRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesCreate(
          parent_id,
          LearningPathRelationshipRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesDestroy(
      id: number,
      parent_id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesDestroy(
          id,
          parent_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parent_id
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesList(
      parent_id: number,
      limit?: number,
      offset?: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningPathRelationshipList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesList(
          parent_id,
          limit,
          offset,
          ordering,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {PatchedLearningPathRelationshipRequest} [PatchedLearningPathRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesPartialUpdate(
      id: number,
      parent_id: number,
      PatchedLearningPathRelationshipRequest?: PatchedLearningPathRelationshipRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningPathRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesPartialUpdate(
          id,
          parent_id,
          PatchedLearningPathRelationshipRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesRetrieve(
      id: number,
      parent_id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningPathRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesRetrieve(
          id,
          parent_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {LearningPathRelationshipRequest} LearningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesUpdate(
      id: number,
      parent_id: number,
      LearningPathRelationshipRequest: LearningPathRelationshipRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningPathRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesUpdate(
          id,
          parent_id,
          LearningPathRelationshipRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsUpcomingList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsUpcomingList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {LearningPathResourceRequest} LearningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsUpdate(
      id: number,
      LearningPathResourceRequest: LearningPathResourceRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsUpdate(
          id,
          LearningPathResourceRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * LearningpathsApi - factory interface
 * @export
 */
export const LearningpathsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LearningpathsApiFp(configuration)
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsCreate(
      requestParameters: LearningpathsApiLearningpathsCreateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsCreate(
          requestParameters.LearningPathResourceRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsDestroy(
      requestParameters: LearningpathsApiLearningpathsDestroyRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .learningpathsDestroy(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningpathsApiLearningpathsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsList(
      requestParameters: LearningpathsApiLearningpathsListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningPathResourceList> {
      return localVarFp
        .learningpathsList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {LearningpathsApiLearningpathsNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsNewList(
      requestParameters: LearningpathsApiLearningpathsNewListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningpathsNewList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsPartialUpdate(
      requestParameters: LearningpathsApiLearningpathsPartialUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsPartialUpdate(
          requestParameters.id,
          requestParameters.PatchedLearningPathResourceRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesCreate(
      requestParameters: LearningpathsApiLearningpathsResourcesCreateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningPathRelationship> {
      return localVarFp
        .learningpathsResourcesCreate(
          requestParameters.parent_id,
          requestParameters.LearningPathRelationshipRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesDestroy(
      requestParameters: LearningpathsApiLearningpathsResourcesDestroyRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .learningpathsResourcesDestroy(
          requestParameters.id,
          requestParameters.parent_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesList(
      requestParameters: LearningpathsApiLearningpathsResourcesListRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningPathRelationshipList> {
      return localVarFp
        .learningpathsResourcesList(
          requestParameters.parent_id,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.ordering,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesPartialUpdate(
      requestParameters: LearningpathsApiLearningpathsResourcesPartialUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningPathRelationship> {
      return localVarFp
        .learningpathsResourcesPartialUpdate(
          requestParameters.id,
          requestParameters.parent_id,
          requestParameters.PatchedLearningPathRelationshipRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesRetrieve(
      requestParameters: LearningpathsApiLearningpathsResourcesRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningPathRelationship> {
      return localVarFp
        .learningpathsResourcesRetrieve(
          requestParameters.id,
          requestParameters.parent_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesUpdate(
      requestParameters: LearningpathsApiLearningpathsResourcesUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningPathRelationship> {
      return localVarFp
        .learningpathsResourcesUpdate(
          requestParameters.id,
          requestParameters.parent_id,
          requestParameters.LearningPathRelationshipRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {LearningpathsApiLearningpathsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsRetrieve(
      requestParameters: LearningpathsApiLearningpathsRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {LearningpathsApiLearningpathsUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpcomingList(
      requestParameters: LearningpathsApiLearningpathsUpcomingListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningpathsUpcomingList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpdate(
      requestParameters: LearningpathsApiLearningpathsUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsUpdate(
          requestParameters.id,
          requestParameters.LearningPathResourceRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for learningpathsCreate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsCreateRequest
 */
export interface LearningpathsApiLearningpathsCreateRequest {
  /**
   *
   * @type {LearningPathResourceRequest}
   * @memberof LearningpathsApiLearningpathsCreate
   */
  readonly LearningPathResourceRequest: LearningPathResourceRequest
}

/**
 * Request parameters for learningpathsDestroy operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsDestroyRequest
 */
export interface LearningpathsApiLearningpathsDestroyRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsDestroy
   */
  readonly id: number
}

/**
 * Request parameters for learningpathsList operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsListRequest
 */
export interface LearningpathsApiLearningpathsListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for learningpathsNewList operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsNewListRequest
 */
export interface LearningpathsApiLearningpathsNewListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof LearningpathsApiLearningpathsNewList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsNewList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof LearningpathsApiLearningpathsNewList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof LearningpathsApiLearningpathsNewList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsNewList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof LearningpathsApiLearningpathsNewList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof LearningpathsApiLearningpathsNewList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof LearningpathsApiLearningpathsNewList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for learningpathsPartialUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsPartialUpdateRequest
 */
export interface LearningpathsApiLearningpathsPartialUpdateRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {PatchedLearningPathResourceRequest}
   * @memberof LearningpathsApiLearningpathsPartialUpdate
   */
  readonly PatchedLearningPathResourceRequest?: PatchedLearningPathResourceRequest
}

/**
 * Request parameters for learningpathsResourcesCreate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesCreateRequest
 */
export interface LearningpathsApiLearningpathsResourcesCreateRequest {
  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesCreate
   */
  readonly parent_id: number

  /**
   *
   * @type {LearningPathRelationshipRequest}
   * @memberof LearningpathsApiLearningpathsResourcesCreate
   */
  readonly LearningPathRelationshipRequest: LearningPathRelationshipRequest
}

/**
 * Request parameters for learningpathsResourcesDestroy operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesDestroyRequest
 */
export interface LearningpathsApiLearningpathsResourcesDestroyRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesDestroy
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesDestroy
   */
  readonly parent_id: number
}

/**
 * Request parameters for learningpathsResourcesList operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesListRequest
 */
export interface LearningpathsApiLearningpathsResourcesListRequest {
  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesList
   */
  readonly parent_id: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof LearningpathsApiLearningpathsResourcesList
   */
  readonly ordering?: string
}

/**
 * Request parameters for learningpathsResourcesPartialUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesPartialUpdateRequest
 */
export interface LearningpathsApiLearningpathsResourcesPartialUpdateRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
   */
  readonly parent_id: number

  /**
   *
   * @type {PatchedLearningPathRelationshipRequest}
   * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
   */
  readonly PatchedLearningPathRelationshipRequest?: PatchedLearningPathRelationshipRequest
}

/**
 * Request parameters for learningpathsResourcesRetrieve operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesRetrieveRequest
 */
export interface LearningpathsApiLearningpathsResourcesRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesRetrieve
   */
  readonly parent_id: number
}

/**
 * Request parameters for learningpathsResourcesUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesUpdateRequest
 */
export interface LearningpathsApiLearningpathsResourcesUpdateRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesUpdate
   */
  readonly parent_id: number

  /**
   *
   * @type {LearningPathRelationshipRequest}
   * @memberof LearningpathsApiLearningpathsResourcesUpdate
   */
  readonly LearningPathRelationshipRequest: LearningPathRelationshipRequest
}

/**
 * Request parameters for learningpathsRetrieve operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsRetrieveRequest
 */
export interface LearningpathsApiLearningpathsRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for learningpathsUpcomingList operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsUpcomingListRequest
 */
export interface LearningpathsApiLearningpathsUpcomingListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof LearningpathsApiLearningpathsUpcomingList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsUpcomingList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof LearningpathsApiLearningpathsUpcomingList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof LearningpathsApiLearningpathsUpcomingList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsUpcomingList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof LearningpathsApiLearningpathsUpcomingList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof LearningpathsApiLearningpathsUpcomingList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof LearningpathsApiLearningpathsUpcomingList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for learningpathsUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsUpdateRequest
 */
export interface LearningpathsApiLearningpathsUpdateRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsUpdate
   */
  readonly id: number

  /**
   *
   * @type {LearningPathResourceRequest}
   * @memberof LearningpathsApiLearningpathsUpdate
   */
  readonly LearningPathResourceRequest: LearningPathResourceRequest
}

/**
 * LearningpathsApi - object-oriented interface
 * @export
 * @class LearningpathsApi
 * @extends {BaseAPI}
 */
export class LearningpathsApi extends BaseAPI {
  /**
   * Viewset for LearningPaths
   * @param {LearningpathsApiLearningpathsCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsCreate(
    requestParameters: LearningpathsApiLearningpathsCreateRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsCreate(
        requestParameters.LearningPathResourceRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {LearningpathsApiLearningpathsDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsDestroy(
    requestParameters: LearningpathsApiLearningpathsDestroyRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsDestroy(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {LearningpathsApiLearningpathsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsList(
    requestParameters: LearningpathsApiLearningpathsListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {LearningpathsApiLearningpathsNewListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsNewList(
    requestParameters: LearningpathsApiLearningpathsNewListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsNewList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {LearningpathsApiLearningpathsPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsPartialUpdate(
    requestParameters: LearningpathsApiLearningpathsPartialUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsPartialUpdate(
        requestParameters.id,
        requestParameters.PatchedLearningPathResourceRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {LearningpathsApiLearningpathsResourcesCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesCreate(
    requestParameters: LearningpathsApiLearningpathsResourcesCreateRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesCreate(
        requestParameters.parent_id,
        requestParameters.LearningPathRelationshipRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {LearningpathsApiLearningpathsResourcesDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesDestroy(
    requestParameters: LearningpathsApiLearningpathsResourcesDestroyRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesDestroy(
        requestParameters.id,
        requestParameters.parent_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {LearningpathsApiLearningpathsResourcesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesList(
    requestParameters: LearningpathsApiLearningpathsResourcesListRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesList(
        requestParameters.parent_id,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.ordering,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {LearningpathsApiLearningpathsResourcesPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesPartialUpdate(
    requestParameters: LearningpathsApiLearningpathsResourcesPartialUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesPartialUpdate(
        requestParameters.id,
        requestParameters.parent_id,
        requestParameters.PatchedLearningPathRelationshipRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {LearningpathsApiLearningpathsResourcesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesRetrieve(
    requestParameters: LearningpathsApiLearningpathsResourcesRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesRetrieve(
        requestParameters.id,
        requestParameters.parent_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {LearningpathsApiLearningpathsResourcesUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesUpdate(
    requestParameters: LearningpathsApiLearningpathsResourcesUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesUpdate(
        requestParameters.id,
        requestParameters.parent_id,
        requestParameters.LearningPathRelationshipRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {LearningpathsApiLearningpathsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsRetrieve(
    requestParameters: LearningpathsApiLearningpathsRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {LearningpathsApiLearningpathsUpcomingListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsUpcomingList(
    requestParameters: LearningpathsApiLearningpathsUpcomingListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsUpcomingList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {LearningpathsApiLearningpathsUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsUpdate(
    requestParameters: LearningpathsApiLearningpathsUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsUpdate(
        requestParameters.id,
        requestParameters.LearningPathResourceRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PodcastEpisodesApi - axios parameter creator
 * @export
 */
export const PodcastEpisodesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcast_episodes/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesNewList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcast_episodes/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("podcastEpisodesRetrieve", "id", id)
      const localVarPath = `/api/v1/podcast_episodes/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesUpcomingList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcast_episodes/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PodcastEpisodesApi - functional programming interface
 * @export
 */
export const PodcastEpisodesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PodcastEpisodesApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastEpisodesList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastEpisodesList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastEpisodesNewList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastEpisodesNewList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastEpisodesRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastEpisodesRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastEpisodesUpcomingList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastEpisodesUpcomingList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * PodcastEpisodesApi - factory interface
 * @export
 */
export const PodcastEpisodesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PodcastEpisodesApiFp(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {PodcastEpisodesApiPodcastEpisodesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesList(
      requestParameters: PodcastEpisodesApiPodcastEpisodesListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastEpisodesList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {PodcastEpisodesApiPodcastEpisodesNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesNewList(
      requestParameters: PodcastEpisodesApiPodcastEpisodesNewListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastEpisodesNewList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {PodcastEpisodesApiPodcastEpisodesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesRetrieve(
      requestParameters: PodcastEpisodesApiPodcastEpisodesRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .podcastEpisodesRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {PodcastEpisodesApiPodcastEpisodesUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesUpcomingList(
      requestParameters: PodcastEpisodesApiPodcastEpisodesUpcomingListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastEpisodesUpcomingList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for podcastEpisodesList operation in PodcastEpisodesApi.
 * @export
 * @interface PodcastEpisodesApiPodcastEpisodesListRequest
 */
export interface PodcastEpisodesApiPodcastEpisodesListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof PodcastEpisodesApiPodcastEpisodesList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof PodcastEpisodesApiPodcastEpisodesList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof PodcastEpisodesApiPodcastEpisodesList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof PodcastEpisodesApiPodcastEpisodesList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof PodcastEpisodesApiPodcastEpisodesList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof PodcastEpisodesApiPodcastEpisodesList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof PodcastEpisodesApiPodcastEpisodesList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof PodcastEpisodesApiPodcastEpisodesList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for podcastEpisodesNewList operation in PodcastEpisodesApi.
 * @export
 * @interface PodcastEpisodesApiPodcastEpisodesNewListRequest
 */
export interface PodcastEpisodesApiPodcastEpisodesNewListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof PodcastEpisodesApiPodcastEpisodesNewList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof PodcastEpisodesApiPodcastEpisodesNewList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof PodcastEpisodesApiPodcastEpisodesNewList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof PodcastEpisodesApiPodcastEpisodesNewList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof PodcastEpisodesApiPodcastEpisodesNewList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof PodcastEpisodesApiPodcastEpisodesNewList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof PodcastEpisodesApiPodcastEpisodesNewList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof PodcastEpisodesApiPodcastEpisodesNewList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for podcastEpisodesRetrieve operation in PodcastEpisodesApi.
 * @export
 * @interface PodcastEpisodesApiPodcastEpisodesRetrieveRequest
 */
export interface PodcastEpisodesApiPodcastEpisodesRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof PodcastEpisodesApiPodcastEpisodesRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for podcastEpisodesUpcomingList operation in PodcastEpisodesApi.
 * @export
 * @interface PodcastEpisodesApiPodcastEpisodesUpcomingListRequest
 */
export interface PodcastEpisodesApiPodcastEpisodesUpcomingListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof PodcastEpisodesApiPodcastEpisodesUpcomingList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof PodcastEpisodesApiPodcastEpisodesUpcomingList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof PodcastEpisodesApiPodcastEpisodesUpcomingList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof PodcastEpisodesApiPodcastEpisodesUpcomingList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof PodcastEpisodesApiPodcastEpisodesUpcomingList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof PodcastEpisodesApiPodcastEpisodesUpcomingList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof PodcastEpisodesApiPodcastEpisodesUpcomingList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof PodcastEpisodesApiPodcastEpisodesUpcomingList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * PodcastEpisodesApi - object-oriented interface
 * @export
 * @class PodcastEpisodesApi
 * @extends {BaseAPI}
 */
export class PodcastEpisodesApi extends BaseAPI {
  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {PodcastEpisodesApiPodcastEpisodesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastEpisodesApi
   */
  public podcastEpisodesList(
    requestParameters: PodcastEpisodesApiPodcastEpisodesListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return PodcastEpisodesApiFp(this.configuration)
      .podcastEpisodesList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {PodcastEpisodesApiPodcastEpisodesNewListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastEpisodesApi
   */
  public podcastEpisodesNewList(
    requestParameters: PodcastEpisodesApiPodcastEpisodesNewListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return PodcastEpisodesApiFp(this.configuration)
      .podcastEpisodesNewList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {PodcastEpisodesApiPodcastEpisodesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastEpisodesApi
   */
  public podcastEpisodesRetrieve(
    requestParameters: PodcastEpisodesApiPodcastEpisodesRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return PodcastEpisodesApiFp(this.configuration)
      .podcastEpisodesRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {PodcastEpisodesApiPodcastEpisodesUpcomingListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastEpisodesApi
   */
  public podcastEpisodesUpcomingList(
    requestParameters: PodcastEpisodesApiPodcastEpisodesUpcomingListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return PodcastEpisodesApiFp(this.configuration)
      .podcastEpisodesUpcomingList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PodcastsApi - axios parameter creator
 * @export
 */
export const PodcastsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Viewset for LearningResource related resources
     * @param {number} parent_id
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsItemsList: async (
      parent_id: number,
      limit?: number,
      offset?: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("podcastsItemsList", "parent_id", parent_id)
      const localVarPath = `/api/v1/podcasts/{parent_id}/items/`.replace(
        `{${"parent_id"}}`,
        encodeURIComponent(String(parent_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsItemsRetrieve: async (
      id: number,
      parent_id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("podcastsItemsRetrieve", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("podcastsItemsRetrieve", "parent_id", parent_id)
      const localVarPath = `/api/v1/podcasts/{parent_id}/items/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcasts/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsNewList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcasts/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("podcastsRetrieve", "id", id)
      const localVarPath = `/api/v1/podcasts/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsUpcomingList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcasts/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PodcastsApi - functional programming interface
 * @export
 */
export const PodcastsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PodcastsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningResource related resources
     * @param {number} parent_id
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsItemsList(
      parent_id: number,
      limit?: number,
      offset?: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceChildList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastsItemsList(
          parent_id,
          limit,
          offset,
          ordering,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsItemsRetrieve(
      id: number,
      parent_id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastsItemsRetrieve(
          id,
          parent_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsList(
        audience,
        limit,
        offered_by,
        offered_by__name,
        offset,
        ordering,
        platform__audience,
        resource_type,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsNewList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsNewList(
        audience,
        limit,
        offered_by,
        offered_by__name,
        offset,
        ordering,
        platform__audience,
        resource_type,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastsRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsUpcomingList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastsUpcomingList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * PodcastsApi - factory interface
 * @export
 */
export const PodcastsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PodcastsApiFp(configuration)
  return {
    /**
     * Viewset for LearningResource related resources
     * @param {PodcastsApiPodcastsItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsItemsList(
      requestParameters: PodcastsApiPodcastsItemsListRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceChildList> {
      return localVarFp
        .podcastsItemsList(
          requestParameters.parent_id,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.ordering,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource related resources
     * @param {PodcastsApiPodcastsItemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsItemsRetrieve(
      requestParameters: PodcastsApiPodcastsItemsRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .podcastsItemsRetrieve(
          requestParameters.id,
          requestParameters.parent_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {PodcastsApiPodcastsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsList(
      requestParameters: PodcastsApiPodcastsListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastsList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {PodcastsApiPodcastsNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsNewList(
      requestParameters: PodcastsApiPodcastsNewListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastsNewList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {PodcastsApiPodcastsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsRetrieve(
      requestParameters: PodcastsApiPodcastsRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .podcastsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {PodcastsApiPodcastsUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsUpcomingList(
      requestParameters: PodcastsApiPodcastsUpcomingListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastsUpcomingList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for podcastsItemsList operation in PodcastsApi.
 * @export
 * @interface PodcastsApiPodcastsItemsListRequest
 */
export interface PodcastsApiPodcastsItemsListRequest {
  /**
   *
   * @type {number}
   * @memberof PodcastsApiPodcastsItemsList
   */
  readonly parent_id: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof PodcastsApiPodcastsItemsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof PodcastsApiPodcastsItemsList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof PodcastsApiPodcastsItemsList
   */
  readonly ordering?: string
}

/**
 * Request parameters for podcastsItemsRetrieve operation in PodcastsApi.
 * @export
 * @interface PodcastsApiPodcastsItemsRetrieveRequest
 */
export interface PodcastsApiPodcastsItemsRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof PodcastsApiPodcastsItemsRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof PodcastsApiPodcastsItemsRetrieve
   */
  readonly parent_id: number
}

/**
 * Request parameters for podcastsList operation in PodcastsApi.
 * @export
 * @interface PodcastsApiPodcastsListRequest
 */
export interface PodcastsApiPodcastsListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof PodcastsApiPodcastsList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof PodcastsApiPodcastsList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof PodcastsApiPodcastsList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof PodcastsApiPodcastsList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof PodcastsApiPodcastsList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof PodcastsApiPodcastsList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof PodcastsApiPodcastsList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof PodcastsApiPodcastsList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for podcastsNewList operation in PodcastsApi.
 * @export
 * @interface PodcastsApiPodcastsNewListRequest
 */
export interface PodcastsApiPodcastsNewListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof PodcastsApiPodcastsNewList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof PodcastsApiPodcastsNewList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof PodcastsApiPodcastsNewList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof PodcastsApiPodcastsNewList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof PodcastsApiPodcastsNewList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof PodcastsApiPodcastsNewList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof PodcastsApiPodcastsNewList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof PodcastsApiPodcastsNewList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for podcastsRetrieve operation in PodcastsApi.
 * @export
 * @interface PodcastsApiPodcastsRetrieveRequest
 */
export interface PodcastsApiPodcastsRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof PodcastsApiPodcastsRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for podcastsUpcomingList operation in PodcastsApi.
 * @export
 * @interface PodcastsApiPodcastsUpcomingListRequest
 */
export interface PodcastsApiPodcastsUpcomingListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof PodcastsApiPodcastsUpcomingList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof PodcastsApiPodcastsUpcomingList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof PodcastsApiPodcastsUpcomingList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof PodcastsApiPodcastsUpcomingList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof PodcastsApiPodcastsUpcomingList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof PodcastsApiPodcastsUpcomingList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof PodcastsApiPodcastsUpcomingList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof PodcastsApiPodcastsUpcomingList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * PodcastsApi - object-oriented interface
 * @export
 * @class PodcastsApi
 * @extends {BaseAPI}
 */
export class PodcastsApi extends BaseAPI {
  /**
   * Viewset for LearningResource related resources
   * @param {PodcastsApiPodcastsItemsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsItemsList(
    requestParameters: PodcastsApiPodcastsItemsListRequest,
    options?: AxiosRequestConfig,
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsItemsList(
        requestParameters.parent_id,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.ordering,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource related resources
   * @param {PodcastsApiPodcastsItemsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsItemsRetrieve(
    requestParameters: PodcastsApiPodcastsItemsRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsItemsRetrieve(
        requestParameters.id,
        requestParameters.parent_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {PodcastsApiPodcastsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsList(
    requestParameters: PodcastsApiPodcastsListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {PodcastsApiPodcastsNewListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsNewList(
    requestParameters: PodcastsApiPodcastsNewListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsNewList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {PodcastsApiPodcastsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsRetrieve(
    requestParameters: PodcastsApiPodcastsRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {PodcastsApiPodcastsUpcomingListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsUpcomingList(
    requestParameters: PodcastsApiPodcastsUpcomingListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsUpcomingList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsNewList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("programsRetrieve", "id", id)
      const localVarPath = `/api/v1/programs/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsUpcomingList: async (
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (audience !== undefined) {
        localVarQueryParameter["audience"] = audience
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offered_by !== undefined) {
        localVarQueryParameter["offered_by"] = offered_by
      }

      if (offered_by__name !== undefined) {
        localVarQueryParameter["offered_by__name"] = offered_by__name
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (ordering !== undefined) {
        localVarQueryParameter["ordering"] = ordering
      }

      if (platform__audience !== undefined) {
        localVarQueryParameter["platform__audience"] = platform__audience
      }

      if (resource_type !== undefined) {
        localVarQueryParameter["resource_type"] = resource_type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProgramsApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.programsList(
        audience,
        limit,
        offered_by,
        offered_by__name,
        offset,
        ordering,
        platform__audience,
        resource_type,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsNewList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.programsNewList(
        audience,
        limit,
        offered_by,
        offered_by__name,
        offset,
        ordering,
        platform__audience,
        resource_type,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {'open' | 'professional'} [audience] Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
     * @param {number} [limit] Number of results to return per page.
     * @param {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'} [offered_by] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {string} [offered_by__name]
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {'Open Content' | 'Professional Offerings'} [platform__audience] * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
     * @param {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'} [resource_type] Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsUpcomingList(
      audience?: "open" | "professional",
      limit?: number,
      offered_by?:
        | "bootcamps"
        | "csail"
        | "ctl"
        | "micromasters"
        | "mitpe"
        | "mitx"
        | "ocw"
        | "oll"
        | "scc"
        | "see"
        | "xpro",
      offered_by__name?: string,
      offset?: number,
      ordering?: string,
      platform__audience?: "Open Content" | "Professional Offerings",
      resource_type?:
        | "course"
        | "learning_path"
        | "podcast"
        | "podcast_episode"
        | "program",
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsUpcomingList(
          audience,
          limit,
          offered_by,
          offered_by__name,
          offset,
          ordering,
          platform__audience,
          resource_type,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProgramsApiFp(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {ProgramsApiProgramsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsList(
      requestParameters: ProgramsApiProgramsListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .programsList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {ProgramsApiProgramsNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsNewList(
      requestParameters: ProgramsApiProgramsNewListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .programsNewList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {ProgramsApiProgramsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieve(
      requestParameters: ProgramsApiProgramsRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .programsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {ProgramsApiProgramsUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsUpcomingList(
      requestParameters: ProgramsApiProgramsUpcomingListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .programsUpcomingList(
          requestParameters.audience,
          requestParameters.limit,
          requestParameters.offered_by,
          requestParameters.offered_by__name,
          requestParameters.offset,
          requestParameters.ordering,
          requestParameters.platform__audience,
          requestParameters.resource_type,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for programsList operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsListRequest
 */
export interface ProgramsApiProgramsListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof ProgramsApiProgramsList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ProgramsApiProgramsList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof ProgramsApiProgramsList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof ProgramsApiProgramsList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ProgramsApiProgramsList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof ProgramsApiProgramsList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof ProgramsApiProgramsList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof ProgramsApiProgramsList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for programsNewList operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsNewListRequest
 */
export interface ProgramsApiProgramsNewListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof ProgramsApiProgramsNewList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ProgramsApiProgramsNewList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof ProgramsApiProgramsNewList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof ProgramsApiProgramsNewList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ProgramsApiProgramsNewList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof ProgramsApiProgramsNewList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof ProgramsApiProgramsNewList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof ProgramsApiProgramsNewList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * Request parameters for programsRetrieve operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsRetrieveRequest
 */
export interface ProgramsApiProgramsRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof ProgramsApiProgramsRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for programsUpcomingList operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsUpcomingListRequest
 */
export interface ProgramsApiProgramsUpcomingListRequest {
  /**
   * Audience  * &#x60;professional&#x60; - Professional Offerings * &#x60;open&#x60; - Open Content
   * @type {'open' | 'professional'}
   * @memberof ProgramsApiProgramsUpcomingList
   */
  readonly audience?: "open" | "professional"

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ProgramsApiProgramsUpcomingList
   */
  readonly limit?: number

  /**
   * Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;micromasters&#x60; - MicroMasters * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;oll&#x60; - Open Learning Library * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @type {'bootcamps' | 'csail' | 'ctl' | 'micromasters' | 'mitpe' | 'mitx' | 'ocw' | 'oll' | 'scc' | 'see' | 'xpro'}
   * @memberof ProgramsApiProgramsUpcomingList
   */
  readonly offered_by?:
    | "bootcamps"
    | "csail"
    | "ctl"
    | "micromasters"
    | "mitpe"
    | "mitx"
    | "ocw"
    | "oll"
    | "scc"
    | "see"
    | "xpro"

  /**
   *
   * @type {string}
   * @memberof ProgramsApiProgramsUpcomingList
   */
  readonly offered_by__name?: string

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ProgramsApiProgramsUpcomingList
   */
  readonly offset?: number

  /**
   * Which field to use when ordering the results.
   * @type {string}
   * @memberof ProgramsApiProgramsUpcomingList
   */
  readonly ordering?: string

  /**
   * * &#x60;Open Content&#x60; - Open Content * &#x60;Professional Offerings&#x60; - Professional Offerings
   * @type {'Open Content' | 'Professional Offerings'}
   * @memberof ProgramsApiProgramsUpcomingList
   */
  readonly platform__audience?: "Open Content" | "Professional Offerings"

  /**
   * Resource Type  * &#x60;course&#x60; - course * &#x60;program&#x60; - program * &#x60;learning_path&#x60; - learning_path * &#x60;podcast&#x60; - podcast * &#x60;podcast_episode&#x60; - podcast_episode
   * @type {'course' | 'learning_path' | 'podcast' | 'podcast_episode' | 'program'}
   * @memberof ProgramsApiProgramsUpcomingList
   */
  readonly resource_type?:
    | "course"
    | "learning_path"
    | "podcast"
    | "podcast_episode"
    | "program"
}

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {ProgramsApiProgramsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsList(
    requestParameters: ProgramsApiProgramsListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return ProgramsApiFp(this.configuration)
      .programsList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {ProgramsApiProgramsNewListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsNewList(
    requestParameters: ProgramsApiProgramsNewListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return ProgramsApiFp(this.configuration)
      .programsNewList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {ProgramsApiProgramsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsRetrieve(
    requestParameters: ProgramsApiProgramsRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return ProgramsApiFp(this.configuration)
      .programsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {ProgramsApiProgramsUpcomingListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsUpcomingList(
    requestParameters: ProgramsApiProgramsUpcomingListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return ProgramsApiFp(this.configuration)
      .programsUpcomingList(
        requestParameters.audience,
        requestParameters.limit,
        requestParameters.offered_by,
        requestParameters.offered_by__name,
        requestParameters.offset,
        requestParameters.ordering,
        requestParameters.platform__audience,
        requestParameters.resource_type,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * StaffPostsApi - axios parameter creator
 * @export
 */
export const StaffPostsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {StaffPostRequest} StaffPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsCreate: async (
      StaffPostRequest: StaffPostRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'StaffPostRequest' is not null or undefined
      assertParamExists(
        "staffPostsCreate",
        "StaffPostRequest",
        StaffPostRequest,
      )
      const localVarPath = `/api/v1/staff_posts/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        StaffPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} id A unique integer value identifying this staff post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("staffPostsDestroy", "id", id)
      const localVarPath = `/api/v1/staff_posts/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/staff_posts/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} id A unique integer value identifying this staff post.
     * @param {PatchedStaffPostRequest} [PatchedStaffPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsPartialUpdate: async (
      id: number,
      PatchedStaffPostRequest?: PatchedStaffPostRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("staffPostsPartialUpdate", "id", id)
      const localVarPath = `/api/v1/staff_posts/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedStaffPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} id A unique integer value identifying this staff post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("staffPostsRetrieve", "id", id)
      const localVarPath = `/api/v1/staff_posts/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} id A unique integer value identifying this staff post.
     * @param {StaffPostRequest} StaffPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsUpdate: async (
      id: number,
      StaffPostRequest: StaffPostRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("staffPostsUpdate", "id", id)
      // verify required parameter 'StaffPostRequest' is not null or undefined
      assertParamExists(
        "staffPostsUpdate",
        "StaffPostRequest",
        StaffPostRequest,
      )
      const localVarPath = `/api/v1/staff_posts/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        StaffPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * StaffPostsApi - functional programming interface
 * @export
 */
export const StaffPostsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    StaffPostsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {StaffPostRequest} StaffPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async staffPostsCreate(
      StaffPostRequest: StaffPostRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffPost>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.staffPostsCreate(
          StaffPostRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} id A unique integer value identifying this staff post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async staffPostsDestroy(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.staffPostsDestroy(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async staffPostsList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedStaffPostList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.staffPostsList(
        limit,
        offset,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} id A unique integer value identifying this staff post.
     * @param {PatchedStaffPostRequest} [PatchedStaffPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async staffPostsPartialUpdate(
      id: number,
      PatchedStaffPostRequest?: PatchedStaffPostRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffPost>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.staffPostsPartialUpdate(
          id,
          PatchedStaffPostRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} id A unique integer value identifying this staff post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async staffPostsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffPost>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.staffPostsRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {number} id A unique integer value identifying this staff post.
     * @param {StaffPostRequest} StaffPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async staffPostsUpdate(
      id: number,
      StaffPostRequest: StaffPostRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffPost>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.staffPostsUpdate(
          id,
          StaffPostRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * StaffPostsApi - factory interface
 * @export
 */
export const StaffPostsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = StaffPostsApiFp(configuration)
  return {
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {StaffPostsApiStaffPostsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsCreate(
      requestParameters: StaffPostsApiStaffPostsCreateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<StaffPost> {
      return localVarFp
        .staffPostsCreate(requestParameters.StaffPostRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {StaffPostsApiStaffPostsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsDestroy(
      requestParameters: StaffPostsApiStaffPostsDestroyRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .staffPostsDestroy(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {StaffPostsApiStaffPostsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsList(
      requestParameters: StaffPostsApiStaffPostsListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedStaffPostList> {
      return localVarFp
        .staffPostsList(
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {StaffPostsApiStaffPostsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsPartialUpdate(
      requestParameters: StaffPostsApiStaffPostsPartialUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<StaffPost> {
      return localVarFp
        .staffPostsPartialUpdate(
          requestParameters.id,
          requestParameters.PatchedStaffPostRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {StaffPostsApiStaffPostsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsRetrieve(
      requestParameters: StaffPostsApiStaffPostsRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<StaffPost> {
      return localVarFp
        .staffPostsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for StaffPost viewing and editing.
     * @param {StaffPostsApiStaffPostsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    staffPostsUpdate(
      requestParameters: StaffPostsApiStaffPostsUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<StaffPost> {
      return localVarFp
        .staffPostsUpdate(
          requestParameters.id,
          requestParameters.StaffPostRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for staffPostsCreate operation in StaffPostsApi.
 * @export
 * @interface StaffPostsApiStaffPostsCreateRequest
 */
export interface StaffPostsApiStaffPostsCreateRequest {
  /**
   *
   * @type {StaffPostRequest}
   * @memberof StaffPostsApiStaffPostsCreate
   */
  readonly StaffPostRequest: StaffPostRequest
}

/**
 * Request parameters for staffPostsDestroy operation in StaffPostsApi.
 * @export
 * @interface StaffPostsApiStaffPostsDestroyRequest
 */
export interface StaffPostsApiStaffPostsDestroyRequest {
  /**
   * A unique integer value identifying this staff post.
   * @type {number}
   * @memberof StaffPostsApiStaffPostsDestroy
   */
  readonly id: number
}

/**
 * Request parameters for staffPostsList operation in StaffPostsApi.
 * @export
 * @interface StaffPostsApiStaffPostsListRequest
 */
export interface StaffPostsApiStaffPostsListRequest {
  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof StaffPostsApiStaffPostsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof StaffPostsApiStaffPostsList
   */
  readonly offset?: number
}

/**
 * Request parameters for staffPostsPartialUpdate operation in StaffPostsApi.
 * @export
 * @interface StaffPostsApiStaffPostsPartialUpdateRequest
 */
export interface StaffPostsApiStaffPostsPartialUpdateRequest {
  /**
   * A unique integer value identifying this staff post.
   * @type {number}
   * @memberof StaffPostsApiStaffPostsPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {PatchedStaffPostRequest}
   * @memberof StaffPostsApiStaffPostsPartialUpdate
   */
  readonly PatchedStaffPostRequest?: PatchedStaffPostRequest
}

/**
 * Request parameters for staffPostsRetrieve operation in StaffPostsApi.
 * @export
 * @interface StaffPostsApiStaffPostsRetrieveRequest
 */
export interface StaffPostsApiStaffPostsRetrieveRequest {
  /**
   * A unique integer value identifying this staff post.
   * @type {number}
   * @memberof StaffPostsApiStaffPostsRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for staffPostsUpdate operation in StaffPostsApi.
 * @export
 * @interface StaffPostsApiStaffPostsUpdateRequest
 */
export interface StaffPostsApiStaffPostsUpdateRequest {
  /**
   * A unique integer value identifying this staff post.
   * @type {number}
   * @memberof StaffPostsApiStaffPostsUpdate
   */
  readonly id: number

  /**
   *
   * @type {StaffPostRequest}
   * @memberof StaffPostsApiStaffPostsUpdate
   */
  readonly StaffPostRequest: StaffPostRequest
}

/**
 * StaffPostsApi - object-oriented interface
 * @export
 * @class StaffPostsApi
 * @extends {BaseAPI}
 */
export class StaffPostsApi extends BaseAPI {
  /**
   * Viewset for StaffPost viewing and editing.
   * @param {StaffPostsApiStaffPostsCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffPostsApi
   */
  public staffPostsCreate(
    requestParameters: StaffPostsApiStaffPostsCreateRequest,
    options?: AxiosRequestConfig,
  ) {
    return StaffPostsApiFp(this.configuration)
      .staffPostsCreate(requestParameters.StaffPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for StaffPost viewing and editing.
   * @param {StaffPostsApiStaffPostsDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffPostsApi
   */
  public staffPostsDestroy(
    requestParameters: StaffPostsApiStaffPostsDestroyRequest,
    options?: AxiosRequestConfig,
  ) {
    return StaffPostsApiFp(this.configuration)
      .staffPostsDestroy(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for StaffPost viewing and editing.
   * @param {StaffPostsApiStaffPostsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffPostsApi
   */
  public staffPostsList(
    requestParameters: StaffPostsApiStaffPostsListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return StaffPostsApiFp(this.configuration)
      .staffPostsList(
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for StaffPost viewing and editing.
   * @param {StaffPostsApiStaffPostsPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffPostsApi
   */
  public staffPostsPartialUpdate(
    requestParameters: StaffPostsApiStaffPostsPartialUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return StaffPostsApiFp(this.configuration)
      .staffPostsPartialUpdate(
        requestParameters.id,
        requestParameters.PatchedStaffPostRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for StaffPost viewing and editing.
   * @param {StaffPostsApiStaffPostsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffPostsApi
   */
  public staffPostsRetrieve(
    requestParameters: StaffPostsApiStaffPostsRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return StaffPostsApiFp(this.configuration)
      .staffPostsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for StaffPost viewing and editing.
   * @param {StaffPostsApiStaffPostsUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffPostsApi
   */
  public staffPostsUpdate(
    requestParameters: StaffPostsApiStaffPostsUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return StaffPostsApiFp(this.configuration)
      .staffPostsUpdate(
        requestParameters.id,
        requestParameters.StaffPostRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * TopicsApi - axios parameter creator
 * @export
 */
export const TopicsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Viewset for topics
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topicsList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/topics/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for topics
     * @param {number} id A unique integer value identifying this learning resource topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topicsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("topicsRetrieve", "id", id)
      const localVarPath = `/api/v1/topics/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TopicsApi - functional programming interface
 * @export
 */
export const TopicsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TopicsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for topics
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async topicsList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedLearningResourceTopicList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.topicsList(
        limit,
        offset,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for topics
     * @param {number} id A unique integer value identifying this learning resource topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async topicsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LearningResourceTopic>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.topicsRetrieve(
        id,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * TopicsApi - factory interface
 * @export
 */
export const TopicsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TopicsApiFp(configuration)
  return {
    /**
     * Viewset for topics
     * @param {TopicsApiTopicsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topicsList(
      requestParameters: TopicsApiTopicsListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedLearningResourceTopicList> {
      return localVarFp
        .topicsList(requestParameters.limit, requestParameters.offset, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for topics
     * @param {TopicsApiTopicsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topicsRetrieve(
      requestParameters: TopicsApiTopicsRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<LearningResourceTopic> {
      return localVarFp
        .topicsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for topicsList operation in TopicsApi.
 * @export
 * @interface TopicsApiTopicsListRequest
 */
export interface TopicsApiTopicsListRequest {
  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof TopicsApiTopicsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof TopicsApiTopicsList
   */
  readonly offset?: number
}

/**
 * Request parameters for topicsRetrieve operation in TopicsApi.
 * @export
 * @interface TopicsApiTopicsRetrieveRequest
 */
export interface TopicsApiTopicsRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource topic.
   * @type {number}
   * @memberof TopicsApiTopicsRetrieve
   */
  readonly id: number
}

/**
 * TopicsApi - object-oriented interface
 * @export
 * @class TopicsApi
 * @extends {BaseAPI}
 */
export class TopicsApi extends BaseAPI {
  /**
   * Viewset for topics
   * @param {TopicsApiTopicsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TopicsApi
   */
  public topicsList(
    requestParameters: TopicsApiTopicsListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return TopicsApiFp(this.configuration)
      .topicsList(requestParameters.limit, requestParameters.offset, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for topics
   * @param {TopicsApiTopicsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TopicsApi
   */
  public topicsRetrieve(
    requestParameters: TopicsApiTopicsRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return TopicsApiFp(this.configuration)
      .topicsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserlistsApi - axios parameter creator
 * @export
 */
export const UserlistsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Viewset for UserLists
     * @param {UserListRequest} UserListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsCreate: async (
      UserListRequest: UserListRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'UserListRequest' is not null or undefined
      assertParamExists("userlistsCreate", "UserListRequest", UserListRequest)
      const localVarPath = `/api/v1/userlists/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        UserListRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsDestroy", "id", id)
      const localVarPath = `/api/v1/userlists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/userlists/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {PatchedUserListRequest} [PatchedUserListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsPartialUpdate: async (
      id: number,
      PatchedUserListRequest?: PatchedUserListRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsPartialUpdate", "id", id)
      const localVarPath = `/api/v1/userlists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedUserListRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parent_id
     * @param {UserListRelationshipRequest} UserListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesCreate: async (
      parent_id: number,
      UserListRelationshipRequest: UserListRelationshipRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("userlistsResourcesCreate", "parent_id", parent_id)
      // verify required parameter 'UserListRelationshipRequest' is not null or undefined
      assertParamExists(
        "userlistsResourcesCreate",
        "UserListRelationshipRequest",
        UserListRelationshipRequest,
      )
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/`.replace(
        `{${"parent_id"}}`,
        encodeURIComponent(String(parent_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        UserListRelationshipRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesDestroy: async (
      id: number,
      parent_id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsResourcesDestroy", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("userlistsResourcesDestroy", "parent_id", parent_id)
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parent_id
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesList: async (
      parent_id: number,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("userlistsResourcesList", "parent_id", parent_id)
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/`.replace(
        `{${"parent_id"}}`,
        encodeURIComponent(String(parent_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parent_id
     * @param {PatchedUserListRelationshipRequest} [PatchedUserListRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesPartialUpdate: async (
      id: number,
      parent_id: number,
      PatchedUserListRelationshipRequest?: PatchedUserListRelationshipRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsResourcesPartialUpdate", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists(
        "userlistsResourcesPartialUpdate",
        "parent_id",
        parent_id,
      )
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedUserListRelationshipRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesRetrieve: async (
      id: number,
      parent_id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsResourcesRetrieve", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("userlistsResourcesRetrieve", "parent_id", parent_id)
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parent_id
     * @param {UserListRelationshipRequest} UserListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesUpdate: async (
      id: number,
      parent_id: number,
      UserListRelationshipRequest: UserListRelationshipRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsResourcesUpdate", "id", id)
      // verify required parameter 'parent_id' is not null or undefined
      assertParamExists("userlistsResourcesUpdate", "parent_id", parent_id)
      // verify required parameter 'UserListRelationshipRequest' is not null or undefined
      assertParamExists(
        "userlistsResourcesUpdate",
        "UserListRelationshipRequest",
        UserListRelationshipRequest,
      )
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parent_id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        UserListRelationshipRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsRetrieve", "id", id)
      const localVarPath = `/api/v1/userlists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {UserListRequest} UserListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsUpdate: async (
      id: number,
      UserListRequest: UserListRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsUpdate", "id", id)
      // verify required parameter 'UserListRequest' is not null or undefined
      assertParamExists("userlistsUpdate", "UserListRequest", UserListRequest)
      const localVarPath = `/api/v1/userlists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        UserListRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserlistsApi - functional programming interface
 * @export
 */
export const UserlistsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserlistsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for UserLists
     * @param {UserListRequest} UserListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsCreate(
      UserListRequest: UserListRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userlistsCreate(
        UserListRequest,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsDestroy(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsDestroy(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserLists
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedUserListList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userlistsList(
        limit,
        offset,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {PatchedUserListRequest} [PatchedUserListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsPartialUpdate(
      id: number,
      PatchedUserListRequest?: PatchedUserListRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsPartialUpdate(
          id,
          PatchedUserListRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parent_id
     * @param {UserListRelationshipRequest} UserListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesCreate(
      parent_id: number,
      UserListRelationshipRequest: UserListRelationshipRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserListRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesCreate(
          parent_id,
          UserListRelationshipRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesDestroy(
      id: number,
      parent_id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesDestroy(
          id,
          parent_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parent_id
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesList(
      parent_id: number,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedUserListRelationshipList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesList(
          parent_id,
          limit,
          offset,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parent_id
     * @param {PatchedUserListRelationshipRequest} [PatchedUserListRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesPartialUpdate(
      id: number,
      parent_id: number,
      PatchedUserListRelationshipRequest?: PatchedUserListRelationshipRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserListRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesPartialUpdate(
          id,
          parent_id,
          PatchedUserListRelationshipRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parent_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesRetrieve(
      id: number,
      parent_id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserListRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesRetrieve(
          id,
          parent_id,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parent_id
     * @param {UserListRelationshipRequest} UserListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesUpdate(
      id: number,
      parent_id: number,
      UserListRelationshipRequest: UserListRelationshipRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserListRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesUpdate(
          id,
          parent_id,
          UserListRelationshipRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {UserListRequest} UserListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsUpdate(
      id: number,
      UserListRequest: UserListRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userlistsUpdate(
        id,
        UserListRequest,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * UserlistsApi - factory interface
 * @export
 */
export const UserlistsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserlistsApiFp(configuration)
  return {
    /**
     * Viewset for UserLists
     * @param {UserlistsApiUserlistsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsCreate(
      requestParameters: UserlistsApiUserlistsCreateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UserList> {
      return localVarFp
        .userlistsCreate(requestParameters.UserListRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {UserlistsApiUserlistsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsDestroy(
      requestParameters: UserlistsApiUserlistsDestroyRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .userlistsDestroy(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {UserlistsApiUserlistsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsList(
      requestParameters: UserlistsApiUserlistsListRequest = {},
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedUserListList> {
      return localVarFp
        .userlistsList(
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {UserlistsApiUserlistsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsPartialUpdate(
      requestParameters: UserlistsApiUserlistsPartialUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UserList> {
      return localVarFp
        .userlistsPartialUpdate(
          requestParameters.id,
          requestParameters.PatchedUserListRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {UserlistsApiUserlistsResourcesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesCreate(
      requestParameters: UserlistsApiUserlistsResourcesCreateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UserListRelationship> {
      return localVarFp
        .userlistsResourcesCreate(
          requestParameters.parent_id,
          requestParameters.UserListRelationshipRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {UserlistsApiUserlistsResourcesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesDestroy(
      requestParameters: UserlistsApiUserlistsResourcesDestroyRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .userlistsResourcesDestroy(
          requestParameters.id,
          requestParameters.parent_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {UserlistsApiUserlistsResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesList(
      requestParameters: UserlistsApiUserlistsResourcesListRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<PaginatedUserListRelationshipList> {
      return localVarFp
        .userlistsResourcesList(
          requestParameters.parent_id,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {UserlistsApiUserlistsResourcesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesPartialUpdate(
      requestParameters: UserlistsApiUserlistsResourcesPartialUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UserListRelationship> {
      return localVarFp
        .userlistsResourcesPartialUpdate(
          requestParameters.id,
          requestParameters.parent_id,
          requestParameters.PatchedUserListRelationshipRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {UserlistsApiUserlistsResourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesRetrieve(
      requestParameters: UserlistsApiUserlistsResourcesRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UserListRelationship> {
      return localVarFp
        .userlistsResourcesRetrieve(
          requestParameters.id,
          requestParameters.parent_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {UserlistsApiUserlistsResourcesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesUpdate(
      requestParameters: UserlistsApiUserlistsResourcesUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UserListRelationship> {
      return localVarFp
        .userlistsResourcesUpdate(
          requestParameters.id,
          requestParameters.parent_id,
          requestParameters.UserListRelationshipRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {UserlistsApiUserlistsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsRetrieve(
      requestParameters: UserlistsApiUserlistsRetrieveRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UserList> {
      return localVarFp
        .userlistsRetrieve(requestParameters.id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {UserlistsApiUserlistsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsUpdate(
      requestParameters: UserlistsApiUserlistsUpdateRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<UserList> {
      return localVarFp
        .userlistsUpdate(
          requestParameters.id,
          requestParameters.UserListRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for userlistsCreate operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsCreateRequest
 */
export interface UserlistsApiUserlistsCreateRequest {
  /**
   *
   * @type {UserListRequest}
   * @memberof UserlistsApiUserlistsCreate
   */
  readonly UserListRequest: UserListRequest
}

/**
 * Request parameters for userlistsDestroy operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsDestroyRequest
 */
export interface UserlistsApiUserlistsDestroyRequest {
  /**
   * A unique integer value identifying this user list.
   * @type {number}
   * @memberof UserlistsApiUserlistsDestroy
   */
  readonly id: number
}

/**
 * Request parameters for userlistsList operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsListRequest
 */
export interface UserlistsApiUserlistsListRequest {
  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof UserlistsApiUserlistsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof UserlistsApiUserlistsList
   */
  readonly offset?: number
}

/**
 * Request parameters for userlistsPartialUpdate operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsPartialUpdateRequest
 */
export interface UserlistsApiUserlistsPartialUpdateRequest {
  /**
   * A unique integer value identifying this user list.
   * @type {number}
   * @memberof UserlistsApiUserlistsPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {PatchedUserListRequest}
   * @memberof UserlistsApiUserlistsPartialUpdate
   */
  readonly PatchedUserListRequest?: PatchedUserListRequest
}

/**
 * Request parameters for userlistsResourcesCreate operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsResourcesCreateRequest
 */
export interface UserlistsApiUserlistsResourcesCreateRequest {
  /**
   *
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesCreate
   */
  readonly parent_id: number

  /**
   *
   * @type {UserListRelationshipRequest}
   * @memberof UserlistsApiUserlistsResourcesCreate
   */
  readonly UserListRelationshipRequest: UserListRelationshipRequest
}

/**
 * Request parameters for userlistsResourcesDestroy operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsResourcesDestroyRequest
 */
export interface UserlistsApiUserlistsResourcesDestroyRequest {
  /**
   * A unique integer value identifying this user list relationship.
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesDestroy
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesDestroy
   */
  readonly parent_id: number
}

/**
 * Request parameters for userlistsResourcesList operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsResourcesListRequest
 */
export interface UserlistsApiUserlistsResourcesListRequest {
  /**
   *
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesList
   */
  readonly parent_id: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesList
   */
  readonly offset?: number
}

/**
 * Request parameters for userlistsResourcesPartialUpdate operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsResourcesPartialUpdateRequest
 */
export interface UserlistsApiUserlistsResourcesPartialUpdateRequest {
  /**
   * A unique integer value identifying this user list relationship.
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesPartialUpdate
   */
  readonly parent_id: number

  /**
   *
   * @type {PatchedUserListRelationshipRequest}
   * @memberof UserlistsApiUserlistsResourcesPartialUpdate
   */
  readonly PatchedUserListRelationshipRequest?: PatchedUserListRelationshipRequest
}

/**
 * Request parameters for userlistsResourcesRetrieve operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsResourcesRetrieveRequest
 */
export interface UserlistsApiUserlistsResourcesRetrieveRequest {
  /**
   * A unique integer value identifying this user list relationship.
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesRetrieve
   */
  readonly parent_id: number
}

/**
 * Request parameters for userlistsResourcesUpdate operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsResourcesUpdateRequest
 */
export interface UserlistsApiUserlistsResourcesUpdateRequest {
  /**
   * A unique integer value identifying this user list relationship.
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof UserlistsApiUserlistsResourcesUpdate
   */
  readonly parent_id: number

  /**
   *
   * @type {UserListRelationshipRequest}
   * @memberof UserlistsApiUserlistsResourcesUpdate
   */
  readonly UserListRelationshipRequest: UserListRelationshipRequest
}

/**
 * Request parameters for userlistsRetrieve operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsRetrieveRequest
 */
export interface UserlistsApiUserlistsRetrieveRequest {
  /**
   * A unique integer value identifying this user list.
   * @type {number}
   * @memberof UserlistsApiUserlistsRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for userlistsUpdate operation in UserlistsApi.
 * @export
 * @interface UserlistsApiUserlistsUpdateRequest
 */
export interface UserlistsApiUserlistsUpdateRequest {
  /**
   * A unique integer value identifying this user list.
   * @type {number}
   * @memberof UserlistsApiUserlistsUpdate
   */
  readonly id: number

  /**
   *
   * @type {UserListRequest}
   * @memberof UserlistsApiUserlistsUpdate
   */
  readonly UserListRequest: UserListRequest
}

/**
 * UserlistsApi - object-oriented interface
 * @export
 * @class UserlistsApi
 * @extends {BaseAPI}
 */
export class UserlistsApi extends BaseAPI {
  /**
   * Viewset for UserLists
   * @param {UserlistsApiUserlistsCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsCreate(
    requestParameters: UserlistsApiUserlistsCreateRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsCreate(requestParameters.UserListRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {UserlistsApiUserlistsDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsDestroy(
    requestParameters: UserlistsApiUserlistsDestroyRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsDestroy(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {UserlistsApiUserlistsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsList(
    requestParameters: UserlistsApiUserlistsListRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsList(requestParameters.limit, requestParameters.offset, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {UserlistsApiUserlistsPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsPartialUpdate(
    requestParameters: UserlistsApiUserlistsPartialUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsPartialUpdate(
        requestParameters.id,
        requestParameters.PatchedUserListRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {UserlistsApiUserlistsResourcesCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesCreate(
    requestParameters: UserlistsApiUserlistsResourcesCreateRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesCreate(
        requestParameters.parent_id,
        requestParameters.UserListRelationshipRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {UserlistsApiUserlistsResourcesDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesDestroy(
    requestParameters: UserlistsApiUserlistsResourcesDestroyRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesDestroy(
        requestParameters.id,
        requestParameters.parent_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {UserlistsApiUserlistsResourcesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesList(
    requestParameters: UserlistsApiUserlistsResourcesListRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesList(
        requestParameters.parent_id,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {UserlistsApiUserlistsResourcesPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesPartialUpdate(
    requestParameters: UserlistsApiUserlistsResourcesPartialUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesPartialUpdate(
        requestParameters.id,
        requestParameters.parent_id,
        requestParameters.PatchedUserListRelationshipRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {UserlistsApiUserlistsResourcesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesRetrieve(
    requestParameters: UserlistsApiUserlistsResourcesRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesRetrieve(
        requestParameters.id,
        requestParameters.parent_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {UserlistsApiUserlistsResourcesUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesUpdate(
    requestParameters: UserlistsApiUserlistsResourcesUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesUpdate(
        requestParameters.id,
        requestParameters.parent_id,
        requestParameters.UserListRelationshipRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {UserlistsApiUserlistsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsRetrieve(
    requestParameters: UserlistsApiUserlistsRetrieveRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsRetrieve(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {UserlistsApiUserlistsUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsUpdate(
    requestParameters: UserlistsApiUserlistsUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsUpdate(
        requestParameters.id,
        requestParameters.UserListRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
