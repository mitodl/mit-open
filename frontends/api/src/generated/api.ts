/* tslint:disable */
/* eslint-disable */
/**
 * MIT Open Discussions Course Catalog API
 * Open Discussions public API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base"

/**
 * Serializer for the Course model
 * @export
 * @interface Course
 */
export interface Course {
  /**
   *
   * @type {Array<string>}
   * @memberof Course
   */
  extra_course_numbers?: Array<string> | null
}
/**
 * Serializer for the LearningPath model
 * @export
 * @interface LearningPath
 */
export interface LearningPath {
  /**
   *
   * @type {number}
   * @memberof LearningPath
   */
  id: number
  /**
   * Return the number of items in the list
   * @type {number}
   * @memberof LearningPath
   */
  item_count: number
  /**
   *
   * @type {number}
   * @memberof LearningPath
   */
  author: number
}
/**
 * Serlializer for LearningResource of type LearningPath
 * @export
 * @interface LearningPathResource
 */
export interface LearningPathResource {
  /**
   *
   * @type {number}
   * @memberof LearningPathResource
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  readable_id: string
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningPathResource
   */
  topics?: Array<LearningResourceTopic> | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  resource_type: string
  /**
   *
   * @type {LearningPath}
   * @memberof LearningPathResource
   */
  learning_path: LearningPath | null
  /**
   *
   * @type {boolean}
   * @memberof LearningPathResource
   */
  published?: boolean
}
/**
 * Serializer for LearningResource, minus program, course
 * @export
 * @interface LearningResource
 */
export interface LearningResource {
  /**
   *
   * @type {number}
   * @memberof LearningResource
   */
  id: number
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  offered_by: Array<string> | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResource
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {LearningResourceDepartment}
   * @memberof LearningResource
   */
  department: LearningResourceDepartment | null
  /**
   * Returns the audience for the learning resource
   * @type {string}
   * @memberof LearningResource
   */
  audience: string | null
  /**
   * Returns the certification for the learning resource
   * @type {string}
   * @memberof LearningResource
   */
  certification: string | null
  /**
   * Returns the prices for the learning resource
   * @type {string}
   * @memberof LearningResource
   */
  prices: string | null
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResource
   */
  topics?: Array<LearningResourceTopic> | null
  /**
   *
   * @type {Course}
   * @memberof LearningResource
   */
  course: Course | null
  /**
   *
   * @type {LearningPath}
   * @memberof LearningResource
   */
  learning_path: LearningPath | null
  /**
   *
   * @type {Array<LearningResourceRun>}
   * @memberof LearningResource
   */
  runs: Array<LearningResourceRun> | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResource
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  resource_type: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  platform: string | null
}
/**
 * Serializer for LearningResourceRelationship children
 * @export
 * @interface LearningResourceChild
 */
export interface LearningResourceChild {
  /**
   *
   * @type {number}
   * @memberof LearningResourceChild
   */
  child: number
}
/**
 * Serializer for LearningResourceDepartment
 * @export
 * @interface LearningResourceDepartment
 */
export interface LearningResourceDepartment {
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartment
   */
  department_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartment
   */
  name: string
}
/**
 * Serializer for LearningResourceImage
 * @export
 * @interface LearningResourceImage
 */
export interface LearningResourceImage {
  /**
   *
   * @type {number}
   * @memberof LearningResourceImage
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  alt?: string | null
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface LearningResourceInstructor
 */
export interface LearningResourceInstructor {
  /**
   *
   * @type {number}
   * @memberof LearningResourceInstructor
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  first_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  last_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  full_name?: string | null
}
/**
 * Serializer for LearningResourceRelationship
 * @export
 * @interface LearningResourceRelationship
 */
export interface LearningResourceRelationship {
  /**
   *
   * @type {number}
   * @memberof LearningResourceRelationship
   */
  id: number
  /**
   *
   * @type {LearningResource}
   * @memberof LearningResourceRelationship
   */
  resource: LearningResource | null
  /**
   *
   * @type {number}
   * @memberof LearningResourceRelationship
   */
  position?: number
  /**
   *
   * @type {RelationTypeEnum}
   * @memberof LearningResourceRelationship
   */
  relation_type: RelationTypeEnum
  /**
   *
   * @type {number}
   * @memberof LearningResourceRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof LearningResourceRelationship
   */
  child: number
}

/**
 * Serializer for the LearningResourceRun model
 * @export
 * @interface LearningResourceRun
 */
export interface LearningResourceRun {
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceInstructor>}
   * @memberof LearningResourceRun
   */
  instructors: Array<LearningResourceInstructor> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResourceRun
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  run_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceRun
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRun
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  level?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  slug?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  availability?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  semester?: string | null
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  year?: number | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  start_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  end_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  enrollment_start?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  enrollment_end?: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRun
   */
  prices?: Array<string> | null
}
/**
 * Serializer for LearningResourceTopic model
 * @export
 * @interface LearningResourceTopic
 */
export interface LearningResourceTopic {
  /**
   *
   * @type {number}
   * @memberof LearningResourceTopic
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceTopic
   */
  name: string
}
/**
 *
 * @export
 * @interface PaginatedLearningPathResourceList
 */
export interface PaginatedLearningPathResourceList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningPathResourceList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathResourceList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathResourceList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningPathResource>}
   * @memberof PaginatedLearningPathResourceList
   */
  results?: Array<LearningPathResource>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceChildList
 */
export interface PaginatedLearningResourceChildList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceChildList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceChildList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceChildList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResourceChild>}
   * @memberof PaginatedLearningResourceChildList
   */
  results?: Array<LearningResourceChild>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceList
 */
export interface PaginatedLearningResourceList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResource>}
   * @memberof PaginatedLearningResourceList
   */
  results?: Array<LearningResource>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceRelationshipList
 */
export interface PaginatedLearningResourceRelationshipList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceRelationshipList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceRelationshipList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceRelationshipList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResourceRelationship>}
   * @memberof PaginatedLearningResourceRelationshipList
   */
  results?: Array<LearningResourceRelationship>
}
/**
 * Serlializer for LearningResource of type LearningPath
 * @export
 * @interface PatchedLearningPathResource
 */
export interface PatchedLearningPathResource {
  /**
   *
   * @type {number}
   * @memberof PatchedLearningPathResource
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResource
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResource
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResource
   */
  readable_id?: string
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof PatchedLearningPathResource
   */
  topics?: Array<LearningResourceTopic> | null
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResource
   */
  resource_type?: string
  /**
   *
   * @type {LearningPath}
   * @memberof PatchedLearningPathResource
   */
  learning_path?: LearningPath | null
  /**
   *
   * @type {boolean}
   * @memberof PatchedLearningPathResource
   */
  published?: boolean
}
/**
 * Serializer for LearningResourceRelationship children
 * @export
 * @interface PatchedLearningResourceChild
 */
export interface PatchedLearningResourceChild {
  /**
   *
   * @type {number}
   * @memberof PatchedLearningResourceChild
   */
  child?: number
}
/**
 * Serializer for LearningResourceRelationship
 * @export
 * @interface PatchedLearningResourceRelationship
 */
export interface PatchedLearningResourceRelationship {
  /**
   *
   * @type {number}
   * @memberof PatchedLearningResourceRelationship
   */
  id?: number
  /**
   *
   * @type {LearningResource}
   * @memberof PatchedLearningResourceRelationship
   */
  resource?: LearningResource | null
  /**
   *
   * @type {number}
   * @memberof PatchedLearningResourceRelationship
   */
  position?: number
  /**
   *
   * @type {RelationTypeEnum}
   * @memberof PatchedLearningResourceRelationship
   */
  relation_type?: RelationTypeEnum
  /**
   *
   * @type {number}
   * @memberof PatchedLearningResourceRelationship
   */
  parent?: number
  /**
   *
   * @type {number}
   * @memberof PatchedLearningResourceRelationship
   */
  child?: number
}

/**
 * * `PROGRAM_COURSES` - Program Courses * `LEARNING_PATH_ITEMS` - Learning Path Items * `PODCAST_EPISODES` - Podcast Episodes
 * @export
 * @enum {string}
 */

export const RelationTypeEnum = {
  ProgramCourses: "PROGRAM_COURSES",
  LearningPathItems: "LEARNING_PATH_ITEMS",
  PodcastEpisodes: "PODCAST_EPISODES"
} as const

export type RelationTypeEnum =
  (typeof RelationTypeEnum)[keyof typeof RelationTypeEnum]

/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [department]
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [platform]
     * @param {string} [resourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesList: async (
      department?: number,
      limit?: number,
      offset?: number,
      platform?: string,
      resourceType?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesNewRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("coursesRetrieve", "id", id)
      const localVarPath = `/api/v1/courses/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesUpcomingRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [department]
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [platform]
     * @param {string} [resourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesList(
      department?: number,
      limit?: number,
      offset?: number,
      platform?: string,
      resourceType?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesList(
        department,
        limit,
        offset,
        platform,
        resourceType,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesNewRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesNewRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesRetrieve(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesUpcomingRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    }
  }
}

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CoursesApiFp(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {CoursesApiCoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesList(
      requestParameters: CoursesApiCoursesListRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .coursesList(
          requestParameters.department,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.platform,
          requestParameters.resourceType,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesNewRetrieve(
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .coursesNewRetrieve(options)
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {CoursesApiCoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesRetrieve(
      requestParameters: CoursesApiCoursesRetrieveRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .coursesRetrieve(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .coursesUpcomingRetrieve(options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * Request parameters for coursesList operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesListRequest
 */
export interface CoursesApiCoursesListRequest {
  /**
   *
   * @type {number}
   * @memberof CoursesApiCoursesList
   */
  readonly department?: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof CoursesApiCoursesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof CoursesApiCoursesList
   */
  readonly offset?: number

  /**
   *
   * @type {string}
   * @memberof CoursesApiCoursesList
   */
  readonly platform?: string

  /**
   *
   * @type {string}
   * @memberof CoursesApiCoursesList
   */
  readonly resourceType?: string
}

/**
 * Request parameters for coursesRetrieve operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesRetrieveRequest
 */
export interface CoursesApiCoursesRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof CoursesApiCoursesRetrieve
   */
  readonly id: number
}

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {CoursesApiCoursesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesList(
    requestParameters: CoursesApiCoursesListRequest = {},
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .coursesList(
        requestParameters.department,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.platform,
        requestParameters.resourceType,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesNewRetrieve(options?: AxiosRequestConfig) {
    return CoursesApiFp(this.configuration)
      .coursesNewRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {CoursesApiCoursesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesRetrieve(
    requestParameters: CoursesApiCoursesRetrieveRequest,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .coursesRetrieve(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesUpcomingRetrieve(options?: AxiosRequestConfig) {
    return CoursesApiFp(this.configuration)
      .coursesUpcomingRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * LearningResourcesApi - axios parameter creator
 * @export
 */
export const LearningResourcesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for LearningPath Details
     * @param {number} parentId
     * @param {LearningResourceChild} learningResourceChild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenCreate: async (
      parentId: number,
      learningResourceChild: LearningResourceChild,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningResourcesChildrenCreate", "parentId", parentId)
      // verify required parameter 'learningResourceChild' is not null or undefined
      assertParamExists(
        "learningResourcesChildrenCreate",
        "learningResourceChild",
        learningResourceChild
      )
      const localVarPath =
        `/api/v1/learning_resources/{parent_id}/children/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parentId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningResourceChild,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenDestroy: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesChildrenDestroy", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists(
        "learningResourcesChildrenDestroy",
        "parentId",
        parentId
      )
      const localVarPath =
        `/api/v1/learning_resources/{parent_id}/children/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenList: async (
      parentId: number,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningResourcesChildrenList", "parentId", parentId)
      const localVarPath =
        `/api/v1/learning_resources/{parent_id}/children/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parentId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningResourceChild} [patchedLearningResourceChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenPartialUpdate: async (
      id: number,
      parentId: number,
      patchedLearningResourceChild?: PatchedLearningResourceChild,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesChildrenPartialUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists(
        "learningResourcesChildrenPartialUpdate",
        "parentId",
        parentId
      )
      const localVarPath =
        `/api/v1/learning_resources/{parent_id}/children/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedLearningResourceChild,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenRetrieve: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesChildrenRetrieve", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists(
        "learningResourcesChildrenRetrieve",
        "parentId",
        parentId
      )
      const localVarPath =
        `/api/v1/learning_resources/{parent_id}/children/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningResourceChild} learningResourceChild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenUpdate: async (
      id: number,
      parentId: number,
      learningResourceChild: LearningResourceChild,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesChildrenUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningResourcesChildrenUpdate", "parentId", parentId)
      // verify required parameter 'learningResourceChild' is not null or undefined
      assertParamExists(
        "learningResourcesChildrenUpdate",
        "learningResourceChild",
        learningResourceChild
      )
      const localVarPath =
        `/api/v1/learning_resources/{parent_id}/children/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningResourceChild,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [department]
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [platform]
     * @param {string} [resourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesList: async (
      department?: number,
      limit?: number,
      offset?: number,
      platform?: string,
      resourceType?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesNewRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesRetrieve", "id", id)
      const localVarPath = `/api/v1/learning_resources/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesUpcomingRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LearningResourcesApi - functional programming interface
 * @export
 */
export const LearningResourcesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LearningResourcesApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningPath Details
     * @param {number} parentId
     * @param {LearningResourceChild} learningResourceChild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesChildrenCreate(
      parentId: number,
      learningResourceChild: LearningResourceChild,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesChildrenCreate(
          parentId,
          learningResourceChild,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesChildrenDestroy(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesChildrenDestroy(
          id,
          parentId,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesChildrenList(
      parentId: number,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceChildList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesChildrenList(
          parentId,
          limit,
          offset,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningResourceChild} [patchedLearningResourceChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesChildrenPartialUpdate(
      id: number,
      parentId: number,
      patchedLearningResourceChild?: PatchedLearningResourceChild,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesChildrenPartialUpdate(
          id,
          parentId,
          patchedLearningResourceChild,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesChildrenRetrieve(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesChildrenRetrieve(
          id,
          parentId,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningResourceChild} learningResourceChild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesChildrenUpdate(
      id: number,
      parentId: number,
      learningResourceChild: LearningResourceChild,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesChildrenUpdate(
          id,
          parentId,
          learningResourceChild,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [department]
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [platform]
     * @param {string} [resourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesList(
      department?: number,
      limit?: number,
      offset?: number,
      platform?: string,
      resourceType?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesList(
          department,
          limit,
          offset,
          platform,
          resourceType,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesNewRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesNewRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesUpcomingRetrieve(
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    }
  }
}

/**
 * LearningResourcesApi - factory interface
 * @export
 */
export const LearningResourcesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LearningResourcesApiFp(configuration)
  return {
    /**
     * Viewset for LearningPath Details
     * @param {LearningResourcesApiLearningResourcesChildrenCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenCreate(
      requestParameters: LearningResourcesApiLearningResourcesChildrenCreateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .learningResourcesChildrenCreate(
          requestParameters.parentId,
          requestParameters.learningResourceChild,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {LearningResourcesApiLearningResourcesChildrenDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenDestroy(
      requestParameters: LearningResourcesApiLearningResourcesChildrenDestroyRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .learningResourcesChildrenDestroy(
          requestParameters.id,
          requestParameters.parentId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {LearningResourcesApiLearningResourcesChildrenListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenList(
      requestParameters: LearningResourcesApiLearningResourcesChildrenListRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<PaginatedLearningResourceChildList> {
      return localVarFp
        .learningResourcesChildrenList(
          requestParameters.parentId,
          requestParameters.limit,
          requestParameters.offset,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {LearningResourcesApiLearningResourcesChildrenPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenPartialUpdate(
      requestParameters: LearningResourcesApiLearningResourcesChildrenPartialUpdateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .learningResourcesChildrenPartialUpdate(
          requestParameters.id,
          requestParameters.parentId,
          requestParameters.patchedLearningResourceChild,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {LearningResourcesApiLearningResourcesChildrenRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenRetrieve(
      requestParameters: LearningResourcesApiLearningResourcesChildrenRetrieveRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .learningResourcesChildrenRetrieve(
          requestParameters.id,
          requestParameters.parentId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {LearningResourcesApiLearningResourcesChildrenUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesChildrenUpdate(
      requestParameters: LearningResourcesApiLearningResourcesChildrenUpdateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .learningResourcesChildrenUpdate(
          requestParameters.id,
          requestParameters.parentId,
          requestParameters.learningResourceChild,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningResourcesApiLearningResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesList(
      requestParameters: LearningResourcesApiLearningResourcesListRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningResourcesList(
          requestParameters.department,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.platform,
          requestParameters.resourceType,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesNewRetrieve(
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .learningResourcesNewRetrieve(options)
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {LearningResourcesApiLearningResourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesRetrieve(
      requestParameters: LearningResourcesApiLearningResourcesRetrieveRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .learningResourcesRetrieve(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .learningResourcesUpcomingRetrieve(options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * Request parameters for learningResourcesChildrenCreate operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesChildrenCreateRequest
 */
export interface LearningResourcesApiLearningResourcesChildrenCreateRequest {
  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenCreate
   */
  readonly parentId: number

  /**
   *
   * @type {LearningResourceChild}
   * @memberof LearningResourcesApiLearningResourcesChildrenCreate
   */
  readonly learningResourceChild: LearningResourceChild
}

/**
 * Request parameters for learningResourcesChildrenDestroy operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesChildrenDestroyRequest
 */
export interface LearningResourcesApiLearningResourcesChildrenDestroyRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenDestroy
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenDestroy
   */
  readonly parentId: number
}

/**
 * Request parameters for learningResourcesChildrenList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesChildrenListRequest
 */
export interface LearningResourcesApiLearningResourcesChildrenListRequest {
  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenList
   */
  readonly parentId: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenList
   */
  readonly offset?: number
}

/**
 * Request parameters for learningResourcesChildrenPartialUpdate operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesChildrenPartialUpdateRequest
 */
export interface LearningResourcesApiLearningResourcesChildrenPartialUpdateRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenPartialUpdate
   */
  readonly parentId: number

  /**
   *
   * @type {PatchedLearningResourceChild}
   * @memberof LearningResourcesApiLearningResourcesChildrenPartialUpdate
   */
  readonly patchedLearningResourceChild?: PatchedLearningResourceChild
}

/**
 * Request parameters for learningResourcesChildrenRetrieve operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesChildrenRetrieveRequest
 */
export interface LearningResourcesApiLearningResourcesChildrenRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenRetrieve
   */
  readonly parentId: number
}

/**
 * Request parameters for learningResourcesChildrenUpdate operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesChildrenUpdateRequest
 */
export interface LearningResourcesApiLearningResourcesChildrenUpdateRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesChildrenUpdate
   */
  readonly parentId: number

  /**
   *
   * @type {LearningResourceChild}
   * @memberof LearningResourcesApiLearningResourcesChildrenUpdate
   */
  readonly learningResourceChild: LearningResourceChild
}

/**
 * Request parameters for learningResourcesList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesListRequest
 */
export interface LearningResourcesApiLearningResourcesListRequest {
  /**
   *
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly department?: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly offset?: number

  /**
   *
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly platform?: string

  /**
   *
   * @type {string}
   * @memberof LearningResourcesApiLearningResourcesList
   */
  readonly resourceType?: string
}

/**
 * Request parameters for learningResourcesRetrieve operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesRetrieveRequest
 */
export interface LearningResourcesApiLearningResourcesRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningResourcesApiLearningResourcesRetrieve
   */
  readonly id: number
}

/**
 * LearningResourcesApi - object-oriented interface
 * @export
 * @class LearningResourcesApi
 * @extends {BaseAPI}
 */
export class LearningResourcesApi extends BaseAPI {
  /**
   * Viewset for LearningPath Details
   * @param {LearningResourcesApiLearningResourcesChildrenCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesChildrenCreate(
    requestParameters: LearningResourcesApiLearningResourcesChildrenCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesChildrenCreate(
        requestParameters.parentId,
        requestParameters.learningResourceChild,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {LearningResourcesApiLearningResourcesChildrenDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesChildrenDestroy(
    requestParameters: LearningResourcesApiLearningResourcesChildrenDestroyRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesChildrenDestroy(
        requestParameters.id,
        requestParameters.parentId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {LearningResourcesApiLearningResourcesChildrenListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesChildrenList(
    requestParameters: LearningResourcesApiLearningResourcesChildrenListRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesChildrenList(
        requestParameters.parentId,
        requestParameters.limit,
        requestParameters.offset,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {LearningResourcesApiLearningResourcesChildrenPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesChildrenPartialUpdate(
    requestParameters: LearningResourcesApiLearningResourcesChildrenPartialUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesChildrenPartialUpdate(
        requestParameters.id,
        requestParameters.parentId,
        requestParameters.patchedLearningResourceChild,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {LearningResourcesApiLearningResourcesChildrenRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesChildrenRetrieve(
    requestParameters: LearningResourcesApiLearningResourcesChildrenRetrieveRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesChildrenRetrieve(
        requestParameters.id,
        requestParameters.parentId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {LearningResourcesApiLearningResourcesChildrenUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesChildrenUpdate(
    requestParameters: LearningResourcesApiLearningResourcesChildrenUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesChildrenUpdate(
        requestParameters.id,
        requestParameters.parentId,
        requestParameters.learningResourceChild,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {LearningResourcesApiLearningResourcesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesList(
    requestParameters: LearningResourcesApiLearningResourcesListRequest = {},
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesList(
        requestParameters.department,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.platform,
        requestParameters.resourceType,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesNewRetrieve(options?: AxiosRequestConfig) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesNewRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {LearningResourcesApiLearningResourcesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesRetrieve(
    requestParameters: LearningResourcesApiLearningResourcesRetrieveRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesRetrieve(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesUpcomingRetrieve(options?: AxiosRequestConfig) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesUpcomingRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * LearningpathsApi - axios parameter creator
 * @export
 */
export const LearningpathsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningPathResource} learningPathResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsCreate: async (
      learningPathResource: LearningPathResource,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'learningPathResource' is not null or undefined
      assertParamExists(
        "learningpathsCreate",
        "learningPathResource",
        learningPathResource
      )
      const localVarPath = `/api/v1/learningpaths/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningPathResource,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsDestroy", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get all learningpaths for learningpath editors, public learningpaths for all others
     * @param {number} [department]
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [platform]
     * @param {string} [resourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsList: async (
      department?: number,
      limit?: number,
      offset?: number,
      platform?: string,
      resourceType?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsNewRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {PatchedLearningPathResource} [patchedLearningPathResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsPartialUpdate: async (
      id: number,
      patchedLearningPathResource?: PatchedLearningPathResource,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsPartialUpdate", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedLearningPathResource,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} parentId
     * @param {LearningResourceRelationship} learningResourceRelationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesCreate: async (
      parentId: number,
      learningResourceRelationship: LearningResourceRelationship,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesCreate", "parentId", parentId)
      // verify required parameter 'learningResourceRelationship' is not null or undefined
      assertParamExists(
        "learningpathsResourcesCreate",
        "learningResourceRelationship",
        learningResourceRelationship
      )
      const localVarPath =
        `/api/v1/learningpaths/{parent_id}/resources/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parentId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningResourceRelationship,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesDestroy: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesDestroy", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesDestroy", "parentId", parentId)
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesList: async (
      parentId: number,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesList", "parentId", parentId)
      const localVarPath =
        `/api/v1/learningpaths/{parent_id}/resources/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parentId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningResourceRelationship} [patchedLearningResourceRelationship]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesPartialUpdate: async (
      id: number,
      parentId: number,
      patchedLearningResourceRelationship?: PatchedLearningResourceRelationship,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesPartialUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists(
        "learningpathsResourcesPartialUpdate",
        "parentId",
        parentId
      )
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedLearningResourceRelationship,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesRetrieve: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesRetrieve", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesRetrieve", "parentId", parentId)
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningResourceRelationship} learningResourceRelationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesUpdate: async (
      id: number,
      parentId: number,
      learningResourceRelationship: LearningResourceRelationship,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesUpdate", "parentId", parentId)
      // verify required parameter 'learningResourceRelationship' is not null or undefined
      assertParamExists(
        "learningpathsResourcesUpdate",
        "learningResourceRelationship",
        learningResourceRelationship
      )
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningResourceRelationship,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsRetrieve", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpcomingRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {LearningPathResource} learningPathResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpdate: async (
      id: number,
      learningPathResource: LearningPathResource,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsUpdate", "id", id)
      // verify required parameter 'learningPathResource' is not null or undefined
      assertParamExists(
        "learningpathsUpdate",
        "learningPathResource",
        learningPathResource
      )
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningPathResource,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LearningpathsApi - functional programming interface
 * @export
 */
export const LearningpathsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LearningpathsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningPathResource} learningPathResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsCreate(
      learningPathResource: LearningPathResource,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsCreate(
          learningPathResource,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsDestroy(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get all learningpaths for learningpath editors, public learningpaths for all others
     * @param {number} [department]
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [platform]
     * @param {string} [resourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsList(
      department?: number,
      limit?: number,
      offset?: number,
      platform?: string,
      resourceType?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningPathResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsList(
          department,
          limit,
          offset,
          platform,
          resourceType,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsNewRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsNewRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {PatchedLearningPathResource} [patchedLearningPathResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsPartialUpdate(
      id: number,
      patchedLearningPathResource?: PatchedLearningPathResource,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsPartialUpdate(
          id,
          patchedLearningPathResource,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} parentId
     * @param {LearningResourceRelationship} learningResourceRelationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesCreate(
      parentId: number,
      learningResourceRelationship: LearningResourceRelationship,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesCreate(
          parentId,
          learningResourceRelationship,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesDestroy(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesDestroy(
          id,
          parentId,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesList(
      parentId: number,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceRelationshipList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesList(
          parentId,
          limit,
          offset,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningResourceRelationship} [patchedLearningResourceRelationship]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesPartialUpdate(
      id: number,
      parentId: number,
      patchedLearningResourceRelationship?: PatchedLearningResourceRelationship,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesPartialUpdate(
          id,
          parentId,
          patchedLearningResourceRelationship,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesRetrieve(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesRetrieve(
          id,
          parentId,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningResourceRelationship} learningResourceRelationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesUpdate(
      id: number,
      parentId: number,
      learningResourceRelationship: LearningResourceRelationship,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesUpdate(
          id,
          parentId,
          learningResourceRelationship,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsUpcomingRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {LearningPathResource} learningPathResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsUpdate(
      id: number,
      learningPathResource: LearningPathResource,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsUpdate(
          id,
          learningPathResource,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    }
  }
}

/**
 * LearningpathsApi - factory interface
 * @export
 */
export const LearningpathsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LearningpathsApiFp(configuration)
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsCreate(
      requestParameters: LearningpathsApiLearningpathsCreateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsCreate(requestParameters.learningPathResource, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsDestroy(
      requestParameters: LearningpathsApiLearningpathsDestroyRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .learningpathsDestroy(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get all learningpaths for learningpath editors, public learningpaths for all others
     * @param {LearningpathsApiLearningpathsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsList(
      requestParameters: LearningpathsApiLearningpathsListRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<PaginatedLearningPathResourceList> {
      return localVarFp
        .learningpathsList(
          requestParameters.department,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.platform,
          requestParameters.resourceType,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsNewRetrieve(
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsNewRetrieve(options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsPartialUpdate(
      requestParameters: LearningpathsApiLearningpathsPartialUpdateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsPartialUpdate(
          requestParameters.id,
          requestParameters.patchedLearningPathResource,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {LearningpathsApiLearningpathsResourcesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesCreate(
      requestParameters: LearningpathsApiLearningpathsResourcesCreateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceRelationship> {
      return localVarFp
        .learningpathsResourcesCreate(
          requestParameters.parentId,
          requestParameters.learningResourceRelationship,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {LearningpathsApiLearningpathsResourcesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesDestroy(
      requestParameters: LearningpathsApiLearningpathsResourcesDestroyRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .learningpathsResourcesDestroy(
          requestParameters.id,
          requestParameters.parentId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {LearningpathsApiLearningpathsResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesList(
      requestParameters: LearningpathsApiLearningpathsResourcesListRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<PaginatedLearningResourceRelationshipList> {
      return localVarFp
        .learningpathsResourcesList(
          requestParameters.parentId,
          requestParameters.limit,
          requestParameters.offset,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {LearningpathsApiLearningpathsResourcesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesPartialUpdate(
      requestParameters: LearningpathsApiLearningpathsResourcesPartialUpdateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceRelationship> {
      return localVarFp
        .learningpathsResourcesPartialUpdate(
          requestParameters.id,
          requestParameters.parentId,
          requestParameters.patchedLearningResourceRelationship,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {LearningpathsApiLearningpathsResourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesRetrieve(
      requestParameters: LearningpathsApiLearningpathsResourcesRetrieveRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceRelationship> {
      return localVarFp
        .learningpathsResourcesRetrieve(
          requestParameters.id,
          requestParameters.parentId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Item Details
     * @param {LearningpathsApiLearningpathsResourcesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesUpdate(
      requestParameters: LearningpathsApiLearningpathsResourcesUpdateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceRelationship> {
      return localVarFp
        .learningpathsResourcesUpdate(
          requestParameters.id,
          requestParameters.parentId,
          requestParameters.learningResourceRelationship,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {LearningpathsApiLearningpathsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsRetrieve(
      requestParameters: LearningpathsApiLearningpathsRetrieveRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsRetrieve(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsUpcomingRetrieve(options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpdate(
      requestParameters: LearningpathsApiLearningpathsUpdateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsUpdate(
          requestParameters.id,
          requestParameters.learningPathResource,
          options
        )
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * Request parameters for learningpathsCreate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsCreateRequest
 */
export interface LearningpathsApiLearningpathsCreateRequest {
  /**
   *
   * @type {LearningPathResource}
   * @memberof LearningpathsApiLearningpathsCreate
   */
  readonly learningPathResource: LearningPathResource
}

/**
 * Request parameters for learningpathsDestroy operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsDestroyRequest
 */
export interface LearningpathsApiLearningpathsDestroyRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsDestroy
   */
  readonly id: number
}

/**
 * Request parameters for learningpathsList operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsListRequest
 */
export interface LearningpathsApiLearningpathsListRequest {
  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly department?: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly offset?: number

  /**
   *
   * @type {string}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly platform?: string

  /**
   *
   * @type {string}
   * @memberof LearningpathsApiLearningpathsList
   */
  readonly resourceType?: string
}

/**
 * Request parameters for learningpathsPartialUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsPartialUpdateRequest
 */
export interface LearningpathsApiLearningpathsPartialUpdateRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {PatchedLearningPathResource}
   * @memberof LearningpathsApiLearningpathsPartialUpdate
   */
  readonly patchedLearningPathResource?: PatchedLearningPathResource
}

/**
 * Request parameters for learningpathsResourcesCreate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesCreateRequest
 */
export interface LearningpathsApiLearningpathsResourcesCreateRequest {
  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesCreate
   */
  readonly parentId: number

  /**
   *
   * @type {LearningResourceRelationship}
   * @memberof LearningpathsApiLearningpathsResourcesCreate
   */
  readonly learningResourceRelationship: LearningResourceRelationship
}

/**
 * Request parameters for learningpathsResourcesDestroy operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesDestroyRequest
 */
export interface LearningpathsApiLearningpathsResourcesDestroyRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesDestroy
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesDestroy
   */
  readonly parentId: number
}

/**
 * Request parameters for learningpathsResourcesList operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesListRequest
 */
export interface LearningpathsApiLearningpathsResourcesListRequest {
  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesList
   */
  readonly parentId: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesList
   */
  readonly offset?: number
}

/**
 * Request parameters for learningpathsResourcesPartialUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesPartialUpdateRequest
 */
export interface LearningpathsApiLearningpathsResourcesPartialUpdateRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
   */
  readonly parentId: number

  /**
   *
   * @type {PatchedLearningResourceRelationship}
   * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
   */
  readonly patchedLearningResourceRelationship?: PatchedLearningResourceRelationship
}

/**
 * Request parameters for learningpathsResourcesRetrieve operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesRetrieveRequest
 */
export interface LearningpathsApiLearningpathsResourcesRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesRetrieve
   */
  readonly parentId: number
}

/**
 * Request parameters for learningpathsResourcesUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesUpdateRequest
 */
export interface LearningpathsApiLearningpathsResourcesUpdateRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof LearningpathsApiLearningpathsResourcesUpdate
   */
  readonly parentId: number

  /**
   *
   * @type {LearningResourceRelationship}
   * @memberof LearningpathsApiLearningpathsResourcesUpdate
   */
  readonly learningResourceRelationship: LearningResourceRelationship
}

/**
 * Request parameters for learningpathsRetrieve operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsRetrieveRequest
 */
export interface LearningpathsApiLearningpathsRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsRetrieve
   */
  readonly id: number
}

/**
 * Request parameters for learningpathsUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsUpdateRequest
 */
export interface LearningpathsApiLearningpathsUpdateRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof LearningpathsApiLearningpathsUpdate
   */
  readonly id: number

  /**
   *
   * @type {LearningPathResource}
   * @memberof LearningpathsApiLearningpathsUpdate
   */
  readonly learningPathResource: LearningPathResource
}

/**
 * LearningpathsApi - object-oriented interface
 * @export
 * @class LearningpathsApi
 * @extends {BaseAPI}
 */
export class LearningpathsApi extends BaseAPI {
  /**
   * Viewset for LearningPaths
   * @param {LearningpathsApiLearningpathsCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsCreate(
    requestParameters: LearningpathsApiLearningpathsCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsCreate(requestParameters.learningPathResource, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {LearningpathsApiLearningpathsDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsDestroy(
    requestParameters: LearningpathsApiLearningpathsDestroyRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsDestroy(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get all learningpaths for learningpath editors, public learningpaths for all others
   * @param {LearningpathsApiLearningpathsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsList(
    requestParameters: LearningpathsApiLearningpathsListRequest = {},
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsList(
        requestParameters.department,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.platform,
        requestParameters.resourceType,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsNewRetrieve(options?: AxiosRequestConfig) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsNewRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {LearningpathsApiLearningpathsPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsPartialUpdate(
    requestParameters: LearningpathsApiLearningpathsPartialUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsPartialUpdate(
        requestParameters.id,
        requestParameters.patchedLearningPathResource,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Item Details
   * @param {LearningpathsApiLearningpathsResourcesCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesCreate(
    requestParameters: LearningpathsApiLearningpathsResourcesCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesCreate(
        requestParameters.parentId,
        requestParameters.learningResourceRelationship,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Item Details
   * @param {LearningpathsApiLearningpathsResourcesDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesDestroy(
    requestParameters: LearningpathsApiLearningpathsResourcesDestroyRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesDestroy(
        requestParameters.id,
        requestParameters.parentId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Item Details
   * @param {LearningpathsApiLearningpathsResourcesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesList(
    requestParameters: LearningpathsApiLearningpathsResourcesListRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesList(
        requestParameters.parentId,
        requestParameters.limit,
        requestParameters.offset,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Item Details
   * @param {LearningpathsApiLearningpathsResourcesPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesPartialUpdate(
    requestParameters: LearningpathsApiLearningpathsResourcesPartialUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesPartialUpdate(
        requestParameters.id,
        requestParameters.parentId,
        requestParameters.patchedLearningResourceRelationship,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Item Details
   * @param {LearningpathsApiLearningpathsResourcesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesRetrieve(
    requestParameters: LearningpathsApiLearningpathsResourcesRetrieveRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesRetrieve(
        requestParameters.id,
        requestParameters.parentId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Item Details
   * @param {LearningpathsApiLearningpathsResourcesUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesUpdate(
    requestParameters: LearningpathsApiLearningpathsResourcesUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesUpdate(
        requestParameters.id,
        requestParameters.parentId,
        requestParameters.learningResourceRelationship,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {LearningpathsApiLearningpathsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsRetrieve(
    requestParameters: LearningpathsApiLearningpathsRetrieveRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsRetrieve(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsUpcomingRetrieve(options?: AxiosRequestConfig) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsUpcomingRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {LearningpathsApiLearningpathsUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsUpdate(
    requestParameters: LearningpathsApiLearningpathsUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsUpdate(
        requestParameters.id,
        requestParameters.learningPathResource,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for LearningPath Details
     * @param {number} parentId
     * @param {LearningResourceChild} learningResourceChild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesCreate: async (
      parentId: number,
      learningResourceChild: LearningResourceChild,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("programsCoursesCreate", "parentId", parentId)
      // verify required parameter 'learningResourceChild' is not null or undefined
      assertParamExists(
        "programsCoursesCreate",
        "learningResourceChild",
        learningResourceChild
      )
      const localVarPath = `/api/v1/programs/{parent_id}/courses/`.replace(
        `{${"parent_id"}}`,
        encodeURIComponent(String(parentId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningResourceChild,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesDestroy: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("programsCoursesDestroy", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("programsCoursesDestroy", "parentId", parentId)
      const localVarPath = `/api/v1/programs/{parent_id}/courses/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesList: async (
      parentId: number,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("programsCoursesList", "parentId", parentId)
      const localVarPath = `/api/v1/programs/{parent_id}/courses/`.replace(
        `{${"parent_id"}}`,
        encodeURIComponent(String(parentId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningResourceChild} [patchedLearningResourceChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesPartialUpdate: async (
      id: number,
      parentId: number,
      patchedLearningResourceChild?: PatchedLearningResourceChild,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("programsCoursesPartialUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("programsCoursesPartialUpdate", "parentId", parentId)
      const localVarPath = `/api/v1/programs/{parent_id}/courses/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedLearningResourceChild,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesRetrieve: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("programsCoursesRetrieve", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("programsCoursesRetrieve", "parentId", parentId)
      const localVarPath = `/api/v1/programs/{parent_id}/courses/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningResourceChild} learningResourceChild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesUpdate: async (
      id: number,
      parentId: number,
      learningResourceChild: LearningResourceChild,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("programsCoursesUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("programsCoursesUpdate", "parentId", parentId)
      // verify required parameter 'learningResourceChild' is not null or undefined
      assertParamExists(
        "programsCoursesUpdate",
        "learningResourceChild",
        learningResourceChild
      )
      const localVarPath = `/api/v1/programs/{parent_id}/courses/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningResourceChild,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [department]
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [platform]
     * @param {string} [resourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsList: async (
      department?: number,
      limit?: number,
      offset?: number,
      platform?: string,
      resourceType?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsNewRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("programsRetrieve", "id", id)
      const localVarPath = `/api/v1/programs/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsUpcomingRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProgramsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningPath Details
     * @param {number} parentId
     * @param {LearningResourceChild} learningResourceChild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsCoursesCreate(
      parentId: number,
      learningResourceChild: LearningResourceChild,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsCoursesCreate(
          parentId,
          learningResourceChild,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsCoursesDestroy(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsCoursesDestroy(
          id,
          parentId,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsCoursesList(
      parentId: number,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceChildList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsCoursesList(
          parentId,
          limit,
          offset,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningResourceChild} [patchedLearningResourceChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsCoursesPartialUpdate(
      id: number,
      parentId: number,
      patchedLearningResourceChild?: PatchedLearningResourceChild,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsCoursesPartialUpdate(
          id,
          parentId,
          patchedLearningResourceChild,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsCoursesRetrieve(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsCoursesRetrieve(
          id,
          parentId,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Viewset for LearningPath Details
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningResourceChild} learningResourceChild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsCoursesUpdate(
      id: number,
      parentId: number,
      learningResourceChild: LearningResourceChild,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsCoursesUpdate(
          id,
          parentId,
          learningResourceChild,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [department]
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [platform]
     * @param {string} [resourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsList(
      department?: number,
      limit?: number,
      offset?: number,
      platform?: string,
      resourceType?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.programsList(
        department,
        limit,
        offset,
        platform,
        resourceType,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsNewRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsNewRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsUpcomingRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    }
  }
}

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProgramsApiFp(configuration)
  return {
    /**
     * Viewset for LearningPath Details
     * @param {ProgramsApiProgramsCoursesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesCreate(
      requestParameters: ProgramsApiProgramsCoursesCreateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .programsCoursesCreate(
          requestParameters.parentId,
          requestParameters.learningResourceChild,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {ProgramsApiProgramsCoursesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesDestroy(
      requestParameters: ProgramsApiProgramsCoursesDestroyRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .programsCoursesDestroy(
          requestParameters.id,
          requestParameters.parentId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {ProgramsApiProgramsCoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesList(
      requestParameters: ProgramsApiProgramsCoursesListRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<PaginatedLearningResourceChildList> {
      return localVarFp
        .programsCoursesList(
          requestParameters.parentId,
          requestParameters.limit,
          requestParameters.offset,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {ProgramsApiProgramsCoursesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesPartialUpdate(
      requestParameters: ProgramsApiProgramsCoursesPartialUpdateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .programsCoursesPartialUpdate(
          requestParameters.id,
          requestParameters.parentId,
          requestParameters.patchedLearningResourceChild,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {ProgramsApiProgramsCoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesRetrieve(
      requestParameters: ProgramsApiProgramsCoursesRetrieveRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .programsCoursesRetrieve(
          requestParameters.id,
          requestParameters.parentId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath Details
     * @param {ProgramsApiProgramsCoursesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsCoursesUpdate(
      requestParameters: ProgramsApiProgramsCoursesUpdateRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .programsCoursesUpdate(
          requestParameters.id,
          requestParameters.parentId,
          requestParameters.learningResourceChild,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {ProgramsApiProgramsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsList(
      requestParameters: ProgramsApiProgramsListRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .programsList(
          requestParameters.department,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.platform,
          requestParameters.resourceType,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsNewRetrieve(
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .programsNewRetrieve(options)
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {ProgramsApiProgramsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieve(
      requestParameters: ProgramsApiProgramsRetrieveRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .programsRetrieve(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .programsUpcomingRetrieve(options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * Request parameters for programsCoursesCreate operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsCoursesCreateRequest
 */
export interface ProgramsApiProgramsCoursesCreateRequest {
  /**
   *
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesCreate
   */
  readonly parentId: number

  /**
   *
   * @type {LearningResourceChild}
   * @memberof ProgramsApiProgramsCoursesCreate
   */
  readonly learningResourceChild: LearningResourceChild
}

/**
 * Request parameters for programsCoursesDestroy operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsCoursesDestroyRequest
 */
export interface ProgramsApiProgramsCoursesDestroyRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesDestroy
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesDestroy
   */
  readonly parentId: number
}

/**
 * Request parameters for programsCoursesList operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsCoursesListRequest
 */
export interface ProgramsApiProgramsCoursesListRequest {
  /**
   *
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesList
   */
  readonly parentId: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesList
   */
  readonly offset?: number
}

/**
 * Request parameters for programsCoursesPartialUpdate operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsCoursesPartialUpdateRequest
 */
export interface ProgramsApiProgramsCoursesPartialUpdateRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesPartialUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesPartialUpdate
   */
  readonly parentId: number

  /**
   *
   * @type {PatchedLearningResourceChild}
   * @memberof ProgramsApiProgramsCoursesPartialUpdate
   */
  readonly patchedLearningResourceChild?: PatchedLearningResourceChild
}

/**
 * Request parameters for programsCoursesRetrieve operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsCoursesRetrieveRequest
 */
export interface ProgramsApiProgramsCoursesRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesRetrieve
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesRetrieve
   */
  readonly parentId: number
}

/**
 * Request parameters for programsCoursesUpdate operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsCoursesUpdateRequest
 */
export interface ProgramsApiProgramsCoursesUpdateRequest {
  /**
   * A unique integer value identifying this learning resource relationship.
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesUpdate
   */
  readonly id: number

  /**
   *
   * @type {number}
   * @memberof ProgramsApiProgramsCoursesUpdate
   */
  readonly parentId: number

  /**
   *
   * @type {LearningResourceChild}
   * @memberof ProgramsApiProgramsCoursesUpdate
   */
  readonly learningResourceChild: LearningResourceChild
}

/**
 * Request parameters for programsList operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsListRequest
 */
export interface ProgramsApiProgramsListRequest {
  /**
   *
   * @type {number}
   * @memberof ProgramsApiProgramsList
   */
  readonly department?: number

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ProgramsApiProgramsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ProgramsApiProgramsList
   */
  readonly offset?: number

  /**
   *
   * @type {string}
   * @memberof ProgramsApiProgramsList
   */
  readonly platform?: string

  /**
   *
   * @type {string}
   * @memberof ProgramsApiProgramsList
   */
  readonly resourceType?: string
}

/**
 * Request parameters for programsRetrieve operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsRetrieveRequest
 */
export interface ProgramsApiProgramsRetrieveRequest {
  /**
   * A unique integer value identifying this learning resource.
   * @type {number}
   * @memberof ProgramsApiProgramsRetrieve
   */
  readonly id: number
}

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
  /**
   * Viewset for LearningPath Details
   * @param {ProgramsApiProgramsCoursesCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsCoursesCreate(
    requestParameters: ProgramsApiProgramsCoursesCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsCoursesCreate(
        requestParameters.parentId,
        requestParameters.learningResourceChild,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {ProgramsApiProgramsCoursesDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsCoursesDestroy(
    requestParameters: ProgramsApiProgramsCoursesDestroyRequest,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsCoursesDestroy(
        requestParameters.id,
        requestParameters.parentId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {ProgramsApiProgramsCoursesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsCoursesList(
    requestParameters: ProgramsApiProgramsCoursesListRequest,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsCoursesList(
        requestParameters.parentId,
        requestParameters.limit,
        requestParameters.offset,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {ProgramsApiProgramsCoursesPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsCoursesPartialUpdate(
    requestParameters: ProgramsApiProgramsCoursesPartialUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsCoursesPartialUpdate(
        requestParameters.id,
        requestParameters.parentId,
        requestParameters.patchedLearningResourceChild,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {ProgramsApiProgramsCoursesRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsCoursesRetrieve(
    requestParameters: ProgramsApiProgramsCoursesRetrieveRequest,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsCoursesRetrieve(
        requestParameters.id,
        requestParameters.parentId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath Details
   * @param {ProgramsApiProgramsCoursesUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsCoursesUpdate(
    requestParameters: ProgramsApiProgramsCoursesUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsCoursesUpdate(
        requestParameters.id,
        requestParameters.parentId,
        requestParameters.learningResourceChild,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {ProgramsApiProgramsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsList(
    requestParameters: ProgramsApiProgramsListRequest = {},
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsList(
        requestParameters.department,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.platform,
        requestParameters.resourceType,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsNewRetrieve(options?: AxiosRequestConfig) {
    return ProgramsApiFp(this.configuration)
      .programsNewRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {ProgramsApiProgramsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsRetrieve(
    requestParameters: ProgramsApiProgramsRetrieveRequest,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsRetrieve(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsUpcomingRetrieve(options?: AxiosRequestConfig) {
    return ProgramsApiFp(this.configuration)
      .programsUpcomingRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }
}
