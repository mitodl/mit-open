/* tslint:disable */
/* eslint-disable */
/**
 * MIT Open Discussions Course Catalog API
 * Open Discussions public API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base"

/**
 * Serializer for the Course model
 * @export
 * @interface Course
 */
export interface Course {
  /**
   *
   * @type {Array<string>}
   * @memberof Course
   */
  extra_course_numbers?: Array<string> | null
}
/**
 * Full serializer for LearningResource
 * @export
 * @interface LearningResource
 */
export interface LearningResource {
  /**
   *
   * @type {number}
   * @memberof LearningResource
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResource
   */
  topics: Array<LearningResourceTopic> | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  offered_by: Array<string> | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResource
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {LearningResourceDepartment}
   * @memberof LearningResource
   */
  department: LearningResourceDepartment | null
  /**
   * Returns the audience for the course
   * @type {string}
   * @memberof LearningResource
   */
  audience: string | null
  /**
   * Returns the certification for the course
   * @type {string}
   * @memberof LearningResource
   */
  certification: string | null
  /**
   *
   * @type {Course}
   * @memberof LearningResource
   */
  course: Course | null
  /**
   *
   * @type {Program}
   * @memberof LearningResource
   */
  program: Program | null
  /**
   *
   * @type {Array<LearningResourceRun>}
   * @memberof LearningResource
   */
  runs: Array<LearningResourceRun> | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResource
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  resource_type: string
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  prices?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  platform: string | null
}
/**
 * Serializer for LearningResource, minus program, course
 * @export
 * @interface LearningResourceBase
 */
export interface LearningResourceBase {
  /**
   *
   * @type {number}
   * @memberof LearningResourceBase
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResourceBase
   */
  topics: Array<LearningResourceTopic> | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  offered_by: Array<string> | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResourceBase
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {LearningResourceDepartment}
   * @memberof LearningResourceBase
   */
  department: LearningResourceDepartment | null
  /**
   * Returns the audience for the course
   * @type {string}
   * @memberof LearningResourceBase
   */
  audience: string | null
  /**
   * Returns the certification for the course
   * @type {string}
   * @memberof LearningResourceBase
   */
  certification: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  created_on: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  updated_on: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceBase
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  resource_type: string
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  prices?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  platform: string | null
}
/**
 * Serializer for LearningResourceDepartment
 * @export
 * @interface LearningResourceDepartment
 */
export interface LearningResourceDepartment {
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartment
   */
  department_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartment
   */
  name: string
}
/**
 * Serializer for LearningResourceImage
 * @export
 * @interface LearningResourceImage
 */
export interface LearningResourceImage {
  /**
   *
   * @type {number}
   * @memberof LearningResourceImage
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  url?: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  alt?: string | null
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface LearningResourceInstructor
 */
export interface LearningResourceInstructor {
  /**
   *
   * @type {number}
   * @memberof LearningResourceInstructor
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  first_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  last_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  full_name?: string | null
}
/**
 * Serializer for the LearningResourceRun model
 * @export
 * @interface LearningResourceRun
 */
export interface LearningResourceRun {
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceInstructor>}
   * @memberof LearningResourceRun
   */
  instructors: Array<LearningResourceInstructor> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResourceRun
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  run_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceRun
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRun
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  level?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  slug?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  availability?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  semester?: string | null
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  year?: number | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  start_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  end_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  enrollment_start?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  enrollment_end?: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRun
   */
  prices?: Array<string> | null
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  learning_resource: number
}
/**
 * Serializer for LearningResourceTopic model
 * @export
 * @interface LearningResourceTopic
 */
export interface LearningResourceTopic {
  /**
   *
   * @type {number}
   * @memberof LearningResourceTopic
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceTopic
   */
  name: string
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceList
 */
export interface PaginatedLearningResourceList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResource>}
   * @memberof PaginatedLearningResourceList
   */
  results?: Array<LearningResource>
}
/**
 * Serializer for the Program model
 * @export
 * @interface Program
 */
export interface Program {
  /**
   *
   * @type {Array<LearningResourceBase>}
   * @memberof Program
   */
  courses: Array<LearningResourceBase> | null
}

/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesNewRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("coursesRetrieve", "id", id)
      const localVarPath = `/api/v1/courses/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesUpcomingRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesList(
        limit,
        offset,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesNewRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesNewRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesRetrieve(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesUpcomingRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    }
  }
}

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CoursesApiFp(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesList(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .coursesList(limit, offset, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesNewRetrieve(options?: any): AxiosPromise<LearningResource> {
      return localVarFp
        .coursesNewRetrieve(options)
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesRetrieve(id: number, options?: any): AxiosPromise<LearningResource> {
      return localVarFp
        .coursesRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesUpcomingRetrieve(options?: any): AxiosPromise<LearningResource> {
      return localVarFp
        .coursesUpcomingRetrieve(options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesList(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .coursesList(limit, offset, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesNewRetrieve(options?: AxiosRequestConfig) {
    return CoursesApiFp(this.configuration)
      .coursesNewRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesRetrieve(id: number, options?: AxiosRequestConfig) {
    return CoursesApiFp(this.configuration)
      .coursesRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesUpcomingRetrieve(options?: AxiosRequestConfig) {
    return CoursesApiFp(this.configuration)
      .coursesUpcomingRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * LearningResourcesApi - axios parameter creator
 * @export
 */
export const LearningResourcesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesNewRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesRetrieve", "id", id)
      const localVarPath = `/api/v1/learning_resources/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesUpcomingRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LearningResourcesApi - functional programming interface
 * @export
 */
export const LearningResourcesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LearningResourcesApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesList(
          limit,
          offset,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesNewRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesNewRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesUpcomingRetrieve(
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    }
  }
}

/**
 * LearningResourcesApi - factory interface
 * @export
 */
export const LearningResourcesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LearningResourcesApiFp(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesList(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningResourcesList(limit, offset, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesNewRetrieve(
      options?: any
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .learningResourcesNewRetrieve(options)
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesRetrieve(
      id: number,
      options?: any
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .learningResourcesRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesUpcomingRetrieve(
      options?: any
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .learningResourcesUpcomingRetrieve(options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * LearningResourcesApi - object-oriented interface
 * @export
 * @class LearningResourcesApi
 * @extends {BaseAPI}
 */
export class LearningResourcesApi extends BaseAPI {
  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesList(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesList(limit, offset, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesNewRetrieve(options?: AxiosRequestConfig) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesNewRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesRetrieve(id: number, options?: AxiosRequestConfig) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesUpcomingRetrieve(options?: AxiosRequestConfig) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesUpcomingRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsNewRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("programsRetrieve", "id", id)
      const localVarPath = `/api/v1/programs/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsUpcomingRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProgramsApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.programsList(
        limit,
        offset,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsNewRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsNewRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsRetrieve(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsUpcomingRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsUpcomingRetrieve(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    }
  }
}

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProgramsApiFp(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsList(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .programsList(limit, offset, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsNewRetrieve(options?: any): AxiosPromise<LearningResource> {
      return localVarFp
        .programsNewRetrieve(options)
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieve(
      id: number,
      options?: any
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .programsRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsUpcomingRetrieve(options?: any): AxiosPromise<LearningResource> {
      return localVarFp
        .programsUpcomingRetrieve(options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsList(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsList(limit, offset, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsNewRetrieve(options?: AxiosRequestConfig) {
    return ProgramsApiFp(this.configuration)
      .programsNewRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsRetrieve(id: number, options?: AxiosRequestConfig) {
    return ProgramsApiFp(this.configuration)
      .programsRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsUpcomingRetrieve(options?: AxiosRequestConfig) {
    return ProgramsApiFp(this.configuration)
      .programsUpcomingRetrieve(options)
      .then(request => request(this.axios, this.basePath))
  }
}
