/* tslint:disable */
/* eslint-disable */
/**
 * MIT Open Discussions Course Catalog API
 * Open Discussions public API
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Serializer for the Course model
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {Array<string>}
     * @memberof Course
     */
    'extra_course_numbers'?: Array<string> | null;
}
/**
 * Serializer for LearningResource
 * @export
 * @interface CourseResource
 */
export interface CourseResource {
    /**
     * 
     * @type {number}
     * @memberof CourseResource
     */
    'id': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CourseResource
     */
    'offered_by': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CourseResource
     */
    'resource_content_tags': Array<string> | null;
    /**
     * 
     * @type {LearningResourceImage}
     * @memberof CourseResource
     */
    'image': LearningResourceImage | null;
    /**
     * 
     * @type {LearningResourceDepartment}
     * @memberof CourseResource
     */
    'department': LearningResourceDepartment | null;
    /**
     * Returns the audience for the learning resource
     * @type {string}
     * @memberof CourseResource
     */
    'audience': string | null;
    /**
     * Returns the certification for the learning resource
     * @type {string}
     * @memberof CourseResource
     */
    'certification': string | null;
    /**
     * Returns the prices for the learning resource
     * @type {string}
     * @memberof CourseResource
     */
    'prices': string | null;
    /**
     * 
     * @type {Array<LearningResourceTopic>}
     * @memberof CourseResource
     */
    'topics'?: Array<LearningResourceTopic> | null;
    /**
     * 
     * @type {Array<LearningResourceRun>}
     * @memberof CourseResource
     */
    'runs': Array<LearningResourceRun> | null;
    /**
     * 
     * @type {Array<MicroRelationship>}
     * @memberof CourseResource
     */
    'learning_path_parents': Array<MicroRelationship> | null;
    /**
     * 
     * @type {Course}
     * @memberof CourseResource
     */
    'course': Course;
    /**
     * 
     * @type {string}
     * @memberof CourseResource
     */
    'readable_id': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResource
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResource
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseResource
     */
    'full_description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseResource
     */
    'last_modified'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseResource
     */
    'published'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CourseResource
     */
    'languages'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof CourseResource
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseResource
     */
    'resource_type': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResource
     */
    'platform': string | null;
}
/**
 * Serializer for the LearningPath model
 * @export
 * @interface LearningPath
 */
export interface LearningPath {
    /**
     * 
     * @type {number}
     * @memberof LearningPath
     */
    'id': number;
    /**
     * Return the number of items in the list
     * @type {number}
     * @memberof LearningPath
     */
    'item_count': number;
    /**
     * 
     * @type {number}
     * @memberof LearningPath
     */
    'author': number;
}
/**
 * Specialized serializer for a LearningPath relationship
 * @export
 * @interface LearningPathRelationship
 */
export interface LearningPathRelationship {
    /**
     * 
     * @type {number}
     * @memberof LearningPathRelationship
     */
    'id': number;
    /**
     * 
     * @type {LearningResource}
     * @memberof LearningPathRelationship
     */
    'resource': LearningResource | null;
    /**
     * 
     * @type {number}
     * @memberof LearningPathRelationship
     */
    'position'?: number;
    /**
     * 
     * @type {number}
     * @memberof LearningPathRelationship
     */
    'parent': number;
    /**
     * 
     * @type {number}
     * @memberof LearningPathRelationship
     */
    'child': number;
}
/**
 * CRUD serializer for LearningPath resources
 * @export
 * @interface LearningPathResource
 */
export interface LearningPathResource {
    /**
     * 
     * @type {LearningPath}
     * @memberof LearningPathResource
     */
    'learning_path': LearningPath;
}
/**
 * @type LearningResource
 * @export
 */
export type LearningResource = { resource_type: 'course' } & LearningResourceCourseResource | { resource_type: 'learningpath' } & LearningResourceLearningPathResource | { resource_type: 'program' } & LearningResourceProgramResource;

/**
 * 
 * @export
 * @interface LearningResourceCourseResource
 */
export interface LearningResourceCourseResource {
    /**
     * 
     * @type {number}
     * @memberof LearningResourceCourseResource
     */
    'id': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceCourseResource
     */
    'offered_by': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceCourseResource
     */
    'resource_content_tags': Array<string> | null;
    /**
     * 
     * @type {LearningResourceImage}
     * @memberof LearningResourceCourseResource
     */
    'image': LearningResourceImage | null;
    /**
     * 
     * @type {LearningResourceDepartment}
     * @memberof LearningResourceCourseResource
     */
    'department': LearningResourceDepartment | null;
    /**
     * Returns the audience for the learning resource
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'audience': string | null;
    /**
     * Returns the certification for the learning resource
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'certification': string | null;
    /**
     * Returns the prices for the learning resource
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'prices': string | null;
    /**
     * 
     * @type {Array<LearningResourceTopic>}
     * @memberof LearningResourceCourseResource
     */
    'topics'?: Array<LearningResourceTopic> | null;
    /**
     * 
     * @type {Array<LearningResourceRun>}
     * @memberof LearningResourceCourseResource
     */
    'runs': Array<LearningResourceRun> | null;
    /**
     * 
     * @type {Array<MicroRelationship>}
     * @memberof LearningResourceCourseResource
     */
    'learning_path_parents': Array<MicroRelationship> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'readable_id': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'full_description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'last_modified'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LearningResourceCourseResource
     */
    'published'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceCourseResource
     */
    'languages'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'resource_type': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceCourseResource
     */
    'platform': string | null;
    /**
     * 
     * @type {Course}
     * @memberof LearningResourceCourseResource
     */
    'course': Course;
}
/**
 * Serializer for LearningResourceDepartment
 * @export
 * @interface LearningResourceDepartment
 */
export interface LearningResourceDepartment {
    /**
     * 
     * @type {string}
     * @memberof LearningResourceDepartment
     */
    'department_id': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceDepartment
     */
    'name': string;
}
/**
 * Serializer for LearningResourceImage
 * @export
 * @interface LearningResourceImage
 */
export interface LearningResourceImage {
    /**
     * 
     * @type {number}
     * @memberof LearningResourceImage
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceImage
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceImage
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceImage
     */
    'alt'?: string | null;
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface LearningResourceInstructor
 */
export interface LearningResourceInstructor {
    /**
     * 
     * @type {number}
     * @memberof LearningResourceInstructor
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceInstructor
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceInstructor
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceInstructor
     */
    'full_name'?: string | null;
}
/**
 * 
 * @export
 * @interface LearningResourceLearningPathResource
 */
export interface LearningResourceLearningPathResource {
    /**
     * 
     * @type {number}
     * @memberof LearningResourceLearningPathResource
     */
    'id': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceLearningPathResource
     */
    'offered_by': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceLearningPathResource
     */
    'resource_content_tags': Array<string> | null;
    /**
     * 
     * @type {LearningResourceImage}
     * @memberof LearningResourceLearningPathResource
     */
    'image': LearningResourceImage | null;
    /**
     * 
     * @type {LearningResourceDepartment}
     * @memberof LearningResourceLearningPathResource
     */
    'department': LearningResourceDepartment | null;
    /**
     * Returns the audience for the learning resource
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'audience': string | null;
    /**
     * Returns the certification for the learning resource
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'certification': string | null;
    /**
     * Returns the prices for the learning resource
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'prices': string | null;
    /**
     * 
     * @type {Array<LearningResourceTopic>}
     * @memberof LearningResourceLearningPathResource
     */
    'topics'?: Array<LearningResourceTopic> | null;
    /**
     * 
     * @type {Array<LearningResourceRun>}
     * @memberof LearningResourceLearningPathResource
     */
    'runs': Array<LearningResourceRun> | null;
    /**
     * 
     * @type {Array<MicroRelationship>}
     * @memberof LearningResourceLearningPathResource
     */
    'learning_path_parents': Array<MicroRelationship> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'readable_id': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'full_description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'last_modified'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LearningResourceLearningPathResource
     */
    'published'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceLearningPathResource
     */
    'languages'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'resource_type': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceLearningPathResource
     */
    'platform': string | null;
    /**
     * 
     * @type {LearningPath}
     * @memberof LearningResourceLearningPathResource
     */
    'learning_path': LearningPath;
}
/**
 * 
 * @export
 * @interface LearningResourceProgramResource
 */
export interface LearningResourceProgramResource {
    /**
     * 
     * @type {number}
     * @memberof LearningResourceProgramResource
     */
    'id': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceProgramResource
     */
    'offered_by': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceProgramResource
     */
    'resource_content_tags': Array<string> | null;
    /**
     * 
     * @type {LearningResourceImage}
     * @memberof LearningResourceProgramResource
     */
    'image': LearningResourceImage | null;
    /**
     * 
     * @type {LearningResourceDepartment}
     * @memberof LearningResourceProgramResource
     */
    'department': LearningResourceDepartment | null;
    /**
     * Returns the audience for the learning resource
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'audience': string | null;
    /**
     * Returns the certification for the learning resource
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'certification': string | null;
    /**
     * Returns the prices for the learning resource
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'prices': string | null;
    /**
     * 
     * @type {Array<LearningResourceTopic>}
     * @memberof LearningResourceProgramResource
     */
    'topics'?: Array<LearningResourceTopic> | null;
    /**
     * 
     * @type {Array<LearningResourceRun>}
     * @memberof LearningResourceProgramResource
     */
    'runs': Array<LearningResourceRun> | null;
    /**
     * 
     * @type {Array<MicroRelationship>}
     * @memberof LearningResourceProgramResource
     */
    'learning_path_parents': Array<MicroRelationship> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'readable_id': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'full_description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'last_modified'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LearningResourceProgramResource
     */
    'published'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceProgramResource
     */
    'languages'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'resource_type': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceProgramResource
     */
    'platform': string | null;
    /**
     * 
     * @type {Program}
     * @memberof LearningResourceProgramResource
     */
    'program': Program;
}
/**
 * Serializer for the LearningResourceRun model
 * @export
 * @interface LearningResourceRun
 */
export interface LearningResourceRun {
    /**
     * 
     * @type {number}
     * @memberof LearningResourceRun
     */
    'id': number;
    /**
     * 
     * @type {Array<LearningResourceInstructor>}
     * @memberof LearningResourceRun
     */
    'instructors': Array<LearningResourceInstructor> | null;
    /**
     * 
     * @type {LearningResourceImage}
     * @memberof LearningResourceRun
     */
    'image': LearningResourceImage | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'run_id': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'full_description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'last_modified'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LearningResourceRun
     */
    'published'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceRun
     */
    'languages'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'level'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'availability'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'semester'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LearningResourceRun
     */
    'year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'start_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'enrollment_start'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceRun
     */
    'enrollment_end'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceRun
     */
    'prices'?: Array<string> | null;
}
/**
 * Polymorphic serailizer for Learning Resource.  This uses drf_polymorhpic library to allow this serializer to operate like a disjoint union type.
 * @export
 * @interface LearningResourceShared
 */
export interface LearningResourceShared {
    /**
     * 
     * @type {number}
     * @memberof LearningResourceShared
     */
    'id': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceShared
     */
    'offered_by': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceShared
     */
    'resource_content_tags': Array<string> | null;
    /**
     * 
     * @type {LearningResourceImage}
     * @memberof LearningResourceShared
     */
    'image': LearningResourceImage | null;
    /**
     * 
     * @type {LearningResourceDepartment}
     * @memberof LearningResourceShared
     */
    'department': LearningResourceDepartment | null;
    /**
     * Returns the audience for the learning resource
     * @type {string}
     * @memberof LearningResourceShared
     */
    'audience': string | null;
    /**
     * Returns the certification for the learning resource
     * @type {string}
     * @memberof LearningResourceShared
     */
    'certification': string | null;
    /**
     * Returns the prices for the learning resource
     * @type {string}
     * @memberof LearningResourceShared
     */
    'prices': string | null;
    /**
     * 
     * @type {Array<LearningResourceTopic>}
     * @memberof LearningResourceShared
     */
    'topics'?: Array<LearningResourceTopic> | null;
    /**
     * 
     * @type {Array<LearningResourceRun>}
     * @memberof LearningResourceShared
     */
    'runs': Array<LearningResourceRun> | null;
    /**
     * 
     * @type {Array<MicroRelationship>}
     * @memberof LearningResourceShared
     */
    'learning_path_parents': Array<MicroRelationship> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceShared
     */
    'readable_id': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceShared
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceShared
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceShared
     */
    'full_description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceShared
     */
    'last_modified'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LearningResourceShared
     */
    'published'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof LearningResourceShared
     */
    'languages'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceShared
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceShared
     */
    'resource_type': string;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceShared
     */
    'platform': string | null;
}
/**
 * Serializer for LearningResourceTopic model
 * @export
 * @interface LearningResourceTopic
 */
export interface LearningResourceTopic {
    /**
     * 
     * @type {number}
     * @memberof LearningResourceTopic
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof LearningResourceTopic
     */
    'name': string;
}
/**
 * Serializer containing only the parent and child ids
 * @export
 * @interface MicroRelationship
 */
export interface MicroRelationship {
    /**
     * 
     * @type {number}
     * @memberof MicroRelationship
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MicroRelationship
     */
    'parent_id': number;
    /**
     * 
     * @type {number}
     * @memberof MicroRelationship
     */
    'child_id': number;
}
/**
 * 
 * @export
 * @interface PaginatedCourseResourceList
 */
export interface PaginatedCourseResourceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCourseResourceList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCourseResourceList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCourseResourceList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CourseResource>}
     * @memberof PaginatedCourseResourceList
     */
    'results'?: Array<CourseResource>;
}
/**
 * 
 * @export
 * @interface PaginatedLearningPathRelationshipList
 */
export interface PaginatedLearningPathRelationshipList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedLearningPathRelationshipList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLearningPathRelationshipList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLearningPathRelationshipList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<LearningPathRelationship>}
     * @memberof PaginatedLearningPathRelationshipList
     */
    'results'?: Array<LearningPathRelationship>;
}
/**
 * 
 * @export
 * @interface PaginatedLearningPathResourceList
 */
export interface PaginatedLearningPathResourceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedLearningPathResourceList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLearningPathResourceList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLearningPathResourceList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<LearningPathResource>}
     * @memberof PaginatedLearningPathResourceList
     */
    'results'?: Array<LearningPathResource>;
}
/**
 * 
 * @export
 * @interface PaginatedLearningResourceList
 */
export interface PaginatedLearningResourceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedLearningResourceList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLearningResourceList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLearningResourceList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<LearningResource>}
     * @memberof PaginatedLearningResourceList
     */
    'results'?: Array<LearningResource>;
}
/**
 * 
 * @export
 * @interface PaginatedProgramResourceList
 */
export interface PaginatedProgramResourceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedProgramResourceList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProgramResourceList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProgramResourceList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProgramResource>}
     * @memberof PaginatedProgramResourceList
     */
    'results'?: Array<ProgramResource>;
}
/**
 * Specialized serializer for a LearningPath relationship
 * @export
 * @interface PatchedLearningPathRelationship
 */
export interface PatchedLearningPathRelationship {
    /**
     * 
     * @type {number}
     * @memberof PatchedLearningPathRelationship
     */
    'id'?: number;
    /**
     * 
     * @type {LearningResource}
     * @memberof PatchedLearningPathRelationship
     */
    'resource'?: LearningResource | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedLearningPathRelationship
     */
    'position'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedLearningPathRelationship
     */
    'parent'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedLearningPathRelationship
     */
    'child'?: number;
}
/**
 * Serializer for LearningResource
 * @export
 * @interface PatchedLearningPathResource
 */
export interface PatchedLearningPathResource {
    /**
     * 
     * @type {number}
     * @memberof PatchedLearningPathResource
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedLearningPathResource
     */
    'offered_by'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedLearningPathResource
     */
    'resource_content_tags'?: Array<string> | null;
    /**
     * 
     * @type {LearningResourceImage}
     * @memberof PatchedLearningPathResource
     */
    'image'?: LearningResourceImage | null;
    /**
     * 
     * @type {LearningResourceDepartment}
     * @memberof PatchedLearningPathResource
     */
    'department'?: LearningResourceDepartment | null;
    /**
     * Returns the audience for the learning resource
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'audience'?: string | null;
    /**
     * Returns the certification for the learning resource
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'certification'?: string | null;
    /**
     * Returns the prices for the learning resource
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'prices'?: string | null;
    /**
     * 
     * @type {Array<LearningResourceTopic>}
     * @memberof PatchedLearningPathResource
     */
    'topics'?: Array<LearningResourceTopic> | null;
    /**
     * 
     * @type {Array<LearningResourceRun>}
     * @memberof PatchedLearningPathResource
     */
    'runs'?: Array<LearningResourceRun> | null;
    /**
     * 
     * @type {Array<MicroRelationship>}
     * @memberof PatchedLearningPathResource
     */
    'learning_path_parents'?: Array<MicroRelationship> | null;
    /**
     * 
     * @type {LearningPath}
     * @memberof PatchedLearningPathResource
     */
    'learning_path'?: LearningPath;
    /**
     * 
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'readable_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'full_description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'last_modified'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedLearningPathResource
     */
    'published'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedLearningPathResource
     */
    'languages'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'resource_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedLearningPathResource
     */
    'platform'?: string | null;
}
/**
 * Serializer for the Program model
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * 
     * @type {Array<CourseResource>}
     * @memberof Program
     */
    'courses': Array<CourseResource>;
}
/**
 * Serializer for LearningResources of the program type
 * @export
 * @interface ProgramResource
 */
export interface ProgramResource {
    /**
     * 
     * @type {Program}
     * @memberof ProgramResource
     */
    'program': Program;
}

/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesList: async (departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/courses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (departmentId !== undefined) {
                localVarQueryParameter['department__id'] = departmentId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offeredByName !== undefined) {
                localVarQueryParameter['offered_by__name'] = offeredByName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesNewRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/courses/new/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('coursesRetrieve', 'id', id)
            const localVarPath = `/api/v1/courses/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of upcoming $Courses.
         * @summary List Upcoming
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesUpcomingList: async (departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/courses/upcoming/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (departmentId !== undefined) {
                localVarQueryParameter['department__id'] = departmentId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offeredByName !== undefined) {
                localVarQueryParameter['offered_by__name'] = offeredByName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesList(departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCourseResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesList(departmentId, limit, offeredByName, offset, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesNewRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesNewRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a paginated list of upcoming $Courses.
         * @summary List Upcoming
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesUpcomingList(departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCourseResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesUpcomingList(departmentId, limit, offeredByName, offset, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoursesApiFp(configuration)
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {CoursesApiCoursesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesList(requestParameters: CoursesApiCoursesListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedCourseResourceList> {
            return localVarFp.coursesList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesNewRetrieve(options?: AxiosRequestConfig): AxiosPromise<CourseResource> {
            return localVarFp.coursesNewRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {CoursesApiCoursesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesRetrieve(requestParameters: CoursesApiCoursesRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<CourseResource> {
            return localVarFp.coursesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of upcoming $Courses.
         * @summary List Upcoming
         * @param {CoursesApiCoursesUpcomingListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesUpcomingList(requestParameters: CoursesApiCoursesUpcomingListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedCourseResourceList> {
            return localVarFp.coursesUpcomingList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coursesList operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesListRequest
 */
export interface CoursesApiCoursesListRequest {
    /**
     * 
     * @type {number}
     * @memberof CoursesApiCoursesList
     */
    readonly departmentId?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CoursesApiCoursesList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CoursesApiCoursesList
     */
    readonly offeredByName?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CoursesApiCoursesList
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof CoursesApiCoursesList
     */
    readonly platform?: string
}

/**
 * Request parameters for coursesRetrieve operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesRetrieveRequest
 */
export interface CoursesApiCoursesRetrieveRequest {
    /**
     * A unique integer value identifying this learning resource.
     * @type {number}
     * @memberof CoursesApiCoursesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for coursesUpcomingList operation in CoursesApi.
 * @export
 * @interface CoursesApiCoursesUpcomingListRequest
 */
export interface CoursesApiCoursesUpcomingListRequest {
    /**
     * 
     * @type {number}
     * @memberof CoursesApiCoursesUpcomingList
     */
    readonly departmentId?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CoursesApiCoursesUpcomingList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CoursesApiCoursesUpcomingList
     */
    readonly offeredByName?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof CoursesApiCoursesUpcomingList
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof CoursesApiCoursesUpcomingList
     */
    readonly platform?: string
}

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {CoursesApiCoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesList(requestParameters: CoursesApiCoursesListRequest = {}, options?: AxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesNewRetrieve(options?: AxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesNewRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {CoursesApiCoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesRetrieve(requestParameters: CoursesApiCoursesRetrieveRequest, options?: AxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of upcoming $Courses.
     * @summary List Upcoming
     * @param {CoursesApiCoursesUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesUpcomingList(requestParameters: CoursesApiCoursesUpcomingListRequest = {}, options?: AxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesUpcomingList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LearningResourcesApi - axios parameter creator
 * @export
 */
export const LearningResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {string} [resourceType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesList: async (departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, resourceType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learning_resources/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (departmentId !== undefined) {
                localVarQueryParameter['department__id'] = departmentId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offeredByName !== undefined) {
                localVarQueryParameter['offered_by__name'] = offeredByName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesNewRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learning_resources/new/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningResourcesRetrieve', 'id', id)
            const localVarPath = `/api/v1/learning_resources/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of upcoming $Learning Resources.
         * @summary List Upcoming
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {string} [resourceType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesUpcomingList: async (departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, resourceType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learning_resources/upcoming/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (departmentId !== undefined) {
                localVarQueryParameter['department__id'] = departmentId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offeredByName !== undefined) {
                localVarQueryParameter['offered_by__name'] = offeredByName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LearningResourcesApi - functional programming interface
 * @export
 */
export const LearningResourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LearningResourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {string} [resourceType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningResourcesList(departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, resourceType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLearningResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningResourcesList(departmentId, limit, offeredByName, offset, platform, resourceType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningResourcesNewRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningResourcesNewRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningResourcesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningResourcesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a paginated list of upcoming $Learning Resources.
         * @summary List Upcoming
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {string} [resourceType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningResourcesUpcomingList(departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, resourceType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLearningResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningResourcesUpcomingList(departmentId, limit, offeredByName, offset, platform, resourceType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LearningResourcesApi - factory interface
 * @export
 */
export const LearningResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LearningResourcesApiFp(configuration)
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {LearningResourcesApiLearningResourcesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesList(requestParameters: LearningResourcesApiLearningResourcesListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedLearningResourceList> {
            return localVarFp.learningResourcesList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, requestParameters.resourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesNewRetrieve(options?: AxiosRequestConfig): AxiosPromise<LearningResource> {
            return localVarFp.learningResourcesNewRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {LearningResourcesApiLearningResourcesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesRetrieve(requestParameters: LearningResourcesApiLearningResourcesRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<LearningResource> {
            return localVarFp.learningResourcesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of upcoming $Learning Resources.
         * @summary List Upcoming
         * @param {LearningResourcesApiLearningResourcesUpcomingListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningResourcesUpcomingList(requestParameters: LearningResourcesApiLearningResourcesUpcomingListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedLearningResourceList> {
            return localVarFp.learningResourcesUpcomingList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, requestParameters.resourceType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for learningResourcesList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesListRequest
 */
export interface LearningResourcesApiLearningResourcesListRequest {
    /**
     * 
     * @type {number}
     * @memberof LearningResourcesApiLearningResourcesList
     */
    readonly departmentId?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof LearningResourcesApiLearningResourcesList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof LearningResourcesApiLearningResourcesList
     */
    readonly offeredByName?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof LearningResourcesApiLearningResourcesList
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof LearningResourcesApiLearningResourcesList
     */
    readonly platform?: string

    /**
     * 
     * @type {string}
     * @memberof LearningResourcesApiLearningResourcesList
     */
    readonly resourceType?: string
}

/**
 * Request parameters for learningResourcesRetrieve operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesRetrieveRequest
 */
export interface LearningResourcesApiLearningResourcesRetrieveRequest {
    /**
     * A unique integer value identifying this learning resource.
     * @type {number}
     * @memberof LearningResourcesApiLearningResourcesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for learningResourcesUpcomingList operation in LearningResourcesApi.
 * @export
 * @interface LearningResourcesApiLearningResourcesUpcomingListRequest
 */
export interface LearningResourcesApiLearningResourcesUpcomingListRequest {
    /**
     * 
     * @type {number}
     * @memberof LearningResourcesApiLearningResourcesUpcomingList
     */
    readonly departmentId?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof LearningResourcesApiLearningResourcesUpcomingList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof LearningResourcesApiLearningResourcesUpcomingList
     */
    readonly offeredByName?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof LearningResourcesApiLearningResourcesUpcomingList
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof LearningResourcesApiLearningResourcesUpcomingList
     */
    readonly platform?: string

    /**
     * 
     * @type {string}
     * @memberof LearningResourcesApiLearningResourcesUpcomingList
     */
    readonly resourceType?: string
}

/**
 * LearningResourcesApi - object-oriented interface
 * @export
 * @class LearningResourcesApi
 * @extends {BaseAPI}
 */
export class LearningResourcesApi extends BaseAPI {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningResourcesApiLearningResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    public learningResourcesList(requestParameters: LearningResourcesApiLearningResourcesListRequest = {}, options?: AxiosRequestConfig) {
        return LearningResourcesApiFp(this.configuration).learningResourcesList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, requestParameters.resourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    public learningResourcesNewRetrieve(options?: AxiosRequestConfig) {
        return LearningResourcesApiFp(this.configuration).learningResourcesNewRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {LearningResourcesApiLearningResourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    public learningResourcesRetrieve(requestParameters: LearningResourcesApiLearningResourcesRetrieveRequest, options?: AxiosRequestConfig) {
        return LearningResourcesApiFp(this.configuration).learningResourcesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of upcoming $Learning Resources.
     * @summary List Upcoming
     * @param {LearningResourcesApiLearningResourcesUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningResourcesApi
     */
    public learningResourcesUpcomingList(requestParameters: LearningResourcesApiLearningResourcesUpcomingListRequest = {}, options?: AxiosRequestConfig) {
        return LearningResourcesApiFp(this.configuration).learningResourcesUpcomingList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, requestParameters.resourceType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LearningpathsApi - axios parameter creator
 * @export
 */
export const LearningpathsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Viewset for LearningPaths
         * @param {LearningPathResource} [learningPathResource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsCreate: async (learningPathResource?: LearningPathResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learningpaths/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(learningPathResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPaths
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningpathsDestroy', 'id', id)
            const localVarPath = `/api/v1/learningpaths/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsList: async (departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learningpaths/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (departmentId !== undefined) {
                localVarQueryParameter['department__id'] = departmentId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offeredByName !== undefined) {
                localVarQueryParameter['offered_by__name'] = offeredByName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPaths
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {PatchedLearningPathResource} [patchedLearningPathResource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsPartialUpdate: async (id: number, patchedLearningPathResource?: PatchedLearningPathResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningpathsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/learningpaths/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedLearningPathResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} parentId 
         * @param {LearningPathRelationship} learningPathRelationship 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesCreate: async (parentId: number, learningPathRelationship: LearningPathRelationship, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('learningpathsResourcesCreate', 'parentId', parentId)
            // verify required parameter 'learningPathRelationship' is not null or undefined
            assertParamExists('learningpathsResourcesCreate', 'learningPathRelationship', learningPathRelationship)
            const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/`
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(learningPathRelationship, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesDestroy: async (id: number, parentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningpathsResourcesDestroy', 'id', id)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('learningpathsResourcesDestroy', 'parentId', parentId)
            const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} parentId 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesList: async (parentId: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('learningpathsResourcesList', 'parentId', parentId)
            const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/`
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} parentId 
         * @param {PatchedLearningPathRelationship} [patchedLearningPathRelationship] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesPartialUpdate: async (id: number, parentId: number, patchedLearningPathRelationship?: PatchedLearningPathRelationship, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningpathsResourcesPartialUpdate', 'id', id)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('learningpathsResourcesPartialUpdate', 'parentId', parentId)
            const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedLearningPathRelationship, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesRetrieve: async (id: number, parentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningpathsResourcesRetrieve', 'id', id)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('learningpathsResourcesRetrieve', 'parentId', parentId)
            const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} parentId 
         * @param {LearningPathRelationship} learningPathRelationship 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesUpdate: async (id: number, parentId: number, learningPathRelationship: LearningPathRelationship, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningpathsResourcesUpdate', 'id', id)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('learningpathsResourcesUpdate', 'parentId', parentId)
            // verify required parameter 'learningPathRelationship' is not null or undefined
            assertParamExists('learningpathsResourcesUpdate', 'learningPathRelationship', learningPathRelationship)
            const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(learningPathRelationship, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningpathsRetrieve', 'id', id)
            const localVarPath = `/api/v1/learningpaths/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for LearningPaths
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {LearningPathResource} [learningPathResource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsUpdate: async (id: number, learningPathResource?: LearningPathResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learningpathsUpdate', 'id', id)
            const localVarPath = `/api/v1/learningpaths/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(learningPathResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LearningpathsApi - functional programming interface
 * @export
 */
export const LearningpathsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LearningpathsApiAxiosParamCreator(configuration)
    return {
        /**
         * Viewset for LearningPaths
         * @param {LearningPathResource} [learningPathResource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsCreate(learningPathResource?: LearningPathResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningPathResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsCreate(learningPathResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPaths
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsList(departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLearningPathResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsList(departmentId, limit, offeredByName, offset, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPaths
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {PatchedLearningPathResource} [patchedLearningPathResource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsPartialUpdate(id: number, patchedLearningPathResource?: PatchedLearningPathResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningPathResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsPartialUpdate(id, patchedLearningPathResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} parentId 
         * @param {LearningPathRelationship} learningPathRelationship 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsResourcesCreate(parentId: number, learningPathRelationship: LearningPathRelationship, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningPathRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsResourcesCreate(parentId, learningPathRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsResourcesDestroy(id: number, parentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsResourcesDestroy(id, parentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} parentId 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsResourcesList(parentId: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLearningPathRelationshipList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsResourcesList(parentId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} parentId 
         * @param {PatchedLearningPathRelationship} [patchedLearningPathRelationship] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsResourcesPartialUpdate(id: number, parentId: number, patchedLearningPathRelationship?: PatchedLearningPathRelationship, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningPathRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsResourcesPartialUpdate(id, parentId, patchedLearningPathRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsResourcesRetrieve(id: number, parentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningPathRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsResourcesRetrieve(id, parentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPath related resources
         * @param {number} id A unique integer value identifying this learning resource relationship.
         * @param {number} parentId 
         * @param {LearningPathRelationship} learningPathRelationship 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsResourcesUpdate(id: number, parentId: number, learningPathRelationship: LearningPathRelationship, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningPathRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsResourcesUpdate(id, parentId, learningPathRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningPathResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Viewset for LearningPaths
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {LearningPathResource} [learningPathResource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learningpathsUpdate(id: number, learningPathResource?: LearningPathResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearningPathResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learningpathsUpdate(id, learningPathResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LearningpathsApi - factory interface
 * @export
 */
export const LearningpathsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LearningpathsApiFp(configuration)
    return {
        /**
         * Viewset for LearningPaths
         * @param {LearningpathsApiLearningpathsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsCreate(requestParameters: LearningpathsApiLearningpathsCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LearningPathResource> {
            return localVarFp.learningpathsCreate(requestParameters.learningPathResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPaths
         * @param {LearningpathsApiLearningpathsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsDestroy(requestParameters: LearningpathsApiLearningpathsDestroyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.learningpathsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {LearningpathsApiLearningpathsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsList(requestParameters: LearningpathsApiLearningpathsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedLearningPathResourceList> {
            return localVarFp.learningpathsList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPaths
         * @param {LearningpathsApiLearningpathsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsPartialUpdate(requestParameters: LearningpathsApiLearningpathsPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<LearningPathResource> {
            return localVarFp.learningpathsPartialUpdate(requestParameters.id, requestParameters.patchedLearningPathResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @param {LearningpathsApiLearningpathsResourcesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesCreate(requestParameters: LearningpathsApiLearningpathsResourcesCreateRequest, options?: AxiosRequestConfig): AxiosPromise<LearningPathRelationship> {
            return localVarFp.learningpathsResourcesCreate(requestParameters.parentId, requestParameters.learningPathRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @param {LearningpathsApiLearningpathsResourcesDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesDestroy(requestParameters: LearningpathsApiLearningpathsResourcesDestroyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.learningpathsResourcesDestroy(requestParameters.id, requestParameters.parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @param {LearningpathsApiLearningpathsResourcesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesList(requestParameters: LearningpathsApiLearningpathsResourcesListRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedLearningPathRelationshipList> {
            return localVarFp.learningpathsResourcesList(requestParameters.parentId, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @param {LearningpathsApiLearningpathsResourcesPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesPartialUpdate(requestParameters: LearningpathsApiLearningpathsResourcesPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<LearningPathRelationship> {
            return localVarFp.learningpathsResourcesPartialUpdate(requestParameters.id, requestParameters.parentId, requestParameters.patchedLearningPathRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @param {LearningpathsApiLearningpathsResourcesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesRetrieve(requestParameters: LearningpathsApiLearningpathsResourcesRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<LearningPathRelationship> {
            return localVarFp.learningpathsResourcesRetrieve(requestParameters.id, requestParameters.parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPath related resources
         * @param {LearningpathsApiLearningpathsResourcesUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsResourcesUpdate(requestParameters: LearningpathsApiLearningpathsResourcesUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<LearningPathRelationship> {
            return localVarFp.learningpathsResourcesUpdate(requestParameters.id, requestParameters.parentId, requestParameters.learningPathRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {LearningpathsApiLearningpathsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsRetrieve(requestParameters: LearningpathsApiLearningpathsRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<LearningPathResource> {
            return localVarFp.learningpathsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for LearningPaths
         * @param {LearningpathsApiLearningpathsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learningpathsUpdate(requestParameters: LearningpathsApiLearningpathsUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<LearningPathResource> {
            return localVarFp.learningpathsUpdate(requestParameters.id, requestParameters.learningPathResource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for learningpathsCreate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsCreateRequest
 */
export interface LearningpathsApiLearningpathsCreateRequest {
    /**
     * 
     * @type {LearningPathResource}
     * @memberof LearningpathsApiLearningpathsCreate
     */
    readonly learningPathResource?: LearningPathResource
}

/**
 * Request parameters for learningpathsDestroy operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsDestroyRequest
 */
export interface LearningpathsApiLearningpathsDestroyRequest {
    /**
     * A unique integer value identifying this learning resource.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for learningpathsList operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsListRequest
 */
export interface LearningpathsApiLearningpathsListRequest {
    /**
     * 
     * @type {number}
     * @memberof LearningpathsApiLearningpathsList
     */
    readonly departmentId?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof LearningpathsApiLearningpathsList
     */
    readonly offeredByName?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsList
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof LearningpathsApiLearningpathsList
     */
    readonly platform?: string
}

/**
 * Request parameters for learningpathsPartialUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsPartialUpdateRequest
 */
export interface LearningpathsApiLearningpathsPartialUpdateRequest {
    /**
     * A unique integer value identifying this learning resource.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedLearningPathResource}
     * @memberof LearningpathsApiLearningpathsPartialUpdate
     */
    readonly patchedLearningPathResource?: PatchedLearningPathResource
}

/**
 * Request parameters for learningpathsResourcesCreate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesCreateRequest
 */
export interface LearningpathsApiLearningpathsResourcesCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesCreate
     */
    readonly parentId: number

    /**
     * 
     * @type {LearningPathRelationship}
     * @memberof LearningpathsApiLearningpathsResourcesCreate
     */
    readonly learningPathRelationship: LearningPathRelationship
}

/**
 * Request parameters for learningpathsResourcesDestroy operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesDestroyRequest
 */
export interface LearningpathsApiLearningpathsResourcesDestroyRequest {
    /**
     * A unique integer value identifying this learning resource relationship.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesDestroy
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesDestroy
     */
    readonly parentId: number
}

/**
 * Request parameters for learningpathsResourcesList operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesListRequest
 */
export interface LearningpathsApiLearningpathsResourcesListRequest {
    /**
     * 
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesList
     */
    readonly parentId: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesList
     */
    readonly offset?: number
}

/**
 * Request parameters for learningpathsResourcesPartialUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesPartialUpdateRequest
 */
export interface LearningpathsApiLearningpathsResourcesPartialUpdateRequest {
    /**
     * A unique integer value identifying this learning resource relationship.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
     */
    readonly parentId: number

    /**
     * 
     * @type {PatchedLearningPathRelationship}
     * @memberof LearningpathsApiLearningpathsResourcesPartialUpdate
     */
    readonly patchedLearningPathRelationship?: PatchedLearningPathRelationship
}

/**
 * Request parameters for learningpathsResourcesRetrieve operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesRetrieveRequest
 */
export interface LearningpathsApiLearningpathsResourcesRetrieveRequest {
    /**
     * A unique integer value identifying this learning resource relationship.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesRetrieve
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesRetrieve
     */
    readonly parentId: number
}

/**
 * Request parameters for learningpathsResourcesUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsResourcesUpdateRequest
 */
export interface LearningpathsApiLearningpathsResourcesUpdateRequest {
    /**
     * A unique integer value identifying this learning resource relationship.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof LearningpathsApiLearningpathsResourcesUpdate
     */
    readonly parentId: number

    /**
     * 
     * @type {LearningPathRelationship}
     * @memberof LearningpathsApiLearningpathsResourcesUpdate
     */
    readonly learningPathRelationship: LearningPathRelationship
}

/**
 * Request parameters for learningpathsRetrieve operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsRetrieveRequest
 */
export interface LearningpathsApiLearningpathsRetrieveRequest {
    /**
     * A unique integer value identifying this learning resource.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for learningpathsUpdate operation in LearningpathsApi.
 * @export
 * @interface LearningpathsApiLearningpathsUpdateRequest
 */
export interface LearningpathsApiLearningpathsUpdateRequest {
    /**
     * A unique integer value identifying this learning resource.
     * @type {number}
     * @memberof LearningpathsApiLearningpathsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {LearningPathResource}
     * @memberof LearningpathsApiLearningpathsUpdate
     */
    readonly learningPathResource?: LearningPathResource
}

/**
 * LearningpathsApi - object-oriented interface
 * @export
 * @class LearningpathsApi
 * @extends {BaseAPI}
 */
export class LearningpathsApi extends BaseAPI {
    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsCreate(requestParameters: LearningpathsApiLearningpathsCreateRequest = {}, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsCreate(requestParameters.learningPathResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsDestroy(requestParameters: LearningpathsApiLearningpathsDestroyRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningpathsApiLearningpathsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsList(requestParameters: LearningpathsApiLearningpathsListRequest = {}, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsPartialUpdate(requestParameters: LearningpathsApiLearningpathsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsPartialUpdate(requestParameters.id, requestParameters.patchedLearningPathResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsResourcesCreate(requestParameters: LearningpathsApiLearningpathsResourcesCreateRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsResourcesCreate(requestParameters.parentId, requestParameters.learningPathRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsResourcesDestroy(requestParameters: LearningpathsApiLearningpathsResourcesDestroyRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsResourcesDestroy(requestParameters.id, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsResourcesList(requestParameters: LearningpathsApiLearningpathsResourcesListRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsResourcesList(requestParameters.parentId, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsResourcesPartialUpdate(requestParameters: LearningpathsApiLearningpathsResourcesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsResourcesPartialUpdate(requestParameters.id, requestParameters.parentId, requestParameters.patchedLearningPathRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsResourcesRetrieve(requestParameters: LearningpathsApiLearningpathsResourcesRetrieveRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsResourcesRetrieve(requestParameters.id, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPath related resources
     * @param {LearningpathsApiLearningpathsResourcesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsResourcesUpdate(requestParameters: LearningpathsApiLearningpathsResourcesUpdateRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsResourcesUpdate(requestParameters.id, requestParameters.parentId, requestParameters.learningPathRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {LearningpathsApiLearningpathsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsRetrieve(requestParameters: LearningpathsApiLearningpathsRetrieveRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for LearningPaths
     * @param {LearningpathsApiLearningpathsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningpathsApi
     */
    public learningpathsUpdate(requestParameters: LearningpathsApiLearningpathsUpdateRequest, options?: AxiosRequestConfig) {
        return LearningpathsApiFp(this.configuration).learningpathsUpdate(requestParameters.id, requestParameters.learningPathResource, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsList: async (departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/programs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (departmentId !== undefined) {
                localVarQueryParameter['department__id'] = departmentId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offeredByName !== undefined) {
                localVarQueryParameter['offered_by__name'] = offeredByName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsNewRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/programs/new/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programsRetrieve', 'id', id)
            const localVarPath = `/api/v1/programs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of upcoming $Programs.
         * @summary List Upcoming
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsUpcomingList: async (departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/programs/upcoming/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (departmentId !== undefined) {
                localVarQueryParameter['department__id'] = departmentId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offeredByName !== undefined) {
                localVarQueryParameter['offered_by__name'] = offeredByName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProgramsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programsList(departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProgramResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programsList(departmentId, limit, offeredByName, offset, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programsNewRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programsNewRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {number} id A unique integer value identifying this learning resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a paginated list of upcoming $Programs.
         * @summary List Upcoming
         * @param {number} [departmentId] 
         * @param {number} [limit] Number of results to return per page.
         * @param {string} [offeredByName] 
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [platform] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programsUpcomingList(departmentId?: number, limit?: number, offeredByName?: string, offset?: number, platform?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProgramResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programsUpcomingList(departmentId, limit, offeredByName, offset, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProgramsApiFp(configuration)
    return {
        /**
         * Get a paginated list of learning resources.
         * @summary List
         * @param {ProgramsApiProgramsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsList(requestParameters: ProgramsApiProgramsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedProgramResourceList> {
            return localVarFp.programsList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
         * @summary List New
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsNewRetrieve(options?: AxiosRequestConfig): AxiosPromise<ProgramResource> {
            return localVarFp.programsNewRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single learning resource.
         * @summary Retrieve
         * @param {ProgramsApiProgramsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieve(requestParameters: ProgramsApiProgramsRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<ProgramResource> {
            return localVarFp.programsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of upcoming $Programs.
         * @summary List Upcoming
         * @param {ProgramsApiProgramsUpcomingListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsUpcomingList(requestParameters: ProgramsApiProgramsUpcomingListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginatedProgramResourceList> {
            return localVarFp.programsUpcomingList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for programsList operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsListRequest
 */
export interface ProgramsApiProgramsListRequest {
    /**
     * 
     * @type {number}
     * @memberof ProgramsApiProgramsList
     */
    readonly departmentId?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProgramsApiProgramsList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof ProgramsApiProgramsList
     */
    readonly offeredByName?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ProgramsApiProgramsList
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof ProgramsApiProgramsList
     */
    readonly platform?: string
}

/**
 * Request parameters for programsRetrieve operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsRetrieveRequest
 */
export interface ProgramsApiProgramsRetrieveRequest {
    /**
     * A unique integer value identifying this learning resource.
     * @type {number}
     * @memberof ProgramsApiProgramsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for programsUpcomingList operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsUpcomingListRequest
 */
export interface ProgramsApiProgramsUpcomingListRequest {
    /**
     * 
     * @type {number}
     * @memberof ProgramsApiProgramsUpcomingList
     */
    readonly departmentId?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProgramsApiProgramsUpcomingList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof ProgramsApiProgramsUpcomingList
     */
    readonly offeredByName?: string

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ProgramsApiProgramsUpcomingList
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof ProgramsApiProgramsUpcomingList
     */
    readonly platform?: string
}

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {ProgramsApiProgramsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public programsList(requestParameters: ProgramsApiProgramsListRequest = {}, options?: AxiosRequestConfig) {
        return ProgramsApiFp(this.configuration).programsList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get new LearningResources  Returns:     QuerySet of LearningResource objects ordered by reverse created_on
     * @summary List New
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public programsNewRetrieve(options?: AxiosRequestConfig) {
        return ProgramsApiFp(this.configuration).programsNewRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {ProgramsApiProgramsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public programsRetrieve(requestParameters: ProgramsApiProgramsRetrieveRequest, options?: AxiosRequestConfig) {
        return ProgramsApiFp(this.configuration).programsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of upcoming $Programs.
     * @summary List Upcoming
     * @param {ProgramsApiProgramsUpcomingListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public programsUpcomingList(requestParameters: ProgramsApiProgramsUpcomingListRequest = {}, options?: AxiosRequestConfig) {
        return ProgramsApiFp(this.configuration).programsUpcomingList(requestParameters.departmentId, requestParameters.limit, requestParameters.offeredByName, requestParameters.offset, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }
}


