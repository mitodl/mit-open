/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
/**
 * Serializer for CourseTopic model
 */
export type CourseTopic = {
  id: number;
  /**
   * @maxLength 128
   */
  name: string;
};

/**
 * Serializer for FieldChannel
 */
export type FieldChannel = {
  name: string;
  title: string;
  about: {
    [key: string]: any;
  } | null;
  public_description: string;
  subfields: Subfield[];
  /**
   * Simplified serializer for UserList model.
   */
  featured_list: UserList;
  lists: UserList[];
  /**
   * Get the avatar image URL
   */
  avatar?: string;
  /**
   * Get the avatar image medium URL
   */
  avatar_medium: string;
  /**
   * Get the avatar image small URL
   */
  avatar_small: string;
  /**
   * Get the banner image URL
   */
  banner?: string;
  widget_list: number | null;
  /**
   * @format date-time
   */
  updated_on: string;
  /**
   * @format date-time
   */
  created_on: string;
  id: number;
  ga_tracking_id: string | null;
  /**
   * Return true if user is a moderator for the channel
   */
  is_moderator: boolean;
};

/**
 * Write serializer for FieldChannel
 */
export type FieldChannelCreate = {
  /**
   * @pattern ^[A-Za-z0-9_]+$
   * @maxLength 100
   */
  name: string;
  /**
   * @maxLength 100
   */
  title: string;
  public_description?: string;
  subfields?: Subfield[];
  featured_list?: number | null;
  lists?: UserList[];
  about?: {
    [key: string]: any;
  } | null;
};

/**
 * Similar to FieldChannelCreateSerializer, with read-only name
 */
export type FieldChannelWrite = {
  name: string;
  /**
   * @maxLength 100
   */
  title: string;
  public_description?: string;
  subfields?: Subfield[];
  featured_list?: number | null;
  lists?: UserList[];
  about?: {
    [key: string]: any;
  } | null;
  /**
   * Get the avatar image URL
   */
  avatar?: string;
  /**
   * Get the banner image URL
   */
  banner?: string;
};

/**
 * Serializer for moderators
 */
export type FieldModerator = {
  /**
   * Returns the name for the moderator
   */
  moderator_name?: string;
  /**
   * Get the email from the associated user
   */
  email?: string;
  /**
   * Get the full name of the associated user
   */
  full_name: string;
};

/**
 * Serializer for UserListItem containing only the item id and userlist id.
 */
export type MicroStaffListItem = {
  item_id: number;
  list_id: number;
  object_id: number;
  content_type: string;
};

/**
 * Serializer for UserListItem containing only the item id and userlist id.
 */
export type MicroUserListItem = {
  item_id: number;
  list_id: number;
  object_id: number;
  content_type: string;
};

export type PaginatedFieldChannelList = {
  /**
   * @example 123
   */
  count?: number;
  /**
   * @format uri
   * @example http://api.example.org/accounts/?offset=400&limit=100
   */
  next?: string | null;
  /**
   * @format uri
   * @example http://api.example.org/accounts/?offset=200&limit=100
   */
  previous?: string | null;
  results?: FieldChannel[];
};

/**
 * Similar to FieldChannelCreateSerializer, with read-only name
 */
export type PatchedFieldChannelWrite = {
  name?: string;
  /**
   * @maxLength 100
   */
  title?: string;
  public_description?: string;
  subfields?: Subfield[];
  featured_list?: number | null;
  lists?: UserList[];
  about?: {
    [key: string]: any;
  } | null;
  /**
   * Get the avatar image URL
   */
  avatar?: string;
  /**
   * Get the banner image URL
   */
  banner?: string;
};

/**
 * Serializer for Subfields
 */
export type Subfield = {
  parent_field: string;
  field_channel: string;
  /**
   * @maximum 2147483647
   * @minimum -2147483648
   */
  position?: number;
};

/**
 * Simplified serializer for UserList model.
 */
export type UserList = {
  id: number;
  /**
   * Return the number of items in the list
   */
  item_count: number;
  topics?: CourseTopic[];
  /**
   * get author name for userlist
   */
  author_name: string;
  object_type: string;
  /**
   * Return the user list's image or the image of the first item
   */
  image_src: string;
  /**
   * Returns the audience for the user list
   */
  audience: string[];
  /**
   * Returns the certification for the user list
   */
  certification: string[];
  is_favorite: boolean;
  lists: MicroUserListItem[];
  stafflists: MicroStaffListItem[];
  /**
   * @maxLength 256
   */
  title: string;
  short_description?: string | null;
  /**
   * @maxLength 1024
   */
  image_description?: string | null;
  /**
   * @maxLength 32
   */
  privacy_level?: string;
  /**
   * @maxLength 128
   */
  list_type: string;
  author: number;
  offered_by?: number[];
};
