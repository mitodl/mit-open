/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
import * as reactQuery from "@tanstack/react-query";
import { useOpenContext, OpenContext } from "./openContext";
import type * as Fetcher from "./openFetcher";
import { openFetch } from "./openFetcher";
import type * as Schemas from "./openSchemas";

export type RootListQueryParams = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
};

export type RootListError = Fetcher.ErrorWrapper<undefined>;

export type RootListVariables = {
  queryParams?: RootListQueryParams;
} & OpenContext["fetcherOptions"];

/**
 * Viewset for Field Channels
 */
export const fetchRootList = (
  variables: RootListVariables,
  signal?: AbortSignal
) =>
  openFetch<
    Schemas.PaginatedFieldChannelList,
    RootListError,
    undefined,
    {},
    RootListQueryParams,
    {}
  >({ url: "/api/v0/fields/", method: "get", ...variables, signal });

/**
 * Viewset for Field Channels
 */
export const useRootList = <TData = Schemas.PaginatedFieldChannelList>(
  variables: RootListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PaginatedFieldChannelList,
      RootListError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useOpenContext(options);
  return reactQuery.useQuery<
    Schemas.PaginatedFieldChannelList,
    RootListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/v0/fields/",
      operationId: "rootList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRootList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type RootCreateError = Fetcher.ErrorWrapper<undefined>;

export type RootCreateVariables = {
  body: Schemas.FieldChannelCreate;
} & OpenContext["fetcherOptions"];

/**
 * Viewset for Field Channels
 */
export const fetchRootCreate = (
  variables: RootCreateVariables,
  signal?: AbortSignal
) =>
  openFetch<
    Schemas.FieldChannelCreate,
    RootCreateError,
    Schemas.FieldChannelCreate,
    {},
    {},
    {}
  >({ url: "/api/v0/fields/", method: "post", ...variables, signal });

/**
 * Viewset for Field Channels
 */
export const useRootCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FieldChannelCreate,
      RootCreateError,
      RootCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenContext();
  return reactQuery.useMutation<
    Schemas.FieldChannelCreate,
    RootCreateError,
    RootCreateVariables
  >({
    mutationFn: (variables: RootCreateVariables) =>
      fetchRootCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RootRetrievePathParams = {
  fieldName: string;
};

export type RootRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type RootRetrieveVariables = {
  pathParams: RootRetrievePathParams;
} & OpenContext["fetcherOptions"];

/**
 * Viewset for Field Channels
 */
export const fetchRootRetrieve = (
  variables: RootRetrieveVariables,
  signal?: AbortSignal
) =>
  openFetch<
    Schemas.FieldChannel,
    RootRetrieveError,
    undefined,
    {},
    {},
    RootRetrievePathParams
  >({
    url: "/api/v0/fields/{fieldName}/",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Viewset for Field Channels
 */
export const useRootRetrieve = <TData = Schemas.FieldChannel>(
  variables: RootRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FieldChannel, RootRetrieveError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useOpenContext(options);
  return reactQuery.useQuery<Schemas.FieldChannel, RootRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: "/api/v0/fields/{field_name}/",
      operationId: "rootRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRootRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type RootUpdatePathParams = {
  fieldName: string;
};

export type RootUpdateError = Fetcher.ErrorWrapper<undefined>;

export type RootUpdateVariables = {
  body: Schemas.FieldChannelWrite;
  pathParams: RootUpdatePathParams;
} & OpenContext["fetcherOptions"];

/**
 * Viewset for Field Channels
 */
export const fetchRootUpdate = (
  variables: RootUpdateVariables,
  signal?: AbortSignal
) =>
  openFetch<
    Schemas.FieldChannelWrite,
    RootUpdateError,
    Schemas.FieldChannelWrite,
    {},
    {},
    RootUpdatePathParams
  >({
    url: "/api/v0/fields/{fieldName}/",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Viewset for Field Channels
 */
export const useRootUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FieldChannelWrite,
      RootUpdateError,
      RootUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenContext();
  return reactQuery.useMutation<
    Schemas.FieldChannelWrite,
    RootUpdateError,
    RootUpdateVariables
  >({
    mutationFn: (variables: RootUpdateVariables) =>
      fetchRootUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RootPartialUpdatePathParams = {
  fieldName: string;
};

export type RootPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type RootPartialUpdateVariables = {
  body?: Schemas.PatchedFieldChannelWrite;
  pathParams: RootPartialUpdatePathParams;
} & OpenContext["fetcherOptions"];

/**
 * Viewset for Field Channels
 */
export const fetchRootPartialUpdate = (
  variables: RootPartialUpdateVariables,
  signal?: AbortSignal
) =>
  openFetch<
    Schemas.FieldChannelWrite,
    RootPartialUpdateError,
    Schemas.PatchedFieldChannelWrite,
    {},
    {},
    RootPartialUpdatePathParams
  >({
    url: "/api/v0/fields/{fieldName}/",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Viewset for Field Channels
 */
export const useRootPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FieldChannelWrite,
      RootPartialUpdateError,
      RootPartialUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenContext();
  return reactQuery.useMutation<
    Schemas.FieldChannelWrite,
    RootPartialUpdateError,
    RootPartialUpdateVariables
  >({
    mutationFn: (variables: RootPartialUpdateVariables) =>
      fetchRootPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RootDestroyPathParams = {
  fieldName: string;
};

export type RootDestroyError = Fetcher.ErrorWrapper<undefined>;

export type RootDestroyVariables = {
  pathParams: RootDestroyPathParams;
} & OpenContext["fetcherOptions"];

/**
 * Viewset for Field Channels
 */
export const fetchRootDestroy = (
  variables: RootDestroyVariables,
  signal?: AbortSignal
) =>
  openFetch<
    undefined,
    RootDestroyError,
    undefined,
    {},
    {},
    RootDestroyPathParams
  >({
    url: "/api/v0/fields/{fieldName}/",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Viewset for Field Channels
 */
export const useRootDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RootDestroyError,
      RootDestroyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenContext();
  return reactQuery.useMutation<
    undefined,
    RootDestroyError,
    RootDestroyVariables
  >({
    mutationFn: (variables: RootDestroyVariables) =>
      fetchRootDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ModeratorsListPathParams = {
  /**
   * @pattern ^[A-Za-z0-9_]+$
   */
  fieldName: string;
};

export type ModeratorsListError = Fetcher.ErrorWrapper<undefined>;

export type ModeratorsListResponse = Schemas.FieldModerator[];

export type ModeratorsListVariables = {
  pathParams: ModeratorsListPathParams;
} & OpenContext["fetcherOptions"];

/**
 * View for listing and adding moderators
 */
export const fetchModeratorsList = (
  variables: ModeratorsListVariables,
  signal?: AbortSignal
) =>
  openFetch<
    ModeratorsListResponse,
    ModeratorsListError,
    undefined,
    {},
    {},
    ModeratorsListPathParams
  >({
    url: "/api/v0/fields/{fieldName}/moderators/",
    method: "get",
    ...variables,
    signal,
  });

/**
 * View for listing and adding moderators
 */
export const useModeratorsList = <TData = ModeratorsListResponse>(
  variables: ModeratorsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ModeratorsListResponse,
      ModeratorsListError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useOpenContext(options);
  return reactQuery.useQuery<
    ModeratorsListResponse,
    ModeratorsListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/v0/fields/{field_name}/moderators/",
      operationId: "moderatorsList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchModeratorsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ModeratorsCreatePathParams = {
  /**
   * @pattern ^[A-Za-z0-9_]+$
   */
  fieldName: string;
};

export type ModeratorsCreateError = Fetcher.ErrorWrapper<undefined>;

export type ModeratorsCreateVariables = {
  body: Schemas.FieldModerator;
  pathParams: ModeratorsCreatePathParams;
} & OpenContext["fetcherOptions"];

/**
 * View for listing and adding moderators
 */
export const fetchModeratorsCreate = (
  variables: ModeratorsCreateVariables,
  signal?: AbortSignal
) =>
  openFetch<
    Schemas.FieldModerator,
    ModeratorsCreateError,
    Schemas.FieldModerator,
    {},
    {},
    ModeratorsCreatePathParams
  >({
    url: "/api/v0/fields/{fieldName}/moderators/",
    method: "post",
    ...variables,
    signal,
  });

/**
 * View for listing and adding moderators
 */
export const useModeratorsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FieldModerator,
      ModeratorsCreateError,
      ModeratorsCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenContext();
  return reactQuery.useMutation<
    Schemas.FieldModerator,
    ModeratorsCreateError,
    ModeratorsCreateVariables
  >({
    mutationFn: (variables: ModeratorsCreateVariables) =>
      fetchModeratorsCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ModeratorsDestroyPathParams = {
  /**
   * @pattern ^[A-Za-z0-9_]+$
   */
  fieldName: string;
  /**
   * @pattern ^[A-Za-z0-9_]+$
   */
  moderatorName: string;
};

export type ModeratorsDestroyError = Fetcher.ErrorWrapper<undefined>;

export type ModeratorsDestroyVariables = {
  pathParams: ModeratorsDestroyPathParams;
} & OpenContext["fetcherOptions"];

/**
 * Remove the user from the moderator groups for this website
 */
export const fetchModeratorsDestroy = (
  variables: ModeratorsDestroyVariables,
  signal?: AbortSignal
) =>
  openFetch<
    undefined,
    ModeratorsDestroyError,
    undefined,
    {},
    {},
    ModeratorsDestroyPathParams
  >({
    url: "/api/v0/fields/{fieldName}/moderators/{moderatorName}/",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Remove the user from the moderator groups for this website
 */
export const useModeratorsDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ModeratorsDestroyError,
      ModeratorsDestroyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useOpenContext();
  return reactQuery.useMutation<
    undefined,
    ModeratorsDestroyError,
    ModeratorsDestroyVariables
  >({
    mutationFn: (variables: ModeratorsDestroyVariables) =>
      fetchModeratorsDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/api/v0/fields/";
      operationId: "rootList";
      variables: RootListVariables;
    }
  | {
      path: "/api/v0/fields/{field_name}/";
      operationId: "rootRetrieve";
      variables: RootRetrieveVariables;
    }
  | {
      path: "/api/v0/fields/{field_name}/moderators/";
      operationId: "moderatorsList";
      variables: ModeratorsListVariables;
    };
