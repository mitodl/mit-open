/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MIT Open Discussions Course Catalog API
 * Open Discussions public API
 * OpenAPI spec version: 0.0.1
 */
export type RootListParams = {
  /**
   * Number of results to return per page.
   */
  limit?: number
  /**
   * The initial index from which to return the results.
   */
  offset?: number
}

/**
 * Simplified serializer for UserList model.
 */
export interface UserList {
  readonly id: number
  /** Return the number of items in the list */
  readonly item_count: number
  topics?: CourseTopic[]
  /** get author name for userlist */
  readonly author_name: string
  readonly object_type: string
  /** Return the user list's image or the image of the first item */
  readonly image_src: string
  /** Returns the audience for the user list */
  readonly audience: string[]
  /** Returns the certification for the user list */
  readonly certification: string[]
  readonly is_favorite: boolean
  readonly lists: MicroUserListItem[]
  readonly stafflists: MicroStaffListItem[]
  title: string
  short_description?: string | null
  image_description?: string | null
  privacy_level?: string
  list_type: string
  readonly author: number
  offered_by?: number[]
}

/**
 * Serializer for Subfields
 */
export interface Subfield {
  readonly parent_field: string
  readonly field_channel: string
  position?: number
}

export type PatchedFieldChannelWriteAbout = { [key: string]: unknown } | null

/**
 * Similar to FieldChannelCreateSerializer, with read-only name
 */
export interface PatchedFieldChannelWrite {
  readonly name?: string
  title?: string
  public_description?: string
  subfields?: Subfield[]
  featured_list?: number | null
  lists?: UserList[]
  about?: PatchedFieldChannelWriteAbout
  /** Get the avatar image URL */
  avatar?: string
  /** Get the banner image URL */
  banner?: string
}

export interface PaginatedFieldChannelList {
  count?: number
  next?: string | null
  previous?: string | null
  results?: FieldChannel[]
}

/**
 * Serializer for UserListItem containing only the item id and userlist id.
 */
export interface MicroUserListItem {
  item_id: number
  list_id: number
  object_id: number
  content_type: string
}

/**
 * Serializer for UserListItem containing only the item id and userlist id.
 */
export interface MicroStaffListItem {
  item_id: number
  list_id: number
  object_id: number
  content_type: string
}

/**
 * Serializer for moderators
 */
export interface FieldModerator {
  /** Returns the name for the moderator */
  moderator_name?: string
  /** Get the email from the associated user */
  email?: string
  /** Get the full name of the associated user */
  readonly full_name: string
}

export type FieldChannelWriteAbout = { [key: string]: unknown } | null

/**
 * Similar to FieldChannelCreateSerializer, with read-only name
 */
export interface FieldChannelWrite {
  readonly name: string
  title: string
  public_description?: string
  subfields?: Subfield[]
  featured_list?: number | null
  lists?: UserList[]
  about?: FieldChannelWriteAbout
  /** Get the avatar image URL */
  avatar?: string
  /** Get the banner image URL */
  banner?: string
}

export type FieldChannelCreateAbout = { [key: string]: unknown } | null

/**
 * Write serializer for FieldChannel
 */
export interface FieldChannelCreate {
  name: string
  title: string
  public_description?: string
  subfields?: Subfield[]
  featured_list?: number | null
  lists?: UserList[]
  about?: FieldChannelCreateAbout
}

export type FieldChannelAbout = { [key: string]: unknown } | null

/**
 * Serializer for FieldChannel
 */
export interface FieldChannel {
  readonly name: string
  readonly title: string
  readonly about: FieldChannelAbout
  readonly public_description: string
  readonly subfields: Subfield[]
  readonly featured_list: UserList
  readonly lists: UserList[]
  /** Get the avatar image URL */
  avatar?: string
  /** Get the avatar image medium URL */
  readonly avatar_medium: string
  /** Get the avatar image small URL */
  readonly avatar_small: string
  /** Get the banner image URL */
  banner?: string
  readonly widget_list: number | null
  readonly updated_on: string
  readonly created_on: string
  readonly id: number
  readonly ga_tracking_id: string | null
  /** Return true if user is a moderator for the channel */
  readonly is_moderator: boolean
}

/**
 * Serializer for CourseTopic model
 */
export interface CourseTopic {
  readonly id: number
  name: string
}
