/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * MIT Open Discussions Course Catalog API
 * Open Discussions public API
 * OpenAPI spec version: 0.0.1
 */
import { rest } from "msw"
import { faker } from "@faker-js/faker"

export const getRootListMock = () => ({
  count: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined
  ]),
  next: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.internet.url(), null]),
    undefined
  ]),
  previous: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.internet.url(), null]),
    undefined
  ]),
  results: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      name:  faker.random.word(),
      title: faker.random.word(),
      about: {
        clkvbiw1i0000ddp7dg6v4i40: {}
      },
      public_description: faker.random.word(),
      subfields:          Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        parent_field:  faker.random.word(),
        field_channel: faker.random.word(),
        position:      faker.helpers.arrayElement([
          faker.datatype.number({ min: -2147483648, max: 2147483647 }),
          undefined
        ])
      })),
      featured_list: {
        id:         faker.datatype.number({ min: undefined, max: undefined }),
        item_count: faker.datatype.number({ min: undefined, max: undefined }),
        topics:     faker.helpers.arrayElement([
          Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id:   faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word()
          })),
          undefined
        ]),
        author_name: faker.random.word(),
        object_type: faker.random.word(),
        image_src:   faker.random.word(),
        audience:    Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        certification: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        is_favorite: faker.datatype.boolean(),
        lists:       Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          item_id:      faker.datatype.number({ min: undefined, max: undefined }),
          list_id:      faker.datatype.number({ min: undefined, max: undefined }),
          object_id:    faker.datatype.number({ min: undefined, max: undefined }),
          content_type: faker.random.word()
        })),
        stafflists: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          item_id:      faker.datatype.number({ min: undefined, max: undefined }),
          list_id:      faker.datatype.number({ min: undefined, max: undefined }),
          object_id:    faker.datatype.number({ min: undefined, max: undefined }),
          content_type: faker.random.word()
        })),
        title:             faker.random.word(),
        short_description: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.random.word(), null]),
          undefined
        ]),
        image_description: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.random.word(), null]),
          undefined
        ]),
        privacy_level: faker.helpers.arrayElement([
          faker.random.word(),
          undefined
        ]),
        list_type:  faker.random.word(),
        author:     faker.datatype.number({ min: undefined, max: undefined }),
        offered_by: faker.helpers.arrayElement([
          Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() =>
            faker.datatype.number({ min: undefined, max: undefined })
          ),
          undefined
        ])
      },
      lists: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        id:         faker.datatype.number({ min: undefined, max: undefined }),
        item_count: faker.datatype.number({ min: undefined, max: undefined }),
        topics:     faker.helpers.arrayElement([
          Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id:   faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word()
          })),
          undefined
        ]),
        author_name: faker.random.word(),
        object_type: faker.random.word(),
        image_src:   faker.random.word(),
        audience:    Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        certification: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        is_favorite: faker.datatype.boolean(),
        stafflists:  Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          item_id:      faker.datatype.number({ min: undefined, max: undefined }),
          list_id:      faker.datatype.number({ min: undefined, max: undefined }),
          object_id:    faker.datatype.number({ min: undefined, max: undefined }),
          content_type: faker.random.word()
        })),
        title:             faker.random.word(),
        short_description: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.random.word(), null]),
          undefined
        ]),
        image_description: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.random.word(), null]),
          undefined
        ]),
        privacy_level: faker.helpers.arrayElement([
          faker.random.word(),
          undefined
        ]),
        list_type:  faker.random.word(),
        author:     faker.datatype.number({ min: undefined, max: undefined }),
        offered_by: faker.helpers.arrayElement([
          Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() =>
            faker.datatype.number({ min: undefined, max: undefined })
          ),
          undefined
        ])
      })),
      avatar:        faker.helpers.arrayElement([faker.random.word(), undefined]),
      avatar_medium: faker.random.word(),
      avatar_small:  faker.random.word(),
      banner:        faker.helpers.arrayElement([faker.random.word(), undefined]),
      widget_list:   faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null
      ]),
      updated_on:     `${faker.date.past().toISOString().split(".")[0]}Z`,
      created_on:     `${faker.date.past().toISOString().split(".")[0]}Z`,
      id:             faker.datatype.number({ min: undefined, max: undefined }),
      ga_tracking_id: faker.helpers.arrayElement([faker.random.word(), null]),
      is_moderator:   faker.datatype.boolean()
    })),
    undefined
  ])
})

export const getRootCreateMock = () => ({
  name:               faker.random.word(),
  title:              faker.random.word(),
  public_description: faker.helpers.arrayElement([
    faker.random.word(),
    undefined
  ]),
  subfields: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      parent_field:  faker.random.word(),
      field_channel: faker.random.word(),
      position:      faker.helpers.arrayElement([
        faker.datatype.number({ min: -2147483648, max: 2147483647 }),
        undefined
      ])
    })),
    undefined
  ]),
  featured_list: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null
    ]),
    undefined
  ]),
  lists: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id:         faker.datatype.number({ min: undefined, max: undefined }),
      item_count: faker.datatype.number({ min: undefined, max: undefined }),
      topics:     faker.helpers.arrayElement([
        Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id:   faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word()
        })),
        undefined
      ]),
      author_name: faker.random.word(),
      object_type: faker.random.word(),
      image_src:   faker.random.word(),
      audience:    Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      certification: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      is_favorite: faker.datatype.boolean(),
      stafflists:  Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        item_id:      faker.datatype.number({ min: undefined, max: undefined }),
        list_id:      faker.datatype.number({ min: undefined, max: undefined }),
        object_id:    faker.datatype.number({ min: undefined, max: undefined }),
        content_type: faker.random.word()
      })),
      title:             faker.random.word(),
      short_description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined
      ]),
      image_description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined
      ]),
      privacy_level: faker.helpers.arrayElement([
        faker.random.word(),
        undefined
      ]),
      list_type:  faker.random.word(),
      author:     faker.datatype.number({ min: undefined, max: undefined }),
      offered_by: faker.helpers.arrayElement([
        Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
        undefined
      ])
    })),
    undefined
  ]),
  about: faker.helpers.arrayElement([
    {
      clkvbiw1k0001ddp719lr9s22: {}
    },
    undefined
  ])
})

export const getRootRetrieveMock = () => ({
  name:  faker.random.word(),
  title: faker.random.word(),
  about: {
    clkvbiw1w0002ddp78ux73d3b: {}
  },
  public_description: faker.random.word(),
  subfields:          Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    parent_field:  faker.random.word(),
    field_channel: faker.random.word(),
    position:      faker.helpers.arrayElement([
      faker.datatype.number({ min: -2147483648, max: 2147483647 }),
      undefined
    ])
  })),
  featured_list: {
    id:         faker.datatype.number({ min: undefined, max: undefined }),
    item_count: faker.datatype.number({ min: undefined, max: undefined }),
    topics:     faker.helpers.arrayElement([
      Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        id:   faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word()
      })),
      undefined
    ]),
    author_name: faker.random.word(),
    object_type: faker.random.word(),
    image_src:   faker.random.word(),
    audience:    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    certification: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    is_favorite: faker.datatype.boolean(),
    lists:       Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      item_id:      faker.datatype.number({ min: undefined, max: undefined }),
      list_id:      faker.datatype.number({ min: undefined, max: undefined }),
      object_id:    faker.datatype.number({ min: undefined, max: undefined }),
      content_type: faker.random.word()
    })),
    stafflists: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      item_id:      faker.datatype.number({ min: undefined, max: undefined }),
      list_id:      faker.datatype.number({ min: undefined, max: undefined }),
      object_id:    faker.datatype.number({ min: undefined, max: undefined }),
      content_type: faker.random.word()
    })),
    title:             faker.random.word(),
    short_description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.random.word(), null]),
      undefined
    ]),
    image_description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.random.word(), null]),
      undefined
    ]),
    privacy_level: faker.helpers.arrayElement([faker.random.word(), undefined]),
    list_type:     faker.random.word(),
    author:        faker.datatype.number({ min: undefined, max: undefined }),
    offered_by:    faker.helpers.arrayElement([
      Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
      undefined
    ])
  },
  lists: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id:         faker.datatype.number({ min: undefined, max: undefined }),
    item_count: faker.datatype.number({ min: undefined, max: undefined }),
    topics:     faker.helpers.arrayElement([
      Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        id:   faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word()
      })),
      undefined
    ]),
    author_name: faker.random.word(),
    object_type: faker.random.word(),
    image_src:   faker.random.word(),
    audience:    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    certification: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    is_favorite: faker.datatype.boolean(),
    stafflists:  Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      item_id:      faker.datatype.number({ min: undefined, max: undefined }),
      list_id:      faker.datatype.number({ min: undefined, max: undefined }),
      object_id:    faker.datatype.number({ min: undefined, max: undefined }),
      content_type: faker.random.word()
    })),
    title:             faker.random.word(),
    short_description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.random.word(), null]),
      undefined
    ]),
    image_description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.random.word(), null]),
      undefined
    ]),
    privacy_level: faker.helpers.arrayElement([faker.random.word(), undefined]),
    list_type:     faker.random.word(),
    author:        faker.datatype.number({ min: undefined, max: undefined }),
    offered_by:    faker.helpers.arrayElement([
      Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
      undefined
    ])
  })),
  avatar:        faker.helpers.arrayElement([faker.random.word(), undefined]),
  avatar_medium: faker.random.word(),
  avatar_small:  faker.random.word(),
  banner:        faker.helpers.arrayElement([faker.random.word(), undefined]),
  widget_list:   faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null
  ]),
  updated_on:     `${faker.date.past().toISOString().split(".")[0]}Z`,
  created_on:     `${faker.date.past().toISOString().split(".")[0]}Z`,
  id:             faker.datatype.number({ min: undefined, max: undefined }),
  ga_tracking_id: faker.helpers.arrayElement([faker.random.word(), null]),
  is_moderator:   faker.datatype.boolean()
})

export const getRootUpdateMock = () => ({
  name:               faker.random.word(),
  title:              faker.random.word(),
  public_description: faker.helpers.arrayElement([
    faker.random.word(),
    undefined
  ]),
  subfields: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      parent_field:  faker.random.word(),
      field_channel: faker.random.word(),
      position:      faker.helpers.arrayElement([
        faker.datatype.number({ min: -2147483648, max: 2147483647 }),
        undefined
      ])
    })),
    undefined
  ]),
  featured_list: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null
    ]),
    undefined
  ]),
  lists: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id:         faker.datatype.number({ min: undefined, max: undefined }),
      item_count: faker.datatype.number({ min: undefined, max: undefined }),
      topics:     faker.helpers.arrayElement([
        Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id:   faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word()
        })),
        undefined
      ]),
      author_name: faker.random.word(),
      object_type: faker.random.word(),
      image_src:   faker.random.word(),
      audience:    Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      certification: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      is_favorite: faker.datatype.boolean(),
      stafflists:  Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        item_id:      faker.datatype.number({ min: undefined, max: undefined }),
        list_id:      faker.datatype.number({ min: undefined, max: undefined }),
        object_id:    faker.datatype.number({ min: undefined, max: undefined }),
        content_type: faker.random.word()
      })),
      title:             faker.random.word(),
      short_description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined
      ]),
      image_description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined
      ]),
      privacy_level: faker.helpers.arrayElement([
        faker.random.word(),
        undefined
      ]),
      list_type:  faker.random.word(),
      author:     faker.datatype.number({ min: undefined, max: undefined }),
      offered_by: faker.helpers.arrayElement([
        Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
        undefined
      ])
    })),
    undefined
  ]),
  about: faker.helpers.arrayElement([
    {
      clkvbiw1y0003ddp72cwtcbil: {}
    },
    undefined
  ]),
  avatar: faker.helpers.arrayElement([faker.random.word(), undefined]),
  banner: faker.helpers.arrayElement([faker.random.word(), undefined])
})

export const getRootPartialUpdateMock = () => ({
  name:               faker.random.word(),
  title:              faker.random.word(),
  public_description: faker.helpers.arrayElement([
    faker.random.word(),
    undefined
  ]),
  subfields: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      parent_field:  faker.random.word(),
      field_channel: faker.random.word(),
      position:      faker.helpers.arrayElement([
        faker.datatype.number({ min: -2147483648, max: 2147483647 }),
        undefined
      ])
    })),
    undefined
  ]),
  featured_list: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null
    ]),
    undefined
  ]),
  lists: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id:         faker.datatype.number({ min: undefined, max: undefined }),
      item_count: faker.datatype.number({ min: undefined, max: undefined }),
      topics:     faker.helpers.arrayElement([
        Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id:   faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word()
        })),
        undefined
      ]),
      author_name: faker.random.word(),
      object_type: faker.random.word(),
      image_src:   faker.random.word(),
      audience:    Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      certification: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      is_favorite: faker.datatype.boolean(),
      stafflists:  Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        item_id:      faker.datatype.number({ min: undefined, max: undefined }),
        list_id:      faker.datatype.number({ min: undefined, max: undefined }),
        object_id:    faker.datatype.number({ min: undefined, max: undefined }),
        content_type: faker.random.word()
      })),
      title:             faker.random.word(),
      short_description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined
      ]),
      image_description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined
      ]),
      privacy_level: faker.helpers.arrayElement([
        faker.random.word(),
        undefined
      ]),
      list_type:  faker.random.word(),
      author:     faker.datatype.number({ min: undefined, max: undefined }),
      offered_by: faker.helpers.arrayElement([
        Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
        undefined
      ])
    })),
    undefined
  ]),
  about: faker.helpers.arrayElement([
    {
      clkvbiw1y0004ddp76gyz4h9c: {}
    },
    undefined
  ]),
  avatar: faker.helpers.arrayElement([faker.random.word(), undefined]),
  banner: faker.helpers.arrayElement([faker.random.word(), undefined])
})

export const getDefaultMSW = () => [
  rest.get("*/api/v0/fields/", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getRootListMock())
    )
  }),
  rest.post("*/api/v0/fields/", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getRootCreateMock())
    )
  }),
  rest.get("*/api/v0/fields/:fieldName/", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getRootRetrieveMock())
    )
  }),
  rest.put("*/api/v0/fields/:fieldName/", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getRootUpdateMock())
    )
  }),
  rest.patch("*/api/v0/fields/:fieldName/", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getRootPartialUpdateMock())
    )
  }),
  rest.delete("*/api/v0/fields/:fieldName/", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"))
  })
]
