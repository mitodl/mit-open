/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MIT Open Discussions Course Catalog API
 * Open Discussions public API
 * OpenAPI spec version: 0.0.1
 */
import axios from "axios"
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios"
import { useQuery, useMutation } from "@tanstack/react-query"
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from "@tanstack/react-query"
import type {
  PaginatedFieldChannelList,
  RootListParams,
  FieldChannelCreate,
  FieldChannel,
  FieldChannelWrite,
  PatchedFieldChannelWrite
} from "../orval.schemas"

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T
>() => T extends Y ? 1 : 2
  ? A
  : B

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >
}[keyof T]

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never

type Writable<T> = Pick<T, WritableKeys<T>>
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P]
    }
  : DistributeReadOnlyOverUnions<T>

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * Viewset for Field Channels
 */
export const rootList = (
  params?: RootListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedFieldChannelList>> => {
  return axios.get(`/api/v0/fields/`, {
    ...options,
    params: { ...params, ...options?.params }
  })
}

export const getRootListQueryKey = (params?: RootListParams) =>
  [`/api/v0/fields/`, ...(params ? [params] : [])] as const

export const getRootListQueryOptions = <
  TData = Awaited<ReturnType<typeof rootList>>,
  TError = AxiosError<unknown>
>(
    params?: RootListParams,
    options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rootList>>, TError, TData>
    axios?: AxiosRequestConfig
  }
  ): UseQueryOptions<Awaited<ReturnType<typeof rootList>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRootListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rootList>>> = ({
    signal
  }) => rootList(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions }
}

export type RootListQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootList>>
>
export type RootListQueryError = AxiosError<unknown>

export const useRootList = <
  TData = Awaited<ReturnType<typeof rootList>>,
  TError = AxiosError<unknown>
>(
    params?: RootListParams,
    options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rootList>>, TError, TData>
    axios?: AxiosRequestConfig
  }
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRootListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Viewset for Field Channels
 */
export const rootCreate = (
  fieldChannelCreate: FieldChannelCreate,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<FieldChannelCreate>> => {
  return axios.post(`/api/v0/fields/`, fieldChannelCreate, options)
}

export const getRootCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootCreate>>,
    TError,
    { data: FieldChannelCreate },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof rootCreate>>,
  TError,
  { data: FieldChannelCreate },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rootCreate>>,
    { data: FieldChannelCreate }
  > = props => {
    const { data } = props ?? {}

    return rootCreate(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RootCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof rootCreate>>
>
export type RootCreateMutationBody = FieldChannelCreate
export type RootCreateMutationError = AxiosError<unknown>

export const useRootCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootCreate>>,
    TError,
    { data: FieldChannelCreate },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getRootCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Viewset for Field Channels
 */
export const rootRetrieve = (
  fieldName: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<FieldChannel>> => {
  return axios.get(`/api/v0/fields/${fieldName}/`, options)
}

export const getRootRetrieveQueryKey = (fieldName: string) =>
  [`/api/v0/fields/${fieldName}/`] as const

export const getRootRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof rootRetrieve>>,
  TError = AxiosError<unknown>
>(
    fieldName: string,
    options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof rootRetrieve>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
  ): UseQueryOptions<Awaited<ReturnType<typeof rootRetrieve>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRootRetrieveQueryKey(fieldName)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rootRetrieve>>> = ({
    signal
  }) => rootRetrieve(fieldName, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: !!fieldName, ...queryOptions }
}

export type RootRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootRetrieve>>
>
export type RootRetrieveQueryError = AxiosError<unknown>

export const useRootRetrieve = <
  TData = Awaited<ReturnType<typeof rootRetrieve>>,
  TError = AxiosError<unknown>
>(
    fieldName: string,
    options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof rootRetrieve>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRootRetrieveQueryOptions(fieldName, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Viewset for Field Channels
 */
export const rootUpdate = (
  fieldName: string,
  fieldChannelWrite: NonReadonly<FieldChannelWrite>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<FieldChannelWrite>> => {
  return axios.put(`/api/v0/fields/${fieldName}/`, fieldChannelWrite, options)
}

export const getRootUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootUpdate>>,
    TError,
    { fieldName: string; data: NonReadonly<FieldChannelWrite> },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof rootUpdate>>,
  TError,
  { fieldName: string; data: NonReadonly<FieldChannelWrite> },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rootUpdate>>,
    { fieldName: string; data: NonReadonly<FieldChannelWrite> }
  > = props => {
    const { fieldName, data } = props ?? {}

    return rootUpdate(fieldName, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RootUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof rootUpdate>>
>
export type RootUpdateMutationBody = NonReadonly<FieldChannelWrite>
export type RootUpdateMutationError = AxiosError<unknown>

export const useRootUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootUpdate>>,
    TError,
    { fieldName: string; data: NonReadonly<FieldChannelWrite> },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getRootUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Viewset for Field Channels
 */
export const rootPartialUpdate = (
  fieldName: string,
  patchedFieldChannelWrite: NonReadonly<PatchedFieldChannelWrite>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<FieldChannelWrite>> => {
  return axios.patch(
    `/api/v0/fields/${fieldName}/`,
    patchedFieldChannelWrite,
    options
  )
}

export const getRootPartialUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootPartialUpdate>>,
    TError,
    { fieldName: string; data: NonReadonly<PatchedFieldChannelWrite> },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof rootPartialUpdate>>,
  TError,
  { fieldName: string; data: NonReadonly<PatchedFieldChannelWrite> },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rootPartialUpdate>>,
    { fieldName: string; data: NonReadonly<PatchedFieldChannelWrite> }
  > = props => {
    const { fieldName, data } = props ?? {}

    return rootPartialUpdate(fieldName, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RootPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof rootPartialUpdate>>
>
export type RootPartialUpdateMutationBody =
  NonReadonly<PatchedFieldChannelWrite>
export type RootPartialUpdateMutationError = AxiosError<unknown>

export const useRootPartialUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootPartialUpdate>>,
    TError,
    { fieldName: string; data: NonReadonly<PatchedFieldChannelWrite> },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getRootPartialUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Viewset for Field Channels
 */
export const rootDestroy = (
  fieldName: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/v0/fields/${fieldName}/`, options)
}

export const getRootDestroyMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootDestroy>>,
    TError,
    { fieldName: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof rootDestroy>>,
  TError,
  { fieldName: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rootDestroy>>,
    { fieldName: string }
  > = props => {
    const { fieldName } = props ?? {}

    return rootDestroy(fieldName, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RootDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof rootDestroy>>
>

export type RootDestroyMutationError = AxiosError<unknown>

export const useRootDestroy = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootDestroy>>,
    TError,
    { fieldName: string },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getRootDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
