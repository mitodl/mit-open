/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MIT Open Discussions Course Catalog API
 * Open Discussions public API
 * OpenAPI spec version: 0.0.1
 */
import axios from "axios"
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios"
import { useQuery, useMutation } from "@tanstack/react-query"
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from "@tanstack/react-query"
import type { FieldModerator } from "../orval.schemas"

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T
>() => T extends Y ? 1 : 2
  ? A
  : B

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >
}[keyof T]

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never

type Writable<T> = Pick<T, WritableKeys<T>>
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P]
    }
  : DistributeReadOnlyOverUnions<T>

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * View for listing and adding moderators
 */
export const moderatorsList = (
  fieldName: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<FieldModerator[]>> => {
  return axios.get(`/api/v0/fields/${fieldName}/moderators/`, options)
}

export const getModeratorsListQueryKey = (fieldName: string) =>
  [`/api/v0/fields/${fieldName}/moderators/`] as const

export const getModeratorsListQueryOptions = <
  TData = Awaited<ReturnType<typeof moderatorsList>>,
  TError = AxiosError<unknown>
>(
    fieldName: string,
    options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof moderatorsList>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
  ): UseQueryOptions<
  Awaited<ReturnType<typeof moderatorsList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getModeratorsListQueryKey(fieldName)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof moderatorsList>>> = ({
    signal
  }) => moderatorsList(fieldName, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: !!fieldName, ...queryOptions }
}

export type ModeratorsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof moderatorsList>>
>
export type ModeratorsListQueryError = AxiosError<unknown>

export const useModeratorsList = <
  TData = Awaited<ReturnType<typeof moderatorsList>>,
  TError = AxiosError<unknown>
>(
    fieldName: string,
    options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof moderatorsList>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getModeratorsListQueryOptions(fieldName, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * View for listing and adding moderators
 */
export const moderatorsCreate = (
  fieldName: string,
  fieldModerator: NonReadonly<FieldModerator>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<FieldModerator>> => {
  return axios.post(
    `/api/v0/fields/${fieldName}/moderators/`,
    fieldModerator,
    options
  )
}

export const getModeratorsCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof moderatorsCreate>>,
    TError,
    { fieldName: string; data: NonReadonly<FieldModerator> },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof moderatorsCreate>>,
  TError,
  { fieldName: string; data: NonReadonly<FieldModerator> },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof moderatorsCreate>>,
    { fieldName: string; data: NonReadonly<FieldModerator> }
  > = props => {
    const { fieldName, data } = props ?? {}

    return moderatorsCreate(fieldName, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ModeratorsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof moderatorsCreate>>
>
export type ModeratorsCreateMutationBody = NonReadonly<FieldModerator>
export type ModeratorsCreateMutationError = AxiosError<unknown>

export const useModeratorsCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof moderatorsCreate>>,
    TError,
    { fieldName: string; data: NonReadonly<FieldModerator> },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getModeratorsCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Remove the user from the moderator groups for this website
 */
export const moderatorsDestroy = (
  fieldName: string,
  moderatorName: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(
    `/api/v0/fields/${fieldName}/moderators/${moderatorName}/`,
    options
  )
}

export const getModeratorsDestroyMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof moderatorsDestroy>>,
    TError,
    { fieldName: string; moderatorName: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof moderatorsDestroy>>,
  TError,
  { fieldName: string; moderatorName: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof moderatorsDestroy>>,
    { fieldName: string; moderatorName: string }
  > = props => {
    const { fieldName, moderatorName } = props ?? {}

    return moderatorsDestroy(fieldName, moderatorName, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ModeratorsDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof moderatorsDestroy>>
>

export type ModeratorsDestroyMutationError = AxiosError<unknown>

export const useModeratorsDestroy = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof moderatorsDestroy>>,
    TError,
    { fieldName: string; moderatorName: string },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getModeratorsDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
