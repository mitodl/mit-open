x-environment: &py-environment

services:
  db:
    extends:
      file: docker-compose.yml
      service: db
    env_file: env/codespaces.env
  redis:
    extends:
      file: docker-compose.yml
      service: redis
    env_file: env/codespaces.env
  web:
    profiles:
      - backend
    build:
      context: .
      dockerfile: Dockerfile
    mem_limit: 1gb
    cpus: 2
    env_file: env/codespaces.env
    command: ./scripts/run-django-dev.sh
    stdin_open: true
    tty: true
    ports:
      - "8061:8061"
    links:
      - db
      - opensearch-node-mitopen
      - redis
    volumes:
      - .:/src
      - django_media:/var/media
  watch:
    profiles:
      - frontend
    working_dir: /src
    image: node:20.15
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        yarn install --immutable
        yarn workspace mit-learn storybook --no-open &
        yarn workspace mit-learn watch:docker
    env_file: env/codespaces.env
    ports:
      - "8062:8062"
      - "6006:6006"
    volumes:
      - .:/src
  celery:
    profiles:
      - backend
    build:
      context: .
      dockerfile: Dockerfile
    env_file: env/codespaces.env
    command: >
      /bin/bash -c '
      sleep 3;
      celery -A main.celery:app worker -Q default -B -l ${MITOL_LOG_LEVEL:-INFO} &
      celery -A main.celery:app worker -Q edx_content,default -l ${MITOL_LOG_LEVEL:-INFO}'
    links:
      - db
      - opensearch-node-mitopen
      - redis
    volumes:
      - .:/src
      - django_media:/var/media
  tika:
    extends:
      file: docker-compose.yml
      service: tika
  opensearch-node-mitopen:
    extends:
      file: docker-compose.yml
      service: opensearch-node-mitopen
    env_file: env/codespaces.env
  nginx:
    extends:
      file: docker-compose.yml
      service: nginx

volumes:
  opensearch-data1:
  django_media:
  yarn-cache:
  pgdata:
